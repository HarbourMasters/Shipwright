name: generate-builds
on:
  push:
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  generate-soh-otr:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.14
      with:
        key: ${{ runner.os }}-otr-ccache-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-otr-ccache-${{ github.ref }}
          ${{ runner.os }}-otr-ccache-
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y $(cat .github/workflows/apt-deps.txt)
    - name: Cache build folders
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-otr-build-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-otr-build-${{ github.ref }}
          ${{ runner.os }}-otr-build-
        path: |
          build-cmake
          SDL2-2.28.5
    - name: Install latest SDL
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        if [ ! -d "SDL2-2.28.5" ]; then
          wget https://www.libsdl.org/release/SDL2-2.28.5.tar.gz
          tar -xzf SDL2-2.28.5.tar.gz
        fi
        cd SDL2-2.28.5
        ./configure --enable-hidapi-libusb
        make -j 10
        sudo make install
        sudo cp -av /usr/local/lib/libSDL* /lib/x86_64-linux-gnu/
    - name: Install latest tinyxml2
      run: |
        sudo apt-get remove libtinyxml2-dev
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        if [ ! -d "tinyxml2-10.0.0" ]; then
          wget https://github.com/leethomason/tinyxml2/archive/refs/tags/10.0.0.tar.gz
          tar -xzf 10.0.0.tar.gz
        fi
        cd tinyxml2-10.0.0
        mkdir build
        cd build
        cmake ..
        make
        sudo make install
    - name: Generate soh.otr
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        cmake --no-warn-unused-cli -H. -Bbuild-cmake -GNinja -DCMAKE_BUILD_TYPE:STRING=Release
        cmake --build build-cmake --config Release --target GenerateSohOtr
    - uses: actions/upload-artifact@v4
      with:
        name: soh.otr
        path: soh.otr
        retention-days: 1
  build-macos:
    needs: generate-soh-otr
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.14
      with:
        create-symlink: true
        key: ${{ runner.os }}-14-ccache-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-14-ccache-${{ github.ref }}
          ${{ runner.os }}-14-ccache-
    - name: Install gtar wrapper
      run: |
        sudo mv /opt/homebrew/bin/gtar /opt/homebrew/bin/gtar.orig
        sudo cp .github/workflows//gtar /opt/homebrew/bin/gtar
        sudo chmod +x /opt/homebrew/bin/gtar
    - name: Cache MacPorts
      id: cache-macports
      uses: actions/cache@v4
      with:
        path: /opt/local/
        key: ${{ runner.os }}-14-macports-${{ hashFiles('.github/workflows/macports-deps.txt') }}
        restore-keys: |
          ${{ runner.os }}-14-macports-
    - name: Install MacPorts (if necessary)
      run: |
        if [ -d /opt/local/ ]; then
          echo "MacPorts already installed"
        else
          wget https://github.com/macports/macports-base/releases/download/v2.9.3/MacPorts-2.9.3-14-Sonoma.pkg
          sudo installer -pkg ./MacPorts-2.9.3-14-Sonoma.pkg -target /
        fi
        echo "/opt/local/bin:/opt/local/sbin" >> $GITHUB_PATH
    - name: Install dependencies
      run: |
        brew uninstall --ignore-dependencies libpng
        sudo port install $(cat .github/workflows/macports-deps.txt)
        brew install ninja
    - name: Download soh.otr
      uses: actions/download-artifact@v4
      with:
        name: soh.otr
    - name: Build SoH
      run: |
        cmake --no-warn-unused-cli -H. -Bbuild-cmake -GNinja -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DBUILD_REMOTE_CONTROL=1
        cmake --build build-cmake --config Release --parallel 10
        mv soh.otr build-cmake/soh
        (cd build-cmake && cpack)

        mv _packages/*.dmg SoH.dmg
        mv README.md readme.txt
    - name: Upload build
      uses: actions/upload-artifact@v4
      with:
        name: soh-mac
        path: |
          SoH.dmg
          readme.txt
  build-linux:
    needs: generate-soh-otr
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y $(cat .github/workflows/apt-deps.txt)
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.14
      with:
        key: linux-ccache-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          linux-ccache-${{ github.ref }}
          linux-ccache-
    - name: Cache build folders
      uses: actions/cache@v4
      with:
        key: linux-build-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          linux-build-${{ github.ref }}
          linux-build-
        path: |
          SDL2-2.28.5
          SDL2_net-2.2.0
    - name: Install latest SDL
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        if [ ! -d "SDL2-2.28.5" ]; then
          wget https://www.libsdl.org/release/SDL2-2.28.5.tar.gz
          tar -xzf SDL2-2.28.5.tar.gz
        fi
        cd SDL2-2.28.5
        ./configure --enable-hidapi-libusb
        make -j 10
        sudo make install
        sudo cp -av /usr/local/lib/libSDL* /lib/x86_64-linux-gnu/
    - name: Install latest tinyxml2
      run: |
        sudo apt-get remove libtinyxml2-dev
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        if [ ! -d "tinyxml2-10.0.0" ]; then
          wget https://github.com/leethomason/tinyxml2/archive/refs/tags/10.0.0.tar.gz
          tar -xzf 10.0.0.tar.gz
        fi
        cd tinyxml2-10.0.0
        mkdir build
        cd build
        cmake ..
        make
        sudo make install
    - name: Install latest SDL_net
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        if [ ! -d "SDL2_net-2.2.0" ]; then
          wget https://www.libsdl.org/projects/SDL_net/release/SDL2_net-2.2.0.tar.gz
          tar -xzf SDL2_net-2.2.0.tar.gz
        fi
        cd SDL2_net-2.2.0
        ./configure
        make -j 10
        sudo make install
        sudo cp -av /usr/local/lib/libSDL* /lib/x86_64-linux-gnu/
    - name: Download soh.otr
      uses: actions/download-artifact@v4
      with:
        name: soh.otr
    - name: Build SoH
      run: |
        export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        cmake --no-warn-unused-cli -H. -Bbuild-cmake -GNinja -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_REMOTE_CONTROL=1
        cmake --build build-cmake --config Release -j3
        (cd build-cmake && cpack -G External)

        mv README.md readme.txt
        mv build-cmake/*.appimage soh.appimage
      env:
        CC: gcc-12
        CXX: g++-12
    - name: Upload build
      uses: actions/upload-artifact@v4
      with:
        name: soh-linux
        path: |
          soh.appimage
          readme.txt
  build-windows:
    needs: generate-soh-otr
    runs-on: ${{ (vars.WINDOWS_RUNNER && fromJSON(vars.WINDOWS_RUNNER)) || 'windows-latest' }}
    steps:
    - name: Install dependencies
      if: ${{ !vars.WINDOWS_RUNNER }}
      run: |
        choco install ninja
        Remove-Item -Path "C:\ProgramData\Chocolatey\bin\ccache.exe" -Force -ErrorAction SilentlyContinue
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.14
      with:
        variant: sccache
        max-size: "1G"
        key: ${{ runner.os }}-ccache-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache-${{ github.ref }}
          ${{ runner.os }}-ccache-
    - name: Cache build folder
      uses: actions/cache@v4
      with:
        save-always: true
        key: ${{ runner.os }}-build-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-${{ github.ref }}
          ${{ runner.os }}-build-
        path: |
          build-windows
          vcpkg
    - name: Configure Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
    - name: Build SoH
      env: 
        VCPKG_ROOT: ${{github.workspace}}/vcpkg
      run: |
        set $env:PATH="$env:USERPROFILE/.cargo/bin;$env:PATH"
        cmake -S . -B build-windows -G Ninja -DCMAKE_MAKE_PROGRAM=ninja -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DBUILD_REMOTE_CONTROL=1
        cmake --build build-windows --config Release --parallel 10

        mkdir soh-windows
        mv ./x64/Release/soh.exe ./soh-windows/soh.exe
        mkdir soh-windows/debug
        mkdir soh-windows/mods
        New-Item soh-windows/mods/custom_otr_files_go_here.txt -type file
        mv ./x64/Release/soh.pdb ./soh-windows/debug/soh.pdb
        mv ./README.md ./soh-windows/readme.txt
        mv ./build-windows/gamecontrollerdb.txt ./soh-windows/gamecontrollerdb.txt
        mv ./x64/Release/assets ./soh-windows
    - name: Download soh.otr
      uses: actions/download-artifact@v4
      with:
        name: soh.otr
        path: soh-windows
    - name: Upload build
      uses: actions/upload-artifact@v4
      with:
        name: soh-windows
        path: soh-windows
