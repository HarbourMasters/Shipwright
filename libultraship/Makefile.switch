#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITPRO)/libnx/switch_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
# ROMFS is the directory containing data to be added to RomFS, relative to the Makefile (Optional)
#
# NO_ICON: if set to anything, do not use icon.
# NO_NACP: if set to anything, no .nacp file is generated.
# APP_TITLE is the name of the app stored in the .nacp file (Optional)
# APP_AUTHOR is the author of the app stored in the .nacp file (Optional)
# APP_VERSION is the version of the app stored in the .nacp file (Optional)
# APP_TITLEID is the titleID of the app stored in the .nacp file (Optional)
# ICON is the filename of the icon (.jpg), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.jpg
#     - icon.jpg
#     - <libnx folder>/default_icon.jpg
#
# CONFIG_JSON is the filename of the NPDM config file (.json), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.json
#     - config.json
#   If a JSON file is provided or autodetected, an ExeFS PFS0 (.nsp) is built instead
#   of a homebrew executable (.nro). This is intended to be used for sysmodules.
#   NACP building is skipped as well.
#---------------------------------------------------------------------------------
TARGET		:=	ultraship
BUILD		:=	build
SOURCES		:=
DATA		:=
INCLUDES	:=	\
		../ZAPDTR/ZAPDUtils \
		../StormLib/src \
		libultraship/Lib/Fast3D/U64 \
		libultraship/Lib/spdlog \
		libultraship/Lib/spdlog/include \
		libultraship

#-------------------------------------------------------------------------------
# source files
#-------------------------------------------------------------------------------
SOURCEFILES_C :=    \
		libultraship/mixer.c \
		libultraship/Lib/stb/stb_impl.c \

SOURCEFILES_CPP :=	\
		libultraship/Blob.cpp \
		libultraship/Cvar.cpp \
		libultraship/Environment.cpp \
		libultraship/GameSettings.cpp \
		libultraship/luslog.cpp \
		libultraship/ModManager.cpp \
		libultraship/SDLAudioPlayer.cpp \
		libultraship/Factories/AnimationFactory.cpp \
		libultraship/Factories/ArrayFactory.cpp \
		libultraship/Factories/BlobFactory.cpp \
		libultraship/Factories/CutsceneFactory.cpp \
		libultraship/Factories/MtxFactory.cpp \
		libultraship/Factories/PathFactory.cpp \
		libultraship/Factories/AudioFactory.cpp \
		libultraship/Animation.cpp \
		libultraship/Factories/TextFactory.cpp \
		libultraship/Factories/TextureFactory.cpp \
		libultraship/Factories/VtxFactory.cpp \
		libultraship/Array.cpp \
		libultraship/Audio.cpp \
		libultraship/ConfigFile.cpp \
		libultraship/Controller.cpp \
		libultraship/Hooks.cpp \
		libultraship/Factories/CollisionHeaderFactory.cpp \
		libultraship/Factories/DisplayListFactory.cpp \
		libultraship/Factories/MaterialFactory.cpp \
		libultraship/Factories/PlayerAnimationFactory.cpp \
		libultraship/Factories/ResourceLoader.cpp \
		libultraship/Factories/SceneFactory.cpp \
		libultraship/Factories/SkeletonFactory.cpp \
		libultraship/Factories/SkeletonLimbFactory.cpp \
		libultraship/Lib/Fast3D/gfx_cc.cpp \
		libultraship/Lib/Fast3D/gfx_pc.cpp \
		libultraship/Lib/Fast3D/gfx_sdl2.cpp \
		libultraship/Lib/Fast3D/gfx_opengl.cpp \
		libultraship/Lib/StrHash64.cpp \
		libultraship/Lib/tinyxml2/tinyxml2.cpp \
		libultraship/Archive.cpp \
		libultraship/CollisionHeader.cpp \
		libultraship/ControllerAttachment.cpp \
		libultraship/Cutscene.cpp \
		libultraship/DisplayList.cpp \
		libultraship/GlobalCtx2.cpp \
		libultraship/File.cpp \
		libultraship/Material.cpp \
		libultraship/Matrix.cpp \
		libultraship/MemoryPack.cpp \
		libultraship/Model.cpp \
		libultraship/Path.cpp \
		libultraship/PlayerAnimation.cpp \
		libultraship/Resource.cpp \
		libultraship/ResourceMgr.cpp \
		libultraship/RumblePack.cpp \
		libultraship/Scene.cpp \
		libultraship/Skeleton.cpp \
		libultraship/SkeletonLimb.cpp \
		libultraship/Text.cpp \
		libultraship/Texture.cpp \
		libultraship/TextureMod.cpp \
		libultraship/Utils.cpp \
		libultraship/Vertex.cpp \
		libultraship/Window.cpp \
		libultraship/WindowShim.cpp \
		libultraship/stox.cpp \
		libultraship/ \
		libultraship/GameOverlay.cpp \
		libultraship/SwitchImpl.cpp \
		libultraship/Console.cpp \
		libultraship/KeyboardController.cpp \
		libultraship/SDLController.cpp \
		libultraship/ImGuiImpl.cpp \
		libultraship/Lib/ImGui/backends/imgui_impl_opengl3.cpp \
		libultraship/Lib/ImGui/backends/imgui_impl_sdl.cpp \
		libultraship/Lib/ImGui/imgui.cpp \
		libultraship/Lib/ImGui/imgui_demo.cpp \
		libultraship/Lib/ImGui/imgui_draw.cpp \
		libultraship/Lib/ImGui/imgui_tables.cpp \
		libultraship/Lib/ImGui/imgui_widgets.cpp

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
ARCH	:=	-march=armv8-a+crc+crypto -mtune=cortex-a57 -mtp=soft -fPIE

CFLAGS	:=	-g -Wall -ffunction-sections \
			$(ARCH) $(DEFINES) \
            -DSPDLOG_NO_THREAD_ID -DSPDLOG_NO_TLS \
		    -DSTBI_NO_THREAD_LOCALS -DDEBUG

CFLAGS	+=	$(INCLUDE) -D__SWITCH__ -DENABLE_OPENGL -DSDL_BYTEORDER

CXXFLAGS	:= $(CFLAGS) -std=gnu++20
CFLAGS  +=  -std=gnu11

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS	:= -lnx

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(PORTLIBS) $(LIBNX)


#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/lib/lib$(TARGET).a
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir)) \
			$(foreach sf,$(SOURCEFILES_C),$(CURDIR)/$(dir $(sf))) \
			$(foreach sf,$(SOURCEFILES_CPP),$(CURDIR)/$(dir $(sf)))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c))) \
			$(foreach f,$(SOURCEFILES_C),$(notdir $(f)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp))) \
			$(foreach f,$(SOURCEFILES_CPP),$(notdir $(f)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))
export OFILES_SRC	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)
export OFILES 	:=	$(OFILES_BIN) $(OFILES_SRC)
export HFILES_BIN	:=	$(addsuffix .h,$(subst .,_,$(BINFILES)))

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

.PHONY: $(BUILD) clean all

#---------------------------------------------------------------------------------
all: $(BUILD)

lib:
	@[ -d $@ ] || mkdir -p $@

$(BUILD) : lib
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.switch

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -rf build lib

#---------------------------------------------------------------------------------
else
.PHONY:	all

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------

$(OUTPUT)	:	$(OFILES)

$(OFILES_SRC)	: $(HFILES)
$(OFILES_SRC)	: $(HFILES_BIN)

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	%_bin.h :	%.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

-include $(DEPENDS)

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------