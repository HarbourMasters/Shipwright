#include "static_data.h"

#define TWO_ACTOR_PARAMS(a, b) (abs(a) << 16) | abs(b)

std::array<Rando::Location, RC_MAX> Rando::StaticData::locationTable;

std::vector<RandomizerCheck> KF_ShopLocations = {
    RC_KF_SHOP_ITEM_1, RC_KF_SHOP_ITEM_2, RC_KF_SHOP_ITEM_3, RC_KF_SHOP_ITEM_4,
    RC_KF_SHOP_ITEM_5, RC_KF_SHOP_ITEM_6, RC_KF_SHOP_ITEM_7, RC_KF_SHOP_ITEM_8,
};
std::vector<RandomizerCheck> Kak_PotionShopLocations = {
    RC_KAK_POTION_SHOP_ITEM_1, RC_KAK_POTION_SHOP_ITEM_2, RC_KAK_POTION_SHOP_ITEM_3, RC_KAK_POTION_SHOP_ITEM_4,
    RC_KAK_POTION_SHOP_ITEM_5, RC_KAK_POTION_SHOP_ITEM_6, RC_KAK_POTION_SHOP_ITEM_7, RC_KAK_POTION_SHOP_ITEM_8,
};
std::vector<RandomizerCheck> MK_BombchuShopLocations = {
    RC_MARKET_BOMBCHU_SHOP_ITEM_1, RC_MARKET_BOMBCHU_SHOP_ITEM_2, RC_MARKET_BOMBCHU_SHOP_ITEM_3,
    RC_MARKET_BOMBCHU_SHOP_ITEM_4, RC_MARKET_BOMBCHU_SHOP_ITEM_5, RC_MARKET_BOMBCHU_SHOP_ITEM_6,
    RC_MARKET_BOMBCHU_SHOP_ITEM_7, RC_MARKET_BOMBCHU_SHOP_ITEM_8,
};
std::vector<RandomizerCheck> MK_PotionShopLocations = {
    RC_MARKET_POTION_SHOP_ITEM_1, RC_MARKET_POTION_SHOP_ITEM_2, RC_MARKET_POTION_SHOP_ITEM_3,
    RC_MARKET_POTION_SHOP_ITEM_4, RC_MARKET_POTION_SHOP_ITEM_5, RC_MARKET_POTION_SHOP_ITEM_6,
    RC_MARKET_POTION_SHOP_ITEM_7, RC_MARKET_POTION_SHOP_ITEM_8,
};
std::vector<RandomizerCheck> MK_BazaarLocations = {
    RC_MARKET_BAZAAR_ITEM_1, RC_MARKET_BAZAAR_ITEM_2, RC_MARKET_BAZAAR_ITEM_3, RC_MARKET_BAZAAR_ITEM_4,
    RC_MARKET_BAZAAR_ITEM_5, RC_MARKET_BAZAAR_ITEM_6, RC_MARKET_BAZAAR_ITEM_7, RC_MARKET_BAZAAR_ITEM_8,
};
std::vector<RandomizerCheck> Kak_BazaarLocations = {
    RC_KAK_BAZAAR_ITEM_1, RC_KAK_BAZAAR_ITEM_2, RC_KAK_BAZAAR_ITEM_3, RC_KAK_BAZAAR_ITEM_4,
    RC_KAK_BAZAAR_ITEM_5, RC_KAK_BAZAAR_ITEM_6, RC_KAK_BAZAAR_ITEM_7, RC_KAK_BAZAAR_ITEM_8,
};
std::vector<RandomizerCheck> ZD_ShopLocations = {
    RC_ZD_SHOP_ITEM_1, RC_ZD_SHOP_ITEM_2, RC_ZD_SHOP_ITEM_3, RC_ZD_SHOP_ITEM_4,
    RC_ZD_SHOP_ITEM_5, RC_ZD_SHOP_ITEM_6, RC_ZD_SHOP_ITEM_7, RC_ZD_SHOP_ITEM_8,
};
std::vector<RandomizerCheck> GC_ShopLocations = {
    RC_GC_SHOP_ITEM_1, RC_GC_SHOP_ITEM_2, RC_GC_SHOP_ITEM_3, RC_GC_SHOP_ITEM_4,
    RC_GC_SHOP_ITEM_5, RC_GC_SHOP_ITEM_6, RC_GC_SHOP_ITEM_7, RC_GC_SHOP_ITEM_8,
};
// List of shop location lists, used for shop shuffle
std::vector<std::vector<RandomizerCheck>> Rando::StaticData::shopLocationLists = {
    KF_ShopLocations,   Kak_PotionShopLocations, MK_BombchuShopLocations, MK_PotionShopLocations,
    MK_BazaarLocations, Kak_BazaarLocations,     ZD_ShopLocations,        GC_ShopLocations,
};

std::vector<RandomizerCheck> Rando::StaticData::scrubLocations = {
    RC_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_RIGHT,
    RC_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_LEFT,
    RC_LW_DEKU_SCRUB_NEAR_BRIDGE,
    RC_LW_DEKU_SCRUB_GROTTO_REAR,
    RC_LW_DEKU_SCRUB_GROTTO_FRONT,
    RC_SFM_DEKU_SCRUB_GROTTO_REAR,
    RC_SFM_DEKU_SCRUB_GROTTO_FRONT,
    RC_HF_DEKU_SCRUB_GROTTO,
    RC_LH_DEKU_SCRUB_GROTTO_LEFT,
    RC_LH_DEKU_SCRUB_GROTTO_RIGHT,
    RC_LH_DEKU_SCRUB_GROTTO_CENTER,
    RC_GV_DEKU_SCRUB_GROTTO_REAR,
    RC_GV_DEKU_SCRUB_GROTTO_FRONT,
    RC_COLOSSUS_DEKU_SCRUB_GROTTO_REAR,
    RC_COLOSSUS_DEKU_SCRUB_GROTTO_FRONT,
    RC_GC_DEKU_SCRUB_GROTTO_LEFT,
    RC_GC_DEKU_SCRUB_GROTTO_RIGHT,
    RC_GC_DEKU_SCRUB_GROTTO_CENTER,
    RC_DMC_DEKU_SCRUB,
    RC_DMC_DEKU_SCRUB_GROTTO_LEFT,
    RC_DMC_DEKU_SCRUB_GROTTO_RIGHT,
    RC_DMC_DEKU_SCRUB_GROTTO_CENTER,
    RC_ZR_DEKU_SCRUB_GROTTO_REAR,
    RC_ZR_DEKU_SCRUB_GROTTO_FRONT,
    RC_LLR_DEKU_SCRUB_GROTTO_LEFT,
    RC_LLR_DEKU_SCRUB_GROTTO_RIGHT,
    RC_LLR_DEKU_SCRUB_GROTTO_CENTER,
    RC_DEKU_TREE_MQ_DEKU_SCRUB,
    RC_DODONGOS_CAVERN_DEKU_SCRUB_NEAR_BOMB_BAG_LEFT,
    RC_DODONGOS_CAVERN_DEKU_SCRUB_SIDE_ROOM_NEAR_DODONGOS,
    RC_DODONGOS_CAVERN_DEKU_SCRUB_NEAR_BOMB_BAG_RIGHT,
    RC_DODONGOS_CAVERN_DEKU_SCRUB_LOBBY,
    RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_LOBBY_REAR,
    RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_LOBBY_FRONT,
    RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_STAIRCASE,
    RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_SIDE_ROOM_NEAR_LOWER_LIZALFOS,
    RC_JABU_JABUS_BELLY_DEKU_SCRUB,
    RC_GANONS_CASTLE_DEKU_SCRUB_CENTER_LEFT,
    RC_GANONS_CASTLE_DEKU_SCRUB_CENTER_RIGHT,
    RC_GANONS_CASTLE_DEKU_SCRUB_RIGHT,
    RC_GANONS_CASTLE_DEKU_SCRUB_LEFT,
    RC_GANONS_CASTLE_MQ_DEKU_SCRUB_RIGHT,
    RC_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER_LEFT,
    RC_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER,
    RC_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER_RIGHT,
    RC_GANONS_CASTLE_MQ_DEKU_SCRUB_LEFT,
};

std::vector<RandomizerCheck> Rando::StaticData::dungeonRewardLocations = {
    // Bosses
    RC_QUEEN_GOHMA, RC_KING_DODONGO, RC_BARINADE,    RC_PHANTOM_GANON, RC_VOLVAGIA,
    RC_MORPHA,      RC_TWINROVA,     RC_BONGO_BONGO, RC_LINKS_POCKET,
};

std::vector<RandomizerCheck> Rando::StaticData::overworldLocations = {
    // Kokiri Forest
    RC_KF_KOKIRI_SWORD_CHEST,
    RC_KF_MIDOS_TOP_LEFT_CHEST,
    RC_KF_MIDOS_TOP_RIGHT_CHEST,
    RC_KF_MIDOS_BOTTOM_LEFT_CHEST,
    RC_KF_MIDOS_BOTTOM_RIGHT_CHEST,
    RC_KF_STORMS_GROTTO_CHEST,
    RC_KF_LINKS_HOUSE_COW,

    // Shop
    RC_KF_SHOP_ITEM_1,
    RC_KF_SHOP_ITEM_2,
    RC_KF_SHOP_ITEM_3,
    RC_KF_SHOP_ITEM_4,
    RC_KF_SHOP_ITEM_5,
    RC_KF_SHOP_ITEM_6,
    RC_KF_SHOP_ITEM_7,
    RC_KF_SHOP_ITEM_8,

    // Lost Woods
    RC_LW_GIFT_FROM_SARIA,
    RC_LW_SKULL_KID,
    RC_LW_TRADE_COJIRO,
    RC_LW_TRADE_ODD_POTION,
    RC_LW_OCARINA_MEMORY_GAME,
    RC_LW_TARGET_IN_WOODS,
    RC_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_RIGHT,
    RC_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_LEFT,
    RC_LW_DEKU_SCRUB_NEAR_BRIDGE,
    RC_LW_NEAR_SHORTCUTS_GROTTO_CHEST,
    RC_LW_DEKU_SCRUB_GROTTO_REAR,
    RC_LW_DEKU_SCRUB_GROTTO_FRONT,
    RC_DEKU_THEATER_SKULL_MASK,
    RC_DEKU_THEATER_MASK_OF_TRUTH,

    // Sacred Forest Meadow
    RC_SONG_FROM_SARIA,
    RC_SHEIK_IN_FOREST,
    RC_SFM_WOLFOS_GROTTO_CHEST,
    RC_SFM_DEKU_SCRUB_GROTTO_REAR,
    RC_SFM_DEKU_SCRUB_GROTTO_FRONT,

    // Hyrule Field
    RC_HF_SOUTHEAST_GROTTO_CHEST,
    RC_HF_OPEN_GROTTO_CHEST,
    RC_HF_NEAR_MARKET_GROTTO_CHEST,
    RC_HF_OCARINA_OF_TIME_ITEM,
    RC_SONG_FROM_OCARINA_OF_TIME,
    RC_HF_TEKTITE_GROTTO_FREESTANDING_POH,
    RC_HF_DEKU_SCRUB_GROTTO,
    RC_HF_COW_GROTTO_COW,

    // Lake Hylia
    RC_LH_CHILD_FISHING,
    RC_LH_ADULT_FISHING,
    RC_LH_LAB_DIVE,
    RC_LH_TRADE_FROG,
    RC_LH_UNDERWATER_ITEM,
    RC_LH_SUN,
    RC_LH_FREESTANDING_POH,
    RC_LH_DEKU_SCRUB_GROTTO_LEFT,
    RC_LH_DEKU_SCRUB_GROTTO_RIGHT,
    RC_LH_DEKU_SCRUB_GROTTO_CENTER,

    // Gerudo Valley
    RC_GV_CHEST,
    RC_GV_TRADE_SAW,
    RC_GV_WATERFALL_FREESTANDING_POH,
    RC_GV_CRATE_FREESTANDING_POH,
    RC_GV_DEKU_SCRUB_GROTTO_REAR,
    RC_GV_DEKU_SCRUB_GROTTO_FRONT,
    RC_GV_COW,

    // Gerudo Fortress
    RC_GF_CHEST,
    RC_GF_HBA_1000_POINTS,
    RC_GF_HBA_1500_POINTS,
    RC_GF_NORTH_F1_CARPENTER,
    RC_GF_NORTH_F2_CARPENTER,
    RC_GF_SOUTH_F1_CARPENTER,
    RC_GF_SOUTH_F2_CARPENTER,
    RC_GF_GERUDO_MEMBERSHIP_CARD,

    // Haunted Wasteland
    RC_WASTELAND_CHEST,
    RC_WASTELAND_BOMBCHU_SALESMAN,

    // Desert Colossus
    RC_SHEIK_AT_COLOSSUS,
    RC_COLOSSUS_FREESTANDING_POH,
    RC_COLOSSUS_GREAT_FAIRY_REWARD,
    RC_COLOSSUS_DEKU_SCRUB_GROTTO_REAR,
    RC_COLOSSUS_DEKU_SCRUB_GROTTO_FRONT,

    // Market
    RC_MARKET_TREASURE_CHEST_GAME_REWARD,
    RC_MARKET_BOMBCHU_BOWLING_FIRST_PRIZE,
    RC_MARKET_BOMBCHU_BOWLING_SECOND_PRIZE,
    RC_MARKET_BOMBCHU_BOWLING_BOMBCHUS,
    RC_MARKET_LOST_DOG,
    RC_MARKET_SHOOTING_GALLERY_REWARD,
    RC_MARKET_10_BIG_POES,
    RC_MARKET_TREASURE_CHEST_GAME_ITEM_1,
    RC_MARKET_TREASURE_CHEST_GAME_ITEM_2,
    RC_MARKET_TREASURE_CHEST_GAME_ITEM_3,
    RC_MARKET_TREASURE_CHEST_GAME_ITEM_4,
    RC_MARKET_TREASURE_CHEST_GAME_ITEM_5,

    // Market Shops
    RC_MARKET_BOMBCHU_SHOP_ITEM_1,
    RC_MARKET_BOMBCHU_SHOP_ITEM_2,
    RC_MARKET_BOMBCHU_SHOP_ITEM_3,
    RC_MARKET_BOMBCHU_SHOP_ITEM_4,
    RC_MARKET_BOMBCHU_SHOP_ITEM_5,
    RC_MARKET_BOMBCHU_SHOP_ITEM_6,
    RC_MARKET_BOMBCHU_SHOP_ITEM_7,
    RC_MARKET_BOMBCHU_SHOP_ITEM_8,
    RC_MARKET_POTION_SHOP_ITEM_1,
    RC_MARKET_POTION_SHOP_ITEM_2,
    RC_MARKET_POTION_SHOP_ITEM_3,
    RC_MARKET_POTION_SHOP_ITEM_4,
    RC_MARKET_POTION_SHOP_ITEM_5,
    RC_MARKET_POTION_SHOP_ITEM_6,
    RC_MARKET_POTION_SHOP_ITEM_7,
    RC_MARKET_POTION_SHOP_ITEM_8,
    RC_MARKET_BAZAAR_ITEM_1,
    RC_MARKET_BAZAAR_ITEM_2,
    RC_MARKET_BAZAAR_ITEM_3,
    RC_MARKET_BAZAAR_ITEM_4,
    RC_MARKET_BAZAAR_ITEM_5,
    RC_MARKET_BAZAAR_ITEM_6,
    RC_MARKET_BAZAAR_ITEM_7,
    RC_MARKET_BAZAAR_ITEM_8,

    // Hyrule Castle
    RC_HC_MALON_EGG,
    RC_HC_ZELDAS_LETTER,
    RC_SONG_FROM_IMPA,
    RC_HC_GREAT_FAIRY_REWARD,
    RC_OGC_GREAT_FAIRY_REWARD,

    // Temple of Time
    RC_TOT_MASTER_SWORD,
    RC_SHEIK_AT_TEMPLE,
    RC_TOT_LIGHT_ARROWS_CUTSCENE,

    // Kakariko
    RC_SHEIK_IN_KAKARIKO,
    RC_KAK_REDEAD_GROTTO_CHEST,
    RC_KAK_OPEN_GROTTO_CHEST,
    RC_KAK_10_GOLD_SKULLTULA_REWARD,
    RC_KAK_20_GOLD_SKULLTULA_REWARD,
    RC_KAK_30_GOLD_SKULLTULA_REWARD,
    RC_KAK_40_GOLD_SKULLTULA_REWARD,
    RC_KAK_50_GOLD_SKULLTULA_REWARD,
    RC_KAK_100_GOLD_SKULLTULA_REWARD,
    RC_KAK_MAN_ON_ROOF,
    RC_KAK_SHOOTING_GALLERY_REWARD,
    RC_KAK_TRADE_ODD_MUSHROOM,
    RC_KAK_GRANNYS_SHOP,
    RC_KAK_ANJU_AS_CHILD,
    RC_KAK_ANJU_AS_ADULT,
    RC_KAK_TRADE_POCKET_CUCCO,
    RC_KAK_IMPAS_HOUSE_FREESTANDING_POH,
    RC_KAK_WINDMILL_FREESTANDING_POH,
    RC_SONG_FROM_WINDMILL,
    RC_KAK_IMPAS_HOUSE_COW,

    // Kakariko Shops
    RC_KAK_POTION_SHOP_ITEM_1,
    RC_KAK_POTION_SHOP_ITEM_2,
    RC_KAK_POTION_SHOP_ITEM_3,
    RC_KAK_POTION_SHOP_ITEM_4,
    RC_KAK_POTION_SHOP_ITEM_5,
    RC_KAK_POTION_SHOP_ITEM_6,
    RC_KAK_POTION_SHOP_ITEM_7,
    RC_KAK_POTION_SHOP_ITEM_8,
    RC_KAK_BAZAAR_ITEM_1,
    RC_KAK_BAZAAR_ITEM_2,
    RC_KAK_BAZAAR_ITEM_3,
    RC_KAK_BAZAAR_ITEM_4,
    RC_KAK_BAZAAR_ITEM_5,
    RC_KAK_BAZAAR_ITEM_6,
    RC_KAK_BAZAAR_ITEM_7,
    RC_KAK_BAZAAR_ITEM_8,

    // Graveyard
    RC_GRAVEYARD_HOOKSHOT_CHEST,
    RC_GRAVEYARD_SHIELD_GRAVE_CHEST,
    RC_GRAVEYARD_HEART_PIECE_GRAVE_CHEST,
    RC_GRAVEYARD_ROYAL_FAMILYS_TOMB_CHEST,
    RC_SONG_FROM_ROYAL_FAMILYS_TOMB,
    RC_GRAVEYARD_FREESTANDING_POH,
    RC_GRAVEYARD_DAMPE_RACE_FREESTANDING_POH,
    RC_GRAVEYARD_DAMPE_GRAVEDIGGING_TOUR,

    // Death Mountain Trail
    RC_DMT_CHEST,
    RC_DMT_STORMS_GROTTO_CHEST,
    RC_DMT_TRADE_BROKEN_SWORD,
    RC_DMT_TRADE_EYEDROPS,
    RC_DMT_TRADE_CLAIM_CHECK,
    RC_DMT_GREAT_FAIRY_REWARD,
    RC_DMT_FREESTANDING_POH,
    RC_DMT_COW_GROTTO_COW,

    // Goron City
    RC_GC_MAZE_LEFT_CHEST,
    RC_GC_MAZE_CENTER_CHEST,
    RC_GC_MAZE_RIGHT_CHEST,
    RC_GC_ROLLING_GORON_AS_CHILD,
    RC_GC_ROLLING_GORON_AS_ADULT,
    RC_GC_DARUNIAS_JOY,
    RC_GC_POT_FREESTANDING_POH,
    RC_GC_DEKU_SCRUB_GROTTO_LEFT,
    RC_GC_DEKU_SCRUB_GROTTO_RIGHT,
    RC_GC_DEKU_SCRUB_GROTTO_CENTER,
    RC_GC_MEDIGORON,

    // Goron City Shop
    RC_GC_SHOP_ITEM_1,
    RC_GC_SHOP_ITEM_2,
    RC_GC_SHOP_ITEM_3,
    RC_GC_SHOP_ITEM_4,
    RC_GC_SHOP_ITEM_5,
    RC_GC_SHOP_ITEM_6,
    RC_GC_SHOP_ITEM_7,
    RC_GC_SHOP_ITEM_8,

    // Death Mountain
    RC_DMC_UPPER_GROTTO_CHEST,
    RC_DMC_WALL_FREESTANDING_POH,
    RC_DMC_VOLCANO_FREESTANDING_POH,
    RC_SHEIK_IN_CRATER,
    RC_DMC_DEKU_SCRUB,
    RC_DMC_GREAT_FAIRY_REWARD,
    RC_DMC_DEKU_SCRUB_GROTTO_LEFT,
    RC_DMC_DEKU_SCRUB_GROTTO_RIGHT,
    RC_DMC_DEKU_SCRUB_GROTTO_CENTER,

    // Zoras River
    RC_ZR_OPEN_GROTTO_CHEST,
    RC_ZR_MAGIC_BEAN_SALESMAN,
    RC_ZR_FROGS_ZELDAS_LULLABY,
    RC_ZR_FROGS_EPONAS_SONG,
    RC_ZR_FROGS_SARIAS_SONG,
    RC_ZR_FROGS_SUNS_SONG,
    RC_ZR_FROGS_SONG_OF_TIME,
    RC_ZR_FROGS_IN_THE_RAIN,
    RC_ZR_FROGS_OCARINA_GAME,
    RC_ZR_NEAR_OPEN_GROTTO_FREESTANDING_POH,
    RC_ZR_NEAR_DOMAIN_FREESTANDING_POH,
    RC_ZR_DEKU_SCRUB_GROTTO_REAR,
    RC_ZR_DEKU_SCRUB_GROTTO_FRONT,

    // Zoras Domain
    RC_ZD_CHEST,
    RC_ZD_DIVING_MINIGAME,
    RC_ZD_KING_ZORA_THAWED,
    RC_ZD_TRADE_PRESCRIPTION,

    // Zora's Domain Shop
    RC_ZD_SHOP_ITEM_1,
    RC_ZD_SHOP_ITEM_2,
    RC_ZD_SHOP_ITEM_3,
    RC_ZD_SHOP_ITEM_4,
    RC_ZD_SHOP_ITEM_5,
    RC_ZD_SHOP_ITEM_6,
    RC_ZD_SHOP_ITEM_7,
    RC_ZD_SHOP_ITEM_8,

    // Zoras Fountain
    RC_ZF_ICEBERC_FREESTANDING_POH,
    RC_ZF_BOTTOM_FREESTANDING_POH,
    RC_ZF_GREAT_FAIRY_REWARD,

    // Lon Lon Ranch
    RC_SONG_FROM_MALON,
    RC_LLR_TALONS_CHICKENS,
    RC_LLR_FREESTANDING_POH,
    RC_LLR_DEKU_SCRUB_GROTTO_LEFT,
    RC_LLR_DEKU_SCRUB_GROTTO_RIGHT,
    RC_LLR_DEKU_SCRUB_GROTTO_CENTER,
    RC_LLR_STABLES_LEFT_COW,
    RC_LLR_STABLES_RIGHT_COW,
    RC_LLR_TOWER_LEFT_COW,
    RC_LLR_TOWER_RIGHT_COW,

    /*-------------------------------
       --- GOLD SKULLTULA TOKENS ---
      -------------------------------*/

    // Overworld
    RC_KF_GS_BEAN_PATCH,
    RC_KF_GS_KNOW_IT_ALL_HOUSE,
    RC_KF_GS_HOUSE_OF_TWINS,

    RC_LW_GS_BEAN_PATCH_NEAR_BRIDGE,
    RC_LW_GS_BEAN_PATCH_NEAR_THEATER,
    RC_LW_GS_ABOVE_THEATER,
    RC_SFM_GS,

    RC_HF_GS_COW_GROTTO,
    RC_HF_GS_NEAR_KAK_GROTTO,

    RC_LH_GS_BEAN_PATCH,
    RC_LH_GS_SMALL_ISLAND,
    RC_LH_GS_LAB_WALL,
    RC_LH_GS_LAB_CRATE,
    RC_LH_GS_TREE,

    RC_GV_GS_BEAN_PATCH,
    RC_GV_GS_SMALL_BRIDGE,
    RC_GV_GS_PILLAR,
    RC_GV_GS_BEHIND_TENT,

    RC_GF_GS_ARCHERY_RANGE,
    RC_GF_GS_TOP_FLOOR,

    RC_WASTELAND_GS,
    RC_COLOSSUS_GS_BEAN_PATCH,
    RC_COLOSSUS_GS_HILL,
    RC_COLOSSUS_GS_TREE,

    RC_OGC_GS,
    RC_HC_GS_STORMS_GROTTO,
    RC_HC_GS_TREE,
    RC_MARKET_GS_GUARD_HOUSE,

    RC_KAK_GS_HOUSE_UNDER_CONSTRUCTION,
    RC_KAK_GS_SKULLTULA_HOUSE,
    RC_KAK_GS_GUARDS_HOUSE,
    RC_KAK_GS_TREE,
    RC_KAK_GS_WATCHTOWER,
    RC_KAK_GS_ABOVE_IMPAS_HOUSE,

    RC_DMC_GS_BEAN_PATCH,
    RC_DMC_GS_CRATE,

    RC_DMT_GS_BEAN_PATCH,
    RC_DMT_GS_NEAR_KAK,
    RC_DMT_GS_ABOVE_DODONGOS_CAVERN,
    RC_DMT_GS_FALLING_ROCKS_PATH,

    RC_GC_GS_CENTER_PLATFORM,
    RC_GC_GS_BOULDER_MAZE,
    RC_GRAVEYARD_GS_WALL,
    RC_GRAVEYARD_GS_BEAN_PATCH,

    RC_ZR_GS_LADDER,
    RC_ZR_GS_TREE,
    RC_ZR_GS_ABOVE_BRIDGE,
    RC_ZR_GS_NEAR_RAISED_GROTTOS,

    RC_ZD_GS_FROZEN_WATERFALL,
    RC_ZF_GS_ABOVE_THE_LOG,
    RC_ZF_GS_HIDDEN_CAVE,
    RC_ZF_GS_TREE,

    RC_LLR_GS_BACK_WALL,
    RC_LLR_GS_RAIN_SHED,
    RC_LLR_GS_HOUSE_WINDOW,
    RC_LLR_GS_TREE,
};

std::vector<RandomizerCheck> Rando::StaticData::gossipStoneLocations = {
    RC_COLOSSUS_GOSSIP_STONE,
    RC_DMC_GOSSIP_STONE,
    RC_DMC_UPPER_GROTTO_GOSSIP_STONE,
    RC_DMT_GOSSIP_STONE,
    RC_DMT_STORMS_GROTTO_GOSSIP_STONE,
    RC_DODONGOS_CAVERN_GOSSIP_STONE,
    RC_FAIRY_GOSSIP_STONE,
    RC_GC_MAZE_GOSSIP_STONE,
    RC_GC_MEDIGORON_GOSSIP_STONE,
    RC_GV_GOSSIP_STONE,
    RC_GY_GOSSIP_STONE,
    RC_HC_MALON_GOSSIP_STONE,
    RC_HC_ROCK_WALL_GOSSIP_STONE,
    RC_HC_STORMS_GROTTO_GOSSIP_STONE,
    RC_HF_COW_GROTTO_GOSSIP_STONE,
    RC_HF_NEAR_MARKET_GOSSIP_STONE,
    RC_HF_OPEN_GROTTO_GOSSIP_STONE,
    RC_HF_SOUTHEAST_GOSSIP_STONE,
    RC_JABU_GOSSIP_STONE,
    RC_KF_DEKU_TREE_LEFT_GOSSIP_STONE,
    RC_KF_DEKU_TREE_RIGHT_GOSSIP_STONE,
    RC_KF_GOSSIP_STONE,
    RC_KF_STORMS_GOSSIP_STONE,
    RC_KAK_OPEN_GROTTO_GOSSIP_STONE,
    RC_LH_LAB_GOSSIP_STONE,
    RC_LH_SOUTHEAST_GOSSIP_STONE,
    RC_LH_SOUTHWEST_GOSSIP_STONE,
    RC_LW_GOSSIP_STONE,
    RC_LW_NEAR_SHORTCUTS_GOSSIP_STONE,
    RC_SFM_MAZE_LOWER_GOSSIP_STONE,
    RC_SFM_MAZE_UPPER_GOSSIP_STONE,
    RC_SFM_SARIA_GOSSIP_STONE,
    RC_TOT_LEFT_CENTER_GOSSIP_STONE,
    RC_TOT_LEFT_GOSSIP_STONE,
    RC_TOT_RIGHT_CENTER_GOSSIP_STONE,
    RC_TOT_RIGHT_GOSSIP_STONE,
    RC_ZD_GOSSIP_STONE,
    RC_ZR_NEAR_DOMAIN_GOSSIP_STONE,
    RC_ZR_NEAR_GROTTOS_GOSSIP_STONE,
    RC_ZR_OPEN_GROTTO_GOSSIP_STONE,
};

std::vector<RandomizerCheck> Rando::StaticData::otherHintLocations = {
    RC_GANONDORF_HINT,
    RC_SHEIK_HINT_GC,
    RC_SHEIK_HINT_MQ_GC,
    RC_DAMPE_HINT,
    RC_GREG_HINT,
    RC_SARIA_SONG_HINT,
    RC_ALTAR_HINT_CHILD,
    RC_ALTAR_HINT_ADULT
};

typedef enum {
    DUNGEON_DEKU_TREE = 0,
    DUNGEON_DODONGOS_CAVERN,
    DUNGEON_JABUJABUS_BELLY,
    DUNGEON_FOREST_TEMPLE,
    DUNGEON_FIRE_TEMPLE,
    DUNGEON_WATER_TEMPLE,
    DUNGEON_SPIRIT_TEMPLE,
    DUNGEON_SHADOW_TEMPLE,
    DUNGEON_BOTTOM_OF_THE_WELL,
    DUNGEON_ICE_CAVERN,
    DUNGEON_GANONS_CASTLE_SECOND_PART,
    DUNGEON_GERUDO_TRAINING_GROUNDS,
    DUNGEON_GERUDO_FORTRESS,
    DUNGEON_GANONS_CASTLE_FIRST_PART,
    DUNGEON_GANONS_CASTLE_FLOOR_BENEATH_BOSS_CHAMBER,
    DUNGEON_GANONS_CASTLE_CRUMBLING,
    DUNGEON_TREASURE_CHEST_SHOP,
    DUNGEON_DEKU_TREE_BOSS_ROOM,
    DUNGEON_DODONGOS_CAVERN_BOSS_ROOM,
    DUNGEON_JABUJABUS_BELLY_BOSS_ROOM,
} DungeonId;

using namespace Rando;

void Rando::StaticData::InitLocationTable() {
    // clang-format off
    locationTable[RC_UNKNOWN_CHECK] =                               Location::Base(RC_UNKNOWN_CHECK,                        RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_INVALID,         ACTOR_ID_MAX,         SCENE_ID_MAX,                     0x00,                         0x00, "Invalid Location",                  "Invalid Location",                     RHT_NONE,                                RG_NONE,                  {},                                                                           SpoilerCollectionCheck::None());
    //            Randomizer Check                                                 Randomizer Check                         Quest         Type                Area                    Actor ID              Scene ID                          Params                        Flags Short Name                            Spoiler Name                           Hint Text Key                            Vanilla Item              Categories                 Spoiler Collection Check                           Collection Check Group                             Vanilla Progression
    // Kokiri Forest
    locationTable[RC_KF_KOKIRI_SWORD_CHEST] =                      Location::Chest(RC_KF_KOKIRI_SWORD_CHEST,                RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KOKIRI_FOREST,   ACTOR_EN_BOX,         SCENE_KOKIRI_FOREST,              1248,                         0x00, "Kokiri Sword Chest",                "KF Kokiri Sword Chest",                RHT_KF_KOKIRI_SWORD_CHEST,               RG_KOKIRI_SWORD,          {},                                                                           SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST,  true);
    locationTable[RC_KF_MIDOS_TOP_LEFT_CHEST] =                    Location::Chest(RC_KF_MIDOS_TOP_LEFT_CHEST,              RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KOKIRI_FOREST,   ACTOR_EN_BOX,         SCENE_MIDOS_HOUSE,                22944,                        0x00, "Mido Top Left Chest",               "KF Mido Top Left Chest",               RHT_KF_MIDOS_TOP_LEFT_CHEST,             RG_BLUE_RUPEE,            {},                                                                           SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_MIDOS_TOP_RIGHT_CHEST] =                   Location::Chest(RC_KF_MIDOS_TOP_RIGHT_CHEST,             RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KOKIRI_FOREST,   ACTOR_EN_BOX,         SCENE_MIDOS_HOUSE,                22945,                        0x01, "Mido Top Right Chest",              "KF Mido Top Right Chest",              RHT_KF_MIDOS_TOP_RIGHT_CHEST,            RG_BLUE_RUPEE,            {},                                                                           SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_MIDOS_BOTTOM_LEFT_CHEST] =                 Location::Chest(RC_KF_MIDOS_BOTTOM_LEFT_CHEST,           RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KOKIRI_FOREST,   ACTOR_EN_BOX,         SCENE_MIDOS_HOUSE,                22914,                        0x02, "Mido Bottom Left Chest",            "KF Mido Bottom Left Chest",            RHT_KF_MIDOS_BOTTOM_LEFT_CHEST,          RG_GREG_RUPEE,            {},                                                                           SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_MIDOS_BOTTOM_RIGHT_CHEST] =                Location::Chest(RC_KF_MIDOS_BOTTOM_RIGHT_CHEST,          RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KOKIRI_FOREST,   ACTOR_EN_BOX,         SCENE_MIDOS_HOUSE,                22787,                        0x03, "Mido Bottom Right Chest",           "KF Mido Bottom Right Chest",           RHT_KF_MIDOS_BOTTOM_RIGHT_CHEST,         RG_RECOVERY_HEART,        {},                                                                           SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_STORMS_GROTTO_CHEST] =                     Location::Chest(RC_KF_STORMS_GROTTO_CHEST,               RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KOKIRI_FOREST,   ACTOR_EN_BOX,         SCENE_GROTTOS,                    22988,                        0x0C, "Storms Grotto Chest",               "KF Storms Grotto Chest",               RHT_KF_STORMS_GROTTO_CHEST,              RG_RED_RUPEE,             {},                                                                           SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    // Lost Woods
    locationTable[RC_LW_NEAR_SHORTCUTS_GROTTO_CHEST] =             Location::Chest(RC_LW_NEAR_SHORTCUTS_GROTTO_CHEST,       RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LOST_WOODS,      ACTOR_EN_BOX,         SCENE_GROTTOS,                    22964,                        0x14, "Near Shortcuts Grotto Chest",       "LW Near Shortcuts Grotto Chest",       RHT_KF_STORMS_GROTTO_CHEST,              RG_RED_RUPEE,             {},                                                                           SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_LW_SKULL_KID] =                                Location::Base(RC_LW_SKULL_KID,                         RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LOST_WOODS,      ACTOR_ID_MAX,         SCENE_LOST_WOODS,                 0x00,                         0x3E, "Skull Kid",                         "LW Skull Kid",                         RHT_LW_SKULL_KID,                        RG_PIECE_OF_HEART,        {},                        SpoilerCollectionCheck::ItemGetInf(30),            SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,     true);
    locationTable[RC_LW_TRADE_COJIRO] =                             Location::Base(RC_LW_TRADE_COJIRO,                      RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_LOST_WOODS,      ACTOR_ID_MAX,         SCENE_LOST_WOODS,                 0x00,                         0x1F, "Trade Cojiro",                      "LW Trade Cojiro",                      RHT_LW_TRADE_COJIRO,                     RG_ODD_MUSHROOM,          { Category::cAdultTrade }, SpoilerCollectionCheck::RandomizerInf(0x5B, 0x1F), SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,     true);
    locationTable[RC_LW_TRADE_ODD_POTION] =                         Location::Base(RC_LW_TRADE_ODD_POTION,                  RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_LOST_WOODS,      ACTOR_ID_MAX,         SCENE_LOST_WOODS,                 0x00,                         0x21, "Trade Odd Potion",                  "LW Trade Odd Potion",                  RHT_LW_TRADE_COJIRO,                     RG_POACHERS_SAW,          { Category::cAdultTrade }, SpoilerCollectionCheck::ItemGetInf(57),            SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,     true);
    locationTable[RC_LW_OCARINA_MEMORY_GAME] =                      Location::Base(RC_LW_OCARINA_MEMORY_GAME,               RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LOST_WOODS,      ACTOR_ID_MAX,         SCENE_LOST_WOODS,                 0x00,                         0x21, "Ocarina Memory Game",               "LW Ocarina Memory Game",               RHT_LW_OCARINA_MEMORY_GAME,              RG_PIECE_OF_HEART,        {},                        SpoilerCollectionCheck::ItemGetInf(31),            SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,     true);
    locationTable[RC_LW_TARGET_IN_WOODS] =                          Location::Base(RC_LW_TARGET_IN_WOODS,                   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LOST_WOODS,      ACTOR_ID_MAX,         SCENE_LOST_WOODS,                 0x00,                         0x60, "Target in Woods",                   "LW Target in Woods",                   RHT_LW_TARGET_IN_WOODS,                  RG_PROGRESSIVE_SLINGSHOT, {},                        SpoilerCollectionCheck::ItemGetInf(21),            SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,     true);
    locationTable[RC_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_RIGHT] =       Location::Base(RC_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_RIGHT,RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LOST_WOODS,      ACTOR_EN_DNS,         SCENE_LOST_WOODS,                 0x00,                         0x30, "Deku Scrub Near Deku Theater Right","LW Deku Scrub Near Deku Theater Right",RHT_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_RIGHT,RG_BUY_DEKU_NUT_5,       { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x5B, 0x01),         SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    locationTable[RC_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_LEFT] =        Location::Base(RC_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_LEFT, RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LOST_WOODS,      ACTOR_EN_DNS,         SCENE_LOST_WOODS,                 0x01,                         0x31, "Deku Scrub Near Deku Theater Left", "LW Deku Scrub Near Deku Theater Left", RHT_LW_DEKU_SCRUB_NEAR_DEKU_THEATER_LEFT,RG_BUY_DEKU_STICK_1,      { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x5B, 0x02),         SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    locationTable[RC_LW_DEKU_SCRUB_NEAR_BRIDGE] =                   Location::Base(RC_LW_DEKU_SCRUB_NEAR_BRIDGE,            RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LOST_WOODS,      ACTOR_EN_DNS,         SCENE_LOST_WOODS,                 0x09,                         0x77, "Deku Scrub Near Bridge",            "LW Deku Scrub Near Bridge",            RHT_LW_DEKU_SCRUB_NEAR_BRIDGE,           RG_PROGRESSIVE_STICK_UPGRADE,{ Category::cDekuScrub, Category::cDekuScrubUpgrades }, SpoilerCollectionCheck::Scrub(0x5B, 0x0A), SpoilerCollectionCheckGroup::GROUP_LOST_WOODS, true);
    locationTable[RC_LW_DEKU_SCRUB_GROTTO_REAR] =            Location::GrottoScrub(RC_LW_DEKU_SCRUB_GROTTO_REAR,            RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LOST_WOODS,      ACTOR_EN_DNS,         SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x03, 0xF5), 0x33, "Deku Scrub Grotto Rear",            "LW Deku Scrub Grotto Rear",            RHT_LW_DEKU_SCRUB_GROTTO_REAR,           RG_BUY_DEKU_SEEDS_30,     { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x1F, 0x04),         SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    locationTable[RC_LW_DEKU_SCRUB_GROTTO_FRONT] =           Location::GrottoScrub(RC_LW_DEKU_SCRUB_GROTTO_FRONT,           RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LOST_WOODS,      ACTOR_EN_DNS,         SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x0A, 0xF5), 0x79, "Deku Scrub Grotto Front",           "LW Deku Scrub Grotto Front",           RHT_LW_DEKU_SCRUB_GROTTO_FRONT,          RG_PROGRESSIVE_NUT_UPGRADE,{ Category::cDekuScrub, Category::cDekuScrubUpgrades }, SpoilerCollectionCheck::Scrub(0x1F, 0x0B), SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    locationTable[RC_DEKU_THEATER_SKULL_MASK] =                     Location::Base(RC_DEKU_THEATER_SKULL_MASK,              RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LOST_WOODS,      ACTOR_ID_MAX,         SCENE_GROTTOS,                    0x00,                         0x77, "Deku Theater Skull Mask",           "Deku Theater Skull Mask",              RHT_DEKU_THEATER_SKULL_MASK,             RG_PROGRESSIVE_STICK_UPGRADE,{},                     SpoilerCollectionCheck::Chest(0x3E, 0x1F),         SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,     true);
    locationTable[RC_DEKU_THEATER_MASK_OF_TRUTH] =                  Location::Base(RC_DEKU_THEATER_MASK_OF_TRUTH,           RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LOST_WOODS,      ACTOR_ID_MAX,         SCENE_GROTTOS,                    0x00,                         0x7A, "Deku Theater Mask of Truth",        "Deku Theater Mask of Truth",           RHT_DEKU_THEATER_MASK_OF_TRUTH,          RG_PROGRESSIVE_NUT_UPGRADE,{},                       SpoilerCollectionCheck::Chest(0x3E, 0x1E),         SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,     true);
    // Sacred Forest Meadow
    locationTable[RC_SFM_WOLFOS_GROTTO_CHEST] =                    Location::Chest(RC_SFM_WOLFOS_GROTTO_CHEST,              RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_SACRED_FOREST_MEADOW, ACTOR_EN_BOX,    SCENE_GROTTOS,                    31409,                        0x11, "Wolfos Grotto Chest",               "SFM Wolfos Grotto Chest",              RHT_SFM_WOLFOS_GROTTO_CHEST,             RG_PURPLE_RUPEE,          {},                                                                           SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    locationTable[RC_SFM_DEKU_SCRUB_GROTTO_REAR] =           Location::GrottoScrub(RC_SFM_DEKU_SCRUB_GROTTO_REAR,           RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_SACRED_FOREST_MEADOW, ACTOR_EN_DNS,    SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x07, 0xEE), 0x39, "Deku Scrub Grotto Rear",            "SFM Deku Scrub Grotto Rear",           RHT_SFM_DEKU_SCRUB_GROTTO_REAR,          RG_BUY_RED_POTION_30,     { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x18, 0x08),         SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    locationTable[RC_SFM_DEKU_SCRUB_GROTTO_FRONT] =          Location::GrottoScrub(RC_SFM_DEKU_SCRUB_GROTTO_FRONT,          RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_SACRED_FOREST_MEADOW, ACTOR_EN_DNS,    SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x08, 0xEE), 0x3A, "Deku Scrub Grotto Front",           "SFM Deku Scrub Grotto Front",          RHT_SFM_DEKU_SCRUB_GROTTO_FRONT,         RG_BUY_GREEN_POTION,      { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x18, 0x09),         SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    // Hyrule Field
    locationTable[RC_HF_SOUTHEAST_GROTTO_CHEST] =                  Location::Chest(RC_HF_SOUTHEAST_GROTTO_CHEST,            RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_HYRULE_FIELD,    ACTOR_EN_BOX,         SCENE_GROTTOS,                    22978,                        0x02, "Southeast Grotto Chest",            "HF Southeast Grotto Chest",            RHT_HF_SOUTHEAST_GROTTO_CHEST,           RG_RED_RUPEE,             {},                                                                           SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD);
    locationTable[RC_HF_OPEN_GROTTO_CHEST] =                       Location::Chest(RC_HF_OPEN_GROTTO_CHEST,                 RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_HYRULE_FIELD,    ACTOR_EN_BOX,         SCENE_GROTTOS,                    22947,                        0x03, "Open Grotto Chest",                 "HF Open Grotto Chest",                 RHT_HF_OPEN_GROTTO_CHEST,                RG_BLUE_RUPEE,            {},                                                                           SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD);
    locationTable[RC_HF_NEAR_MARKET_GROTTO_CHEST] =                Location::Chest(RC_HF_NEAR_MARKET_GROTTO_CHEST,          RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_HYRULE_FIELD,    ACTOR_EN_BOX,         SCENE_GROTTOS,                    22944,                        0x00, "Near Market Grotto Chest",          "HF Near Market Grotto Chest",          RHT_HF_NEAR_MARKET_GROTTO_CHEST,         RG_BLUE_RUPEE,            {},                                                                           SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD);
    locationTable[RC_HF_OCARINA_OF_TIME_ITEM] =                     Location::Base(RC_HF_OCARINA_OF_TIME_ITEM,              RCQUEST_BOTH, RCTYPE_OCARINA,     RCAREA_HYRULE_FIELD,    ACTOR_ID_MAX,         SCENE_HYRULE_FIELD,               0x00,                         0x0C, "Ocarina of Time Item",              "HF Ocarina of Time Item",              RHT_HF_OCARINA_OF_TIME_ITEM,             RG_PROGRESSIVE_OCARINA,   {},                        SpoilerCollectionCheck::EventChkInf(0x43),         SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD);
    locationTable[RC_HF_TEKTITE_GROTTO_FREESTANDING_POH] =   Location::Collectable(RC_HF_TEKTITE_GROTTO_FREESTANDING_POH,   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_HYRULE_FIELD,    ACTOR_EN_ITEM00,      SCENE_GROTTOS,                    262,                          0x01, "Tektite Grotto Freestanding PoH",   "HF Tektite Grotto Freestanding PoH",   RHT_HF_TEKTITE_GROTTO_FREESTANDING_POH,  RG_PIECE_OF_HEART,        {},                                                                           SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD,   true);
    locationTable[RC_HF_DEKU_SCRUB_GROTTO] =                 Location::GrottoScrub(RC_HF_DEKU_SCRUB_GROTTO,                 RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_HYRULE_FIELD,    ACTOR_EN_DNS,         SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x02, 0xE6), 0x3E, "Deku Scrub Grotto",                 "HF Deku Scrub Grotto",                 RHT_HF_DEKU_SCRUB_GROTTO,                RG_PIECE_OF_HEART,        { Category::cDekuScrub, Category::cDekuScrubUpgrades }, SpoilerCollectionCheck::Scrub(0x10, 0x03), SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD, true);
    // Lake Hylia
    locationTable[RC_LH_CHILD_FISHING] =                            Location::Base(RC_LH_CHILD_FISHING,                     RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LAKE_HYLIA,      ACTOR_ID_MAX,         SCENE_FISHING_POND,               0x00,                         0x3E, "Child Fishing",                     "LH Child Fishing",                     RHT_LH_CHILD_FISHING,                    RG_PIECE_OF_HEART,        {}, SpoilerCollectionCheck::RandomizerInf(SCENE_FISHING_POND, RAND_INF_CHILD_FISHING), SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA, true);
    locationTable[RC_LH_ADULT_FISHING] =                            Location::Base(RC_LH_ADULT_FISHING,                     RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LAKE_HYLIA,      ACTOR_ID_MAX,         SCENE_FISHING_POND,               0x00,                         0x38, "Adult Fishing",                     "LH Adult Fishing",                     RHT_LH_ADULT_FISHING,                    RG_PROGRESSIVE_SCALE,     {}, SpoilerCollectionCheck::RandomizerInf(SCENE_FISHING_POND, RAND_INF_ADULT_FISHING), SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA, true);
    locationTable[RC_LH_LAB_DIVE] =                                 Location::Base(RC_LH_LAB_DIVE,                          RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LAKE_HYLIA,      ACTOR_ID_MAX,         SCENE_LAKESIDE_LABORATORY,        0x00,                         0x3E, "Lab Dive",                          "LH Lab Dive",                          RHT_LH_LAB_DIVE,                         RG_PIECE_OF_HEART,        {},                        SpoilerCollectionCheck::ItemGetInf(24),            SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA,     true);
    locationTable[RC_LH_TRADE_FROG] =                               Location::Base(RC_LH_TRADE_FROG,                        RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_LAKE_HYLIA,      ACTOR_ID_MAX,         SCENE_LAKESIDE_LABORATORY,        0x00,                         0x25, "Lab Trade Eyeball Frog",            "LH Lab Trade Eyeball Frog",            RHT_LH_TRADE_FROG,                       RG_EYEDROPS,              { Category::cAdultTrade }, SpoilerCollectionCheck::RandomizerInf(0x38, 0x1F), SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA,     true);
    locationTable[RC_LH_UNDERWATER_ITEM] =                          Location::Base(RC_LH_UNDERWATER_ITEM,                   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LAKE_HYLIA,      ACTOR_ID_MAX,         SCENE_LAKE_HYLIA,                 0x00,                         0x15, "Underwater Item",                   "LH Underwater Item",                   RHT_LH_UNDERWATER_ITEM,                  RG_RUTOS_LETTER,          {},                        SpoilerCollectionCheck::EventChkInf(0x31),         SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA,     true);
    locationTable[RC_LH_SUN] =                                      Location::Base(RC_LH_SUN,                               RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LAKE_HYLIA,      ACTOR_ID_MAX,         SCENE_LAKE_HYLIA,                 0x00,                         0x58, "Sun",                               "LH Sun",                               RHT_LH_SUN,                              RG_FIRE_ARROWS,           {},                        SpoilerCollectionCheck::Chest(0x57, 0x1F),         SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA,     true);
    locationTable[RC_LH_FREESTANDING_POH] =                  Location::Collectable(RC_LH_FREESTANDING_POH,                  RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LAKE_HYLIA,      ACTOR_EN_ITEM00,      SCENE_LAKE_HYLIA,                 7686,                         0x1E, "Freestanding PoH",                  "LH Freestanding PoH",                  RHT_LH_FREESTANDING_POH,                 RG_PIECE_OF_HEART,        {},                                                                           SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA,     true);
    locationTable[RC_LH_DEKU_SCRUB_GROTTO_LEFT] =            Location::GrottoScrub(RC_LH_DEKU_SCRUB_GROTTO_LEFT,            RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LAKE_HYLIA,      ACTOR_EN_DNS,         SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x00, 0xEF), 0x30, "Deku Scrub Grotto Left",            "LH Deku Scrub Grotto Left",            RHT_LH_DEKU_SCRUB_GROTTO_LEFT,           RG_BUY_DEKU_NUT_5,        { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x19, 0x01),         SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA);
    locationTable[RC_LH_DEKU_SCRUB_GROTTO_RIGHT] =           Location::GrottoScrub(RC_LH_DEKU_SCRUB_GROTTO_RIGHT,           RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LAKE_HYLIA,      ACTOR_EN_DNS,         SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x05, 0xEF), 0x37, "Deku Scrub Grotto Right",           "LH Deku Scrub Grotto Right",           RHT_LH_DEKU_SCRUB_GROTTO_RIGHT,          RG_BUY_BOMBS_535,         { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x19, 0x06),         SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA);
    locationTable[RC_LH_DEKU_SCRUB_GROTTO_CENTER] =          Location::GrottoScrub(RC_LH_DEKU_SCRUB_GROTTO_CENTER,          RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LAKE_HYLIA,      ACTOR_EN_DNS,         SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x03, 0xEF), 0x33, "Deku Scrub Grotto Center",          "LH Deku Scrub Grotto Center",          RHT_LH_DEKU_SCRUB_GROTTO_CENTER,         RG_BUY_DEKU_SEEDS_30,     { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x19, 0x04),         SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA);
    // Gerudo Valley
    locationTable[RC_GV_CHEST] =                                   Location::Chest(RC_GV_CHEST,                             RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GERUDO_VALLEY,   ACTOR_EN_BOX,         SCENE_GERUDO_VALLEY,              23200,                        0x00, "Chest",                             "GV Chest",                             RHT_GV_CHEST,                            RG_PURPLE_RUPEE,          {},                                                                           SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_GV_TRADE_SAW] =                                Location::Base(RC_GV_TRADE_SAW,                         RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_GERUDO_VALLEY,   ACTOR_ID_MAX,         SCENE_GERUDO_VALLEY,              0x00,                         0x22, "Trade Saw",                         "GV Trade Saw",                         RHT_GV_TRADE_SAW,                        RG_BROKEN_SWORD,          { Category::cAdultTrade }, SpoilerCollectionCheck::RandomizerInf(0x5A, 0x1F), SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_GV_WATERFALL_FREESTANDING_POH] =        Location::Collectable(RC_GV_WATERFALL_FREESTANDING_POH,        RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GERUDO_VALLEY,   ACTOR_EN_ITEM00,      SCENE_GERUDO_VALLEY,              262,                          0x01, "Waterfall Freestanding PoH",        "GV Waterfall Freestanding PoH",        RHT_GV_WATERFALL_FREESTANDING_POH,       RG_PIECE_OF_HEART,        {},                                                                           SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_GV_CRATE_FREESTANDING_POH] =            Location::Collectable(RC_GV_CRATE_FREESTANDING_POH,            RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GERUDO_VALLEY,   ACTOR_EN_ITEM00,      SCENE_GERUDO_VALLEY,              518,                          0x02, "Crate Freestanding PoH",            "GV Crate Freestanding PoH",            RHT_GV_CRATE_FREESTANDING_POH,           RG_PIECE_OF_HEART,        {},                                                                           SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_GV_DEKU_SCRUB_GROTTO_REAR] =            Location::GrottoScrub(RC_GV_DEKU_SCRUB_GROTTO_REAR,            RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_GERUDO_VALLEY,   ACTOR_EN_DNS,         SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x07, 0xF0), 0x39, "Deku Scrub Grotto Rear",            "GV Deku Scrub Grotto Rear",            RHT_GV_DEKU_SCRUB_GROTTO_FRONT,          RG_BUY_GREEN_POTION,      { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x1A, 0x09),         SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_GV_DEKU_SCRUB_GROTTO_FRONT] =           Location::GrottoScrub(RC_GV_DEKU_SCRUB_GROTTO_FRONT,           RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_GERUDO_VALLEY,   ACTOR_EN_DNS,         SCENE_GROTTOS,                    TWO_ACTOR_PARAMS(0x08, 0xF0), 0x3A, "Deku Scrub Grotto Front",           "GV Deku Scrub Grotto Front",           RHT_GV_DEKU_SCRUB_GROTTO_FRONT,          RG_BUY_GREEN_POTION,      { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x1A, 0x09),         SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    // Gerudo Fortress
    locationTable[RC_GF_CHEST] =                                   Location::Chest(RC_GF_CHEST,                             RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GERUDO_FORTRESS, ACTOR_EN_BOX,         SCENE_GERUDOS_FORTRESS,           1984,                         0x00, "Chest",                             "GF Chest",                             RHT_GF_CHEST,                            RG_PIECE_OF_HEART,        {},                                                                           SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_GF_HBA_1000_POINTS] =                          Location::Base(RC_GF_HBA_1000_POINTS,                   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GERUDO_FORTRESS, ACTOR_ID_MAX,         SCENE_GERUDOS_FORTRESS,           0x00,                         0x3E, "GF HBA 1000 Points",                "GF HBA 1000 Points",                   RHT_GF_HBA_1000_POINTS,                  RG_PIECE_OF_HEART,        {},                        SpoilerCollectionCheck::InfTable(0x19, 0x08),      SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_GF_HBA_1500_POINTS] =                          Location::Base(RC_GF_HBA_1500_POINTS,                   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GERUDO_FORTRESS, ACTOR_ID_MAX,         SCENE_GERUDOS_FORTRESS,           0x00,                         0x30, "GF HBA 1500 Points",                "GF HBA 1500 Points",                   RHT_GF_HBA_1500_POINTS,                  RG_PROGRESSIVE_BOW,       {},                        SpoilerCollectionCheck::ItemGetInf(7),             SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    // RandoTodo: Do we replace these with the RC_HIDEOUT keys or keep these?
    locationTable[RC_GF_GERUDO_MEMBERSHIP_CARD] =                   Location::Base(RC_GF_GERUDO_MEMBERSHIP_CARD,            RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GERUDO_FORTRESS, ACTOR_ID_MAX,         SCENE_THIEVES_HIDEOUT,            0x00,                         0x3A, "GF Gerudo Membership Card",         "GF Gerudo Membership Card",            RHT_GF_GERUDO_MEMBERSHIP_CARD,           RG_GERUDO_MEMBERSHIP_CARD,{},                        SpoilerCollectionCheck::GerudoToken(),             SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_GF_NORTH_F1_CARPENTER] =                Location::Collectable(RC_GF_NORTH_F1_CARPENTER,                RCQUEST_BOTH, RCTYPE_GF_KEY,      RCAREA_GERUDO_FORTRESS, ACTOR_EN_ITEM00,      SCENE_THIEVES_HIDEOUT,            3089,                         0x0C, "GF North F1 Carpenter",             "GF North F1 Carpenter",                RHT_GF_NORTH_F1_CARPENTER,               RG_GERUDO_FORTRESS_SMALL_KEY,{ Category::cVanillaGFSmallKey },                                          SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_GF_NORTH_F2_CARPENTER] =                Location::Collectable(RC_GF_NORTH_F2_CARPENTER,                RCQUEST_BOTH, RCTYPE_GF_KEY,      RCAREA_GERUDO_FORTRESS, ACTOR_EN_ITEM00,      SCENE_THIEVES_HIDEOUT,            2577,                         0x0A, "GF North F2 Carpenter",             "GF North F2 Carpenter",                RHT_GF_NORTH_F2_CARPENTER,               RG_GERUDO_FORTRESS_SMALL_KEY,{ Category::cVanillaGFSmallKey },                                          SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_GF_SOUTH_F1_CARPENTER] =                Location::Collectable(RC_GF_SOUTH_F1_CARPENTER,                RCQUEST_BOTH, RCTYPE_GF_KEY,      RCAREA_GERUDO_FORTRESS, ACTOR_EN_ITEM00,      SCENE_THIEVES_HIDEOUT,            3601,                         0x0E, "GF South F1 Carpenter",             "GF South F1 Carpenter",                RHT_GF_SOUTH_F1_CARPENTER,               RG_GERUDO_FORTRESS_SMALL_KEY,{ Category::cVanillaGFSmallKey },                                          SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_GF_SOUTH_F2_CARPENTER] =                Location::Collectable(RC_GF_SOUTH_F2_CARPENTER,                RCQUEST_BOTH, RCTYPE_GF_KEY,      RCAREA_GERUDO_FORTRESS, ACTOR_EN_ITEM00,      SCENE_THIEVES_HIDEOUT,            3857,                         0x0F, "GF South F2 Carpenter",             "GF South F2 Carpenter",                RHT_GF_SOUTH_F2_CARPENTER,               RG_GERUDO_FORTRESS_SMALL_KEY,{ Category::cVanillaGFSmallKey },                                          SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    // Haunted Wasteland
    locationTable[RC_WASTELAND_CHEST] =                            Location::Chest(RC_WASTELAND_CHEST,                      RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_WASTELAND,             ACTOR_EN_BOX,    SCENE_HAUNTED_WASTELAND,         -30048,                       0x00, "Chest",                             "Wasteland Chest",                      RHT_WASTELAND_CHEST,                     RG_PURPLE_RUPEE,          {},                                                                           SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_WASTELAND_BOMBCHU_SALESMAN] =                  Location::Base(RC_WASTELAND_BOMBCHU_SALESMAN,           RCQUEST_BOTH, RCTYPE_MERCHANT,    RCAREA_WASTELAND,             ACTOR_ID_MAX,    SCENE_HAUNTED_WASTELAND,         0x00,                         0x03, "Carpet Salesman",                   "Wasteland Carpet Salesman",            RHT_WASTELAND_BOMBCHU_SALESMAN,          RG_BOMBCHU_10,            { Category::cMerchant },   SpoilerCollectionCheck::Merchant(0x5E, 0x86),      SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    // Desert Colossus
    locationTable[RC_COLOSSUS_FREESTANDING_POH] =            Location::Collectable(RC_COLOSSUS_FREESTANDING_POH,            RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_DESERT_COLOSSUS,       ACTOR_EN_ITEM00, SCENE_DESERT_COLOSSUS,           3334,                         0x0D, "Freestanding PoH",                  "Colossus Freestanding PoH",            RHT_COLOSSUS_FREESTANDING_POH,           RG_PIECE_OF_HEART,        {},                                                                           SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,  true);
    locationTable[RC_COLOSSUS_DEKU_SCRUB_GROTTO_REAR] =      Location::GrottoScrub(RC_COLOSSUS_DEKU_SCRUB_GROTTO_REAR,      RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_DESERT_COLOSSUS,       ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x07, 0xFD), 0x39, "Deku Scrub Grotto Rear",            "Colossus Deku Scrub Grotto Rear",      RHT_COLOSSUS_DEKU_SCRUB_GROTTO_REAR,     RG_BUY_RED_POTION_30,     { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x27, 0x08),         SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_COLOSSUS_DEKU_SCRUB_GROTTO_FRONT] =     Location::GrottoScrub(RC_COLOSSUS_DEKU_SCRUB_GROTTO_FRONT,     RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_DESERT_COLOSSUS,       ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x08, 0xFD), 0x3A, "Deku Scrub Grotto Front",           "Colossus Deku Scrub Grotto Front",     RHT_COLOSSUS_DEKU_SCRUB_GROTTO_FRONT,    RG_BUY_GREEN_POTION,      { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x27, 0x09),         SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    // Market
    locationTable[RC_MARKET_TREASURE_CHEST_GAME_REWARD] =          Location::Chest(RC_MARKET_TREASURE_CHEST_GAME_REWARD,    RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_MARKET,                ACTOR_EN_BOX,    SCENE_TREASURE_BOX_SHOP,         0x00,                         0x0A, "Treasure Chest Game Reward",        "MK Treasure Chest Game Reward",        RHT_MARKET_TREASURE_CHEST_GAME_REWARD,   RG_TREASURE_GAME_HEART,   {},                        SpoilerCollectionCheck::ItemGetInf(19),            SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,  true);
    locationTable[RC_MARKET_BOMBCHU_BOWLING_FIRST_PRIZE] =          Location::Base(RC_MARKET_BOMBCHU_BOWLING_FIRST_PRIZE,   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_MARKET,                ACTOR_ID_MAX,    SCENE_BOMBCHU_BOWLING_ALLEY,     0x00,                         0x33, "Bombchu Bowling First Prize",       "MK Bombchu Bowling First Prize",       RHT_MARKET_BOMBCHU_BOWLING_FIRST_PRIZE,  RG_PROGRESSIVE_BOMB_BAG,  {},                        SpoilerCollectionCheck::ItemGetInf(25),            SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,  true);
    locationTable[RC_MARKET_BOMBCHU_BOWLING_SECOND_PRIZE] =         Location::Base(RC_MARKET_BOMBCHU_BOWLING_SECOND_PRIZE,  RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_MARKET,                ACTOR_ID_MAX,    SCENE_BOMBCHU_BOWLING_ALLEY,     0x00,                         0x3E, "Bombchu Bowling Second Prize",      "MK Bombchu Bowling Second Prize",      RHT_MARKET_BOMBCHU_BOWLING_SECOND_PRIZE, RG_PIECE_OF_HEART,        {},                        SpoilerCollectionCheck::ItemGetInf(26),            SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,  true);
    locationTable[RC_MARKET_BOMBCHU_BOWLING_BOMBCHUS] =             Location::Base(RC_MARKET_BOMBCHU_BOWLING_BOMBCHUS,      RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_MARKET,                ACTOR_ID_MAX,    SCENE_BOMBCHU_BOWLING_ALLEY,     0x00,                         0x00, "Bombchu Bowling Bombchus",          "MK Bombchu Bowling Bombchus",          RHT_MARKET_BOMBCHU_BOWLING_BOMBCHUS,     RG_BOMBCHU_DROP,          {},                        SpoilerCollectionCheck::None(),                    SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_LOST_DOG] =                             Location::Base(RC_MARKET_LOST_DOG,                      RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_MARKET,                ACTOR_ID_MAX,    SCENE_DOG_LADY_HOUSE,            0x00,                         0x3E, "Lost Dog",                          "MK Lost Dog",                          RHT_MARKET_LOST_DOG,                     RG_PIECE_OF_HEART,        {},                        SpoilerCollectionCheck::InfTable(0x19, 0x09),      SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,  true);
    locationTable[RC_MARKET_SHOOTING_GALLERY_REWARD] =              Location::Base(RC_MARKET_SHOOTING_GALLERY_REWARD,       RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_MARKET,                ACTOR_ID_MAX,    SCENE_SHOOTING_GALLERY,          0x00,                         0x60, "Shooting Gallery",                  "MK Shooting Gallery",                  RHT_MARKET_SHOOTING_GALLERY_REWARD,      RG_PROGRESSIVE_SLINGSHOT, {},                        SpoilerCollectionCheck::ItemGetInf(5),             SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,  true);
    locationTable[RC_MARKET_10_BIG_POES] =                          Location::Base(RC_MARKET_10_BIG_POES,                   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_MARKET,                ACTOR_ID_MAX,    SCENE_MARKET_GUARD_HOUSE,        0x00,                         0x0F, "10 Big Poes",                       "MK 10 Big Poes",                       RHT_MARKET_10_BIG_POES,                  RG_EMPTY_BOTTLE,          {},                        SpoilerCollectionCheck::RandomizerInf(SCENE_MARKET_GUARD_HOUSE, RAND_INF_10_BIG_POES), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE, true);
    locationTable[RC_MARKET_TREASURE_CHEST_GAME_ITEM_1] =          Location::Chest(RC_MARKET_TREASURE_CHEST_GAME_ITEM_1,    RCQUEST_BOTH, RCTYPE_CHEST_GAME,  RCAREA_MARKET,                ACTOR_EN_BOX,    SCENE_TREASURE_BOX_SHOP,         0x00,                         0x01, "Chest Game First Room Chest",       "MK Chest Game First Room Chest",       RHT_MARKET_TREASURE_CHEST_GAME_ITEM_1,   RG_TREASURE_GAME_SMALL_KEY,{ Category::cChestMinigame },                                                SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_TREASURE_CHEST_GAME_ITEM_2] =          Location::Chest(RC_MARKET_TREASURE_CHEST_GAME_ITEM_2,    RCQUEST_BOTH, RCTYPE_CHEST_GAME,  RCAREA_MARKET,                ACTOR_EN_BOX,    SCENE_TREASURE_BOX_SHOP,         0x00,                         0x03, "Chest Game Second Room Chest",      "MK Chest Game Second Room Chest",      RHT_MARKET_TREASURE_CHEST_GAME_ITEM_2,   RG_TREASURE_GAME_SMALL_KEY,{ Category::cChestMinigame },                                                SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_TREASURE_CHEST_GAME_ITEM_3] =          Location::Chest(RC_MARKET_TREASURE_CHEST_GAME_ITEM_3,    RCQUEST_BOTH, RCTYPE_CHEST_GAME,  RCAREA_MARKET,                ACTOR_EN_BOX,    SCENE_TREASURE_BOX_SHOP,         0x00,                         0x05, "Chest Game Third Room Chest",       "MK Chest Game Third Room Chest",       RHT_MARKET_TREASURE_CHEST_GAME_ITEM_3,   RG_TREASURE_GAME_SMALL_KEY,{ Category::cChestMinigame },                                                SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_TREASURE_CHEST_GAME_ITEM_4] =          Location::Chest(RC_MARKET_TREASURE_CHEST_GAME_ITEM_4,    RCQUEST_BOTH, RCTYPE_CHEST_GAME,  RCAREA_MARKET,                ACTOR_EN_BOX,    SCENE_TREASURE_BOX_SHOP,         0x00,                         0x07, "Chest Game Fourth Room Chest",      "MK Chest Game Fourth Room Chest",      RHT_MARKET_TREASURE_CHEST_GAME_ITEM_4,   RG_TREASURE_GAME_SMALL_KEY,{ Category::cChestMinigame },                                                SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_TREASURE_CHEST_GAME_ITEM_5] =          Location::Chest(RC_MARKET_TREASURE_CHEST_GAME_ITEM_5,    RCQUEST_BOTH, RCTYPE_CHEST_GAME,  RCAREA_MARKET,                ACTOR_EN_BOX,    SCENE_TREASURE_BOX_SHOP,         0x00,                         0x09, "Chest Game Fifth Room Chest",       "MK Chest Game Fifth Room Chest",       RHT_MARKET_TREASURE_CHEST_GAME_ITEM_5,   RG_TREASURE_GAME_SMALL_KEY,{ Category::cChestMinigame },                                                SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    // Hyrule Castle
    locationTable[RC_HC_MALON_EGG] =                                Location::Base(RC_HC_MALON_EGG,                         RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_HYRULE_CASTLE,         ACTOR_ID_MAX,    SCENE_HYRULE_CASTLE,             0x00,                         0x47, "Malon Egg",                         "HC Malon Egg",                         RHT_HC_MALON_EGG,                        RG_WEIRD_EGG,             {},                        SpoilerCollectionCheck::EventChkInf(0x12),         SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,  true);
    locationTable[RC_HC_ZELDAS_LETTER] =                            Location::Base(RC_HC_ZELDAS_LETTER,                     RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_HYRULE_CASTLE,         ACTOR_ID_MAX,    SCENE_CASTLE_COURTYARD_ZELDA,    0x00,                         0x0B, "Zeldas Letter",                     "HC Zeldas Letter",                     RHT_HC_ZELDAS_LETTER,                    RG_ZELDAS_LETTER,         {},                        SpoilerCollectionCheck::EventChkInf(0x40),         SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,  true);
    // Kakariko
    locationTable[RC_KAK_REDEAD_GROTTO_CHEST] =                    Location::Chest(RC_KAK_REDEAD_GROTTO_CHEST,              RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_EN_BOX,    SCENE_GROTTOS,                   31434,                        0x0A, "Redead Grotto Chest",               "Kak Redead Grotto Chest",              RHT_KAK_REDEAD_GROTTO_CHEST,              RG_HUGE_RUPEE,           {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_OPEN_GROTTO_CHEST] =                      Location::Chest(RC_KAK_OPEN_GROTTO_CHEST,                RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_EN_BOX,    SCENE_GROTTOS,                   22984,                        0x08, "Open Grotto Chest",                 "Kak Open Grotto Chest",                RHT_KAK_OPEN_GROTTO_CHEST,                RG_RED_RUPEE,            {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_10_GOLD_SKULLTULA_REWARD] =                Location::Base(RC_KAK_10_GOLD_SKULLTULA_REWARD,         RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_HOUSE_OF_SKULLTULA,        0x00,                         0x45, "10 Gold Skulltula Reward",          "Kak 10 Gold Skulltula Reward",         RHT_KAK_10_GOLD_SKULLTULA_REWARD,         RG_PROGRESSIVE_WALLET,   {},                        SpoilerCollectionCheck::EventChkInf(0xDA),         SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_20_GOLD_SKULLTULA_REWARD] =                Location::Base(RC_KAK_20_GOLD_SKULLTULA_REWARD,         RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_HOUSE_OF_SKULLTULA,        0x00,                         0x39, "20 Gold Skulltula Reward",          "Kak 20 Gold Skulltula Reward",         RHT_KAK_20_GOLD_SKULLTULA_REWARD,         RG_STONE_OF_AGONY,       {},                        SpoilerCollectionCheck::EventChkInf(0xDB),         SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_30_GOLD_SKULLTULA_REWARD] =                Location::Base(RC_KAK_30_GOLD_SKULLTULA_REWARD,         RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_HOUSE_OF_SKULLTULA,        0x00,                         0x46, "30 Gold Skulltula Reward",          "Kak 30 Gold Skulltula Reward",         RHT_KAK_30_GOLD_SKULLTULA_REWARD,         RG_PROGRESSIVE_WALLET,   {},                        SpoilerCollectionCheck::EventChkInf(0xDC),         SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_40_GOLD_SKULLTULA_REWARD] =                Location::Base(RC_KAK_40_GOLD_SKULLTULA_REWARD,         RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_HOUSE_OF_SKULLTULA,        0x00,                         0x03, "40 Gold Skulltula Reward",          "Kak 40 Gold Skulltula Reward",         RHT_KAK_40_GOLD_SKULLTULA_REWARD,         RG_BOMBCHU_10,           {},                        SpoilerCollectionCheck::EventChkInf(0xDD),         SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_50_GOLD_SKULLTULA_REWARD] =                Location::Base(RC_KAK_50_GOLD_SKULLTULA_REWARD,         RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_HOUSE_OF_SKULLTULA,        0x00,                         0x3E, "50 Gold Skulltula Reward",          "Kak 50 Gold Skulltula Reward",         RHT_KAK_50_GOLD_SKULLTULA_REWARD,         RG_PIECE_OF_HEART,       {},                        SpoilerCollectionCheck::EventChkInf(0xDE),         SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_100_GOLD_SKULLTULA_REWARD] =               Location::Base(RC_KAK_100_GOLD_SKULLTULA_REWARD,        RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_HOUSE_OF_SKULLTULA,        0x00,                         0x3E, "100 Gold Skulltula Reward",         "Kak 100 Gold Skulltula Reward",        RHT_KAK_100_GOLD_SKULLTULA_REWARD,        RG_HUGE_RUPEE,           {},                        SpoilerCollectionCheck::RandomizerInf(SCENE_HOUSE_OF_SKULLTULA, RAND_INF_KAK_100_GOLD_SKULLTULA_REWARD), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_MAN_ON_ROOF] =                             Location::Base(RC_KAK_MAN_ON_ROOF,                      RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_KAKARIKO_VILLAGE,          0x00,                         0x3E, "Man on Roof",                       "Kak Man on Roof",                      RHT_KAK_MAN_ON_ROOF,                      RG_PIECE_OF_HEART,       {},                        SpoilerCollectionCheck::ItemGetInf(29),            SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_SHOOTING_GALLERY_REWARD] =                 Location::Base(RC_KAK_SHOOTING_GALLERY_REWARD,          RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_SHOOTING_GALLERY,          0x00,                         0x30, "Shooting Gallery Reward",           "Kak Shooting Gallery Reward",          RHT_KAK_SHOOTING_GALLERY_REWARD,          RG_PROGRESSIVE_BOW,      {},                        SpoilerCollectionCheck::Chest(0x42, 0x1F),         SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_TRADE_ODD_MUSHROOM] =                      Location::Base(RC_KAK_TRADE_ODD_MUSHROOM,               RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_POTION_SHOP_GRANNY,        0x00,                         0x20, "Trade Odd Mushroom",                "Kak Trade Odd Mushroom",               RHT_KAK_TRADE_ODD_MUSHROOM,               RG_ODD_POTION,           { Category::cAdultTrade }, SpoilerCollectionCheck::ItemGetInf(56),            SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_GRANNYS_SHOP] =                            Location::Base(RC_KAK_GRANNYS_SHOP,                     RCQUEST_BOTH, RCTYPE_MERCHANT,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_POTION_SHOP_GRANNY,        0x00,                         0x4E, "Granny's Shop",                     "Kak Granny's Shop",                    RHT_KAK_GRANNYS_SHOP,                     RG_BUY_BLUE_POTION,      {},                        SpoilerCollectionCheck::RandomizerInf(SCENE_POTION_SHOP_GRANNY, RAND_INF_MERCHANTS_GRANNYS_SHOP), SpoilerCollectionCheckGroup::GROUP_KAKARIKO, true);
    locationTable[RC_KAK_ANJU_AS_ADULT] =                           Location::Base(RC_KAK_ANJU_AS_ADULT,                    RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_KAKARIKO_VILLAGE,          0x00,                         0x1D, "Anju as Adult",                     "Kak Anju as Adult",                    RHT_KAK_ANJU_AS_ADULT,                    RG_CLAIM_CHECK,          {},                        SpoilerCollectionCheck::ItemGetInf(36),            SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_ANJU_AS_CHILD] =                           Location::Base(RC_KAK_ANJU_AS_CHILD,                    RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_KAKARIKO_VILLAGE,          0x00,                         0x0F, "Anju as Child",                     "Kak Anju as Child",                    RHT_KAK_ANJU_AS_CHILD,                    RG_EMPTY_BOTTLE,         {},                        SpoilerCollectionCheck::ItemGetInf(4),             SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_TRADE_POCKET_CUCCO] =                      Location::Base(RC_KAK_TRADE_POCKET_CUCCO,               RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX,    SCENE_KAKARIKO_VILLAGE,          0x00,                         0x0E, "Trade Pocket Cucco",                "Kak Trade Pocket Cucco",               RHT_KAK_TRADE_POCKET_CUCCO,               RG_COJIRO,               { Category::cAdultTrade }, SpoilerCollectionCheck::ItemGetInf(38),            SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_IMPAS_HOUSE_FREESTANDING_POH] =     Location::Collectable(RC_KAK_IMPAS_HOUSE_FREESTANDING_POH,     RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_EN_ITEM00, SCENE_IMPAS_HOUSE,               262,                          0x01, "Impas House Freestanding PoH",      "Kak Impas House Freestanding PoH",     RHT_KAK_IMPAS_HOUSE_FREESTANDING_POH,     RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_KAK_WINDMILL_FREESTANDING_POH] =        Location::Collectable(RC_KAK_WINDMILL_FREESTANDING_POH,        RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_KAKARIKO_VILLAGE,      ACTOR_EN_ITEM00, SCENE_WINDMILL_AND_DAMPES_GRAVE, 262,                          0x01, "Windmill Freestanding PoH",         "Kak Windmill Freestanding PoH",        RHT_KAK_WINDMILL_FREESTANDING_POH,        RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    // Graveyard
    locationTable[RC_GRAVEYARD_SHIELD_GRAVE_CHEST] =               Location::Chest(RC_GRAVEYARD_SHIELD_GRAVE_CHEST,         RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GRAVEYARD,             ACTOR_EN_BOX,    SCENE_GRAVE_WITH_FAIRYS_FOUNTAIN,21824,                        0x00, "Shield Grave Chest",                "GY Shield Grave Chest",                RHT_GRAVEYARD_SHIELD_GRAVE_CHEST,         RG_HYLIAN_SHIELD,        {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_GRAVEYARD_HEART_PIECE_GRAVE_CHEST] =          Location::Chest(RC_GRAVEYARD_HEART_PIECE_GRAVE_CHEST,    RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GRAVEYARD,             ACTOR_EN_BOX,    SCENE_REDEAD_GRAVE,              -22592,                       0x00, "Heart Piece Grave Chest",           "GY Heart Piece Grave Chest",           RHT_GRAVEYARD_HEART_PIECE_GRAVE_CHEST,    RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_GRAVEYARD_ROYAL_FAMILYS_TOMB_CHEST] =         Location::Chest(RC_GRAVEYARD_ROYAL_FAMILYS_TOMB_CHEST,   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GRAVEYARD,             ACTOR_EN_BOX,    SCENE_ROYAL_FAMILYS_TOMB,        -32736,                       0x00, "Composers Grave Chest",             "GY Composers Grave Chest",             RHT_GRAVEYARD_ROYAL_FAMILYS_TOMB_CHEST,   RG_BOMBS_5,              {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_GRAVEYARD_HOOKSHOT_CHEST] =                   Location::Chest(RC_GRAVEYARD_HOOKSHOT_CHEST,             RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GRAVEYARD,             ACTOR_EN_BOX,    SCENE_WINDMILL_AND_DAMPES_GRAVE, 4352,                         0x00, "Hookshot Chest",                    "GY Hookshot Chest",                    RHT_GRAVEYARD_HOOKSHOT_CHEST,             RG_PROGRESSIVE_HOOKSHOT, {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_GRAVEYARD_FREESTANDING_POH] =           Location::Collectable(RC_GRAVEYARD_FREESTANDING_POH,           RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GRAVEYARD,             ACTOR_EN_ITEM00, SCENE_GRAVEYARD,                 1030,                         0x04, "Freestanding PoH",                  "GY Freestanding PoH",                  RHT_GRAVEYARD_FREESTANDING_POH,           RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_GRAVEYARD_DAMPE_RACE_FREESTANDING_POH] =Location::Collectable(RC_GRAVEYARD_DAMPE_RACE_FREESTANDING_POH,RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GRAVEYARD,             ACTOR_EN_ITEM00, SCENE_WINDMILL_AND_DAMPES_GRAVE, 1798,                         0x07, "Dampe Race Freestanding PoH",       "GY Dampe Race Freestanding PoH",       RHT_GRAVEYARD_DAMPE_RACE_FREESTANDING_POH,RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    locationTable[RC_GRAVEYARD_DAMPE_GRAVEDIGGING_TOUR] =    Location::Collectable(RC_GRAVEYARD_DAMPE_GRAVEDIGGING_TOUR,    RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GRAVEYARD,             ACTOR_EN_ITEM00, SCENE_GRAVEYARD,                 7942,                         0x08, "Dampe Gravedigging Tour",           "GY Dampe Gravedigging Tour",           RHT_GRAVEYARD_DAMPE_GRAVEDIGGING_TOUR,    RG_PIECE_OF_HEART,       {},                        SpoilerCollectionCheck::Gravedigger(0x53, 0x1F),   SpoilerCollectionCheckGroup::GROUP_KAKARIKO,       true);
    // Death Mountain
    locationTable[RC_DMT_CHEST] =                                  Location::Chest(RC_DMT_CHEST,                            RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_DEATH_MOUNTAIN_TRAIL,  ACTOR_EN_BOX,    SCENE_DEATH_MOUNTAIN_TRAIL,      23201,                        0x01, "Chest",                             "DMT Chest",                            RHT_DMT_CHEST,                            RG_PURPLE_RUPEE,         {},                                                                           SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMT_STORMS_GROTTO_CHEST] =                    Location::Chest(RC_DMT_STORMS_GROTTO_CHEST,              RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_DEATH_MOUNTAIN_TRAIL,  ACTOR_EN_BOX,    SCENE_GROTTOS,                   23255,                        0x17, "Storms Grotto Chest",               "DMT Storms Grotto Chest",              RHT_DMT_STORMS_GROTTO_CHEST,              RG_HUGE_RUPEE,           {},                                                                           SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMT_TRADE_BROKEN_SWORD] =                      Location::Base(RC_DMT_TRADE_BROKEN_SWORD,               RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_DEATH_MOUNTAIN_TRAIL,  ACTOR_ID_MAX,    SCENE_DEATH_MOUNTAIN_TRAIL,      0x00,                         0x23, "Trade Broken Sword",                "DMT Trade Broken Sword",               RHT_DMT_TRADE_BROKEN_SWORD,               RG_PRESCRIPTION,         { Category::cAdultTrade }, SpoilerCollectionCheck::RandomizerInf(0x60, 0x1D), SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN, true);
    locationTable[RC_DMT_TRADE_EYEDROPS] =                          Location::Base(RC_DMT_TRADE_EYEDROPS,                   RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_DEATH_MOUNTAIN_TRAIL,  ACTOR_ID_MAX,    SCENE_DEATH_MOUNTAIN_TRAIL,      0x00,                         0x26, "Trade Eyedrops",                    "DMT Trade Eyedrops",                   RHT_DMT_TRADE_EYEDROPS,                   RG_CLAIM_CHECK,          { Category::cAdultTrade }, SpoilerCollectionCheck::RandomizerInf(0x60, 0x1E), SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN, true);
    locationTable[RC_DMT_TRADE_CLAIM_CHECK] =                       Location::Base(RC_DMT_TRADE_CLAIM_CHECK,                RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_DEATH_MOUNTAIN_TRAIL,  ACTOR_ID_MAX,    SCENE_DEATH_MOUNTAIN_TRAIL,      0x00,                         0x57, "Trade Claim Check",                 "DMT Trade Claim Check",                RHT_DMT_TRADE_CLAIM_CHECK,                RG_BIGGORON_SWORD,       {},                        SpoilerCollectionCheck::Chest(0x60, 0x1F),         SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN, true);
    locationTable[RC_DMT_FREESTANDING_POH] =                 Location::Collectable(RC_DMT_FREESTANDING_POH,                 RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_DEATH_MOUNTAIN_TRAIL,  ACTOR_EN_ITEM00, SCENE_DEATH_MOUNTAIN_TRAIL,      7686,                         0x1E, "Freestanding PoH",                  "DMT Freestanding PoH",                 RHT_DMT_FREESTANDING_POH,                 RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN, true);
    // Goron City
    locationTable[RC_GC_MAZE_LEFT_CHEST] =                         Location::Chest(RC_GC_MAZE_LEFT_CHEST,                   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GORON_CITY,            ACTOR_EN_BOX,    SCENE_GORON_CITY,                23232,                        0x00, "Maze Left Chest",                   "GC Maze Left Chest",                   RHT_GC_MAZE_LEFT_CHEST,                   RG_HUGE_RUPEE,           {},                                                                           SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_MAZE_RIGHT_CHEST] =                        Location::Chest(RC_GC_MAZE_RIGHT_CHEST,                  RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GORON_CITY,            ACTOR_EN_BOX,    SCENE_GORON_CITY,                23201,                        0x01, "Maze Right Chest",                  "GC Maze Right Chest",                  RHT_GC_MAZE_RIGHT_CHEST,                  RG_PURPLE_RUPEE,         {},                                                                           SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_MAZE_CENTER_CHEST] =                       Location::Chest(RC_GC_MAZE_CENTER_CHEST,                 RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GORON_CITY,            ACTOR_EN_BOX,    SCENE_GORON_CITY,                23202,                        0x02, "Maze Center Chest",                 "GC Maze Center Chest",                 RHT_GC_MAZE_CENTER_CHEST,                 RG_PURPLE_RUPEE,         {},                                                                           SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_ROLLING_GORON_AS_CHILD] =                   Location::Base(RC_GC_ROLLING_GORON_AS_CHILD,            RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GORON_CITY,            ACTOR_ID_MAX,    SCENE_GORON_CITY,                0x00,                         0x34, "Rolling Goron as Child",            "GC Rolling Goron as Child",            RHT_GC_ROLLING_GORON_AS_CHILD,            RG_PROGRESSIVE_BOMB_BAG, {},                        SpoilerCollectionCheck::InfTable(0x11, 0x06),      SpoilerCollectionCheckGroup::GROUP_GORON_CITY,     true);
    locationTable[RC_GC_ROLLING_GORON_AS_ADULT] =                   Location::Base(RC_GC_ROLLING_GORON_AS_ADULT,            RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GORON_CITY,            ACTOR_ID_MAX,    SCENE_GORON_CITY,                0x00,                         0x2C, "Rolling Goron as Adult",            "GC Rolling Goron as Adult",            RHT_GC_ROLLING_GORON_AS_ADULT,            RG_GORON_TUNIC,          {},                        SpoilerCollectionCheck::InfTable(0x10, 0x01),      SpoilerCollectionCheckGroup::GROUP_GORON_CITY,     true);
    locationTable[RC_GC_DARUNIAS_JOY] =                             Location::Base(RC_GC_DARUNIAS_JOY,                      RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GORON_CITY,            ACTOR_ID_MAX,    SCENE_GORON_CITY,                0x00,                         0x54, "Darunias Joy",                      "GC Darunias Joy",                      RHT_GC_DARUNIAS_JOY,                      RG_PROGRESSIVE_STRENGTH, {},                        SpoilerCollectionCheck::Chest(0x62, 0x1E),         SpoilerCollectionCheckGroup::GROUP_GORON_CITY,     true);
    locationTable[RC_GC_POT_FREESTANDING_POH] =              Location::Collectable(RC_GC_POT_FREESTANDING_POH,              RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_GORON_CITY,            ACTOR_EN_ITEM00, SCENE_GORON_CITY,                7942,                         0x1F, "Pot Freestanding PoH",              "GC Pot Freestanding PoH",              RHT_GC_POT_FREESTANDING_POH,              RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_GORON_CITY,     true);
    locationTable[RC_GC_DEKU_SCRUB_GROTTO_LEFT] =            Location::GrottoScrub(RC_GC_DEKU_SCRUB_GROTTO_LEFT,            RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_GORON_CITY,            ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x00, 0xFB), 0x30, "Deku Scrub Grotto Left",            "GC Deku Scrub Grotto Left",            RHT_GC_DEKU_SCRUB_GROTTO_LEFT,            RG_BUY_DEKU_NUT_5,       { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x25, 0x01),         SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_DEKU_SCRUB_GROTTO_RIGHT] =           Location::GrottoScrub(RC_GC_DEKU_SCRUB_GROTTO_RIGHT,           RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_GORON_CITY,            ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x05, 0xFB), 0x37, "Deku Scrub Grotto Right",           "GC Deku Scrub Grotto Right",           RHT_GC_DEKU_SCRUB_GROTTO_RIGHT,           RG_BUY_BOMBS_535,        { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x25, 0x06),         SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_DEKU_SCRUB_GROTTO_CENTER] =          Location::GrottoScrub(RC_GC_DEKU_SCRUB_GROTTO_CENTER,          RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_GORON_CITY,            ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x03, 0xFB), 0x33, "Deku Scrub Grotto Center",          "GC Deku Scrub Grotto Center",          RHT_GC_DEKU_SCRUB_GROTTO_CENTER,          RG_BUY_ARROWS_30,        { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x25, 0x04),         SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_MEDIGORON] =                                Location::Base(RC_GC_MEDIGORON,                         RCQUEST_BOTH, RCTYPE_MERCHANT,    RCAREA_GORON_CITY,            ACTOR_ID_MAX,    SCENE_GORON_CITY,                0x00,                         0x51, "Medigoron",                         "GC Medigoron",                         RHT_GC_MEDIGORON,                         RG_GIANTS_KNIFE,         { Category::cMerchant },   SpoilerCollectionCheck::Merchant(0x62, 0x87),      SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    // Death Mountain Crater
    locationTable[RC_DMC_UPPER_GROTTO_CHEST] =                     Location::Chest(RC_DMC_UPPER_GROTTO_CHEST,               RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_DEATH_MOUNTAIN_CRATER, ACTOR_EN_BOX,    SCENE_GROTTOS,                   23802,                        0x1A, "Upper Grotto Chest",                "DMC Upper Grotto Chest",               RHT_DMC_UPPER_GROTTO_CHEST,               RG_BOMBS_20,             {},                                                                           SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMC_WALL_FREESTANDING_POH] =            Location::Collectable(RC_DMC_WALL_FREESTANDING_POH,            RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_DEATH_MOUNTAIN_CRATER, ACTOR_EN_ITEM00, SCENE_DEATH_MOUNTAIN_CRATER,     518,                          0x02, "Wall Freestanding PoH",             "DMC Wall Freestanding PoH",            RHT_DMC_WALL_FREESTANDING_POH,            RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN, true);
    locationTable[RC_DMC_VOLCANO_FREESTANDING_POH] =         Location::Collectable(RC_DMC_VOLCANO_FREESTANDING_POH,         RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_DEATH_MOUNTAIN_CRATER, ACTOR_EN_ITEM00, SCENE_DEATH_MOUNTAIN_CRATER,     2054,                         0x08, "Volcano Freestanding PoH",          "DMC Volcano Freestanding PoH",         RHT_DMC_WALL_FREESTANDING_POH,            RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN, true);
    locationTable[RC_DMC_DEKU_SCRUB] =                              Location::Base(RC_DMC_DEKU_SCRUB,                       RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_DEATH_MOUNTAIN_CRATER, ACTOR_EN_DNS,    SCENE_DEATH_MOUNTAIN_CRATER,     0x05,                         0x37, "Deku Scrub",                        "DMC Deku Scrub",                       RHT_DMC_DEKU_SCRUB,                       RG_BUY_BOMBS_535,        { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x61, 0x06),         SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMC_DEKU_SCRUB_GROTTO_LEFT] =           Location::GrottoScrub(RC_DMC_DEKU_SCRUB_GROTTO_LEFT,           RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_DEATH_MOUNTAIN_CRATER, ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x00, 0xF9), 0x30, "Deku Scrub Grotto Left",            "DMC Deku Scrub Grotto Left",           RHT_DMC_DEKU_SCRUB_GROTTO_LEFT,           RG_BUY_DEKU_NUT_5,       { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x23, 0x01),         SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMC_DEKU_SCRUB_GROTTO_RIGHT] =          Location::GrottoScrub(RC_DMC_DEKU_SCRUB_GROTTO_RIGHT,          RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_DEATH_MOUNTAIN_CRATER, ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x05, 0xF9), 0x37, "Deku Scrub Grotto Right",           "DMC Deku Scrub Grotto Right",          RHT_DMC_DEKU_SCRUB_GROTTO_RIGHT,          RG_BUY_BOMBS_535,        { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x23, 0x06),         SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMC_DEKU_SCRUB_GROTTO_CENTER] =         Location::GrottoScrub(RC_DMC_DEKU_SCRUB_GROTTO_CENTER,         RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_DEATH_MOUNTAIN_CRATER, ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x03, 0xF9), 0x33, "Deku Scrub Grotto Center",          "DMC Deku Scrub Grotto Center",         RHT_DMC_DEKU_SCRUB_GROTTO_CENTER,         RG_BUY_ARROWS_30,        { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x23, 0x04),         SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    // Zoras River
    locationTable[RC_ZR_OPEN_GROTTO_CHEST] =                       Location::Chest(RC_ZR_OPEN_GROTTO_CHEST,                 RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_RIVER,           ACTOR_EN_BOX,    SCENE_GROTTOS,                   22985,                        0x09, "Open Grotto Chest",                 "ZR Open Grotto Chest",                 RHT_ZR_OPEN_GROTTO_CHEST,                 RG_RED_RUPEE,            {},                                                                           SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_MAGIC_BEAN_SALESMAN] =                      Location::Base(RC_ZR_MAGIC_BEAN_SALESMAN,               RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_RIVER,           ACTOR_ID_MAX,    SCENE_ZORAS_RIVER,               0x00,                         0x16, "Magic Bean Salesman",               "ZR Magic Bean Salesman",               RHT_ZR_MAGIC_BEAN_SALESMAN,               RG_MAGIC_BEAN,           {},                        SpoilerCollectionCheck::MagicBeans(0x54, 0x01),    SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER,    true);
    locationTable[RC_ZR_FROGS_ZELDAS_LULLABY] =                     Location::Base(RC_ZR_FROGS_ZELDAS_LULLABY,              RCQUEST_BOTH, RCTYPE_FROG_SONG,   RCAREA_ZORAS_RIVER,           ACTOR_EN_FR,     SCENE_ZORAS_RIVER,               0x00,                         0x3E, "Frogs Zelda's Lullaby",             "ZR Frogs Zelda's Lullaby",             RHT_ZR_FROGS_ZELDAS_LULLABY,              RG_PURPLE_RUPEE,         {},                        SpoilerCollectionCheck::EventChkInf(0xD1),         SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_FROGS_EPONAS_SONG] =                        Location::Base(RC_ZR_FROGS_EPONAS_SONG,                 RCQUEST_BOTH, RCTYPE_FROG_SONG,   RCAREA_ZORAS_RIVER,           ACTOR_EN_FR,     SCENE_ZORAS_RIVER,               0x00,                         0x3E, "Frogs Epona's Song",                "ZR Frogs Epona's Song",                RHT_ZR_FROGS_EPONAS_SONG,                 RG_PURPLE_RUPEE,         {},                        SpoilerCollectionCheck::EventChkInf(0xD2),         SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_FROGS_SARIAS_SONG] =                        Location::Base(RC_ZR_FROGS_SARIAS_SONG,                 RCQUEST_BOTH, RCTYPE_FROG_SONG,   RCAREA_ZORAS_RIVER,           ACTOR_EN_FR,     SCENE_ZORAS_RIVER,               0x00,                         0x3E, "Frogs Saria's Song",                "ZR Frogs Saria's Song",                RHT_ZR_FROGS_SARIAS_SONG,                 RG_PURPLE_RUPEE,         {},                        SpoilerCollectionCheck::EventChkInf(0xD4),         SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_FROGS_SUNS_SONG] =                          Location::Base(RC_ZR_FROGS_SUNS_SONG,                   RCQUEST_BOTH, RCTYPE_FROG_SONG,   RCAREA_ZORAS_RIVER,           ACTOR_EN_FR,     SCENE_ZORAS_RIVER,               0x00,                         0x3E, "Frogs Sun's Song",                  "ZR Frogs Sun's Song",                  RHT_ZR_FROGS_SUNS_SONG,                   RG_PURPLE_RUPEE,         {},                        SpoilerCollectionCheck::EventChkInf(0xD3),         SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_FROGS_SONG_OF_TIME] =                       Location::Base(RC_ZR_FROGS_SONG_OF_TIME,                RCQUEST_BOTH, RCTYPE_FROG_SONG,   RCAREA_ZORAS_RIVER,           ACTOR_EN_FR,     SCENE_ZORAS_RIVER,               0x00,                         0x3E, "Frogs Song of Time",                "ZR Frogs Song of Time",                RHT_ZR_FROGS_SONG_OF_TIME,                RG_PURPLE_RUPEE,         {},                        SpoilerCollectionCheck::EventChkInf(0xD5),         SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_FROGS_IN_THE_RAIN] =                        Location::Base(RC_ZR_FROGS_IN_THE_RAIN,                 RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_RIVER,           ACTOR_EN_FR,     SCENE_ZORAS_RIVER,               0x00,                         0x3E, "Frogs in the Rain",                 "ZR Frogs in the Rain",                 RHT_ZR_FROGS_IN_THE_RAIN,                 RG_PIECE_OF_HEART,       {},                        SpoilerCollectionCheck::EventChkInf(0xD6),         SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER,    true);
    locationTable[RC_ZR_FROGS_OCARINA_GAME] =                       Location::Base(RC_ZR_FROGS_OCARINA_GAME,                RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_RIVER,           ACTOR_EN_FR,     SCENE_ZORAS_RIVER,               0x00,                         0x76, "Frogs Ocarina Game",                "ZR Frogs Ocarina Game",                RHT_ZR_FROGS_OCARINA_GAME,                RG_PIECE_OF_HEART,       {},                        SpoilerCollectionCheck::EventChkInf(0xD0),         SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER,    true);
    locationTable[RC_ZR_NEAR_OPEN_GROTTO_FREESTANDING_POH] = Location::Collectable(RC_ZR_NEAR_OPEN_GROTTO_FREESTANDING_POH, RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_RIVER,           ACTOR_EN_ITEM00, SCENE_ZORAS_RIVER,               1030,                         0x04, "Near Open Grotto Freestanding PoH", "ZR Near Open Grotto Freestanding PoH", RHT_ZR_NEAR_OPEN_GROTTO_FREESTANDING_POH, RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER,    true);
    locationTable[RC_ZR_NEAR_DOMAIN_FREESTANDING_POH] =      Location::Collectable(RC_ZR_NEAR_DOMAIN_FREESTANDING_POH,      RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_RIVER,           ACTOR_EN_ITEM00, SCENE_ZORAS_RIVER,               2822,                         0x0B, "Near Domain Freestanding PoH",      "ZR Near Domain Freestanding PoH",      RHT_ZR_NEAR_DOMAIN_FREESTANDING_POH,      RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER,    true);
    locationTable[RC_ZR_DEKU_SCRUB_GROTTO_REAR] =            Location::GrottoScrub(RC_ZR_DEKU_SCRUB_GROTTO_REAR,            RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_ZORAS_RIVER,           ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x07, 0xEB), 0x39, "Deku Scrub Grotto Rear",            "ZR Deku Scrub Grotto Rear",            RHT_ZR_DEKU_SCRUB_GROTTO_REAR,            RG_BUY_RED_POTION_30,    { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x15, 0x08),         SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_DEKU_SCRUB_GROTTO_FRONT] =           Location::GrottoScrub(RC_ZR_DEKU_SCRUB_GROTTO_FRONT,           RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_ZORAS_RIVER,           ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x08, 0xEB), 0x3A, "Deku Scrub Grotto Front",           "ZR Deku Scrub Grotto Front",           RHT_ZR_DEKU_SCRUB_GROTTO_FRONT,           RG_BUY_GREEN_POTION,     { Category::cDekuScrub },  SpoilerCollectionCheck::Scrub(0x15, 0x09),         SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    // Zoras Domain
    locationTable[RC_ZD_CHEST] =                                   Location::Chest(RC_ZD_CHEST,                             RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_DOMAIN,          ACTOR_EN_BOX,    SCENE_ZORAS_DOMAIN,              -18496,                       0x00, "Chest",                             "ZD Chest",                             RHT_ZD_CHEST,                             RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN,   true);
    locationTable[RC_ZD_DIVING_MINIGAME] =                          Location::Base(RC_ZD_DIVING_MINIGAME,                   RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_DOMAIN,          ACTOR_ID_MAX,    SCENE_ZORAS_DOMAIN,              0x00,                         0x37, "Diving Minigame",                   "ZD Diving Minigame",                   RHT_ZD_DIVING_MINIGAME,                   RG_PROGRESSIVE_SCALE,    {},                         SpoilerCollectionCheck::EventChkInf(0x38),        SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN,   true);
    locationTable[RC_ZD_KING_ZORA_THAWED] =                         Location::Base(RC_ZD_KING_ZORA_THAWED,                  RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_DOMAIN,          ACTOR_ID_MAX,    SCENE_ZORAS_DOMAIN,              0x00,                         0x2D, "King Zora Thawed",                  "ZD King Zora Thawed",                  RHT_ZD_KING_ZORA_THAWED,                  RG_ZORA_TUNIC,           {},                         SpoilerCollectionCheck::InfTable(0x13, 0x01),     SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN,   true);
    locationTable[RC_ZD_TRADE_PRESCRIPTION] =                       Location::Base(RC_ZD_TRADE_PRESCRIPTION,                RCQUEST_BOTH, RCTYPE_ADULT_TRADE, RCAREA_ZORAS_DOMAIN,          ACTOR_ID_MAX,    SCENE_ZORAS_DOMAIN,              0x00,                         0x24, "Trade Prescription",                "ZD Trade Prescription",                RHT_ZD_TRADE_PRESCRIPTION,                RG_EYEBALL_FROG,         { Category::cAdultTrade },  SpoilerCollectionCheck::Chest(0x58, 0x1F),        SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN,   true);
    // Zora's Fountain
    locationTable[RC_ZF_ICEBERC_FREESTANDING_POH] =          Location::Collectable(RC_ZF_ICEBERC_FREESTANDING_POH,          RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_FOUNTAIN,        ACTOR_EN_ITEM00, SCENE_ZORAS_FOUNTAIN,            262,                          0x01, "Iceberg Freestanding PoH",          "ZF Iceberg Freestanding PoH",          RHT_ZF_ICEBERG_FREESTANDING_POH,          RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN,   true);
    locationTable[RC_ZF_BOTTOM_FREESTANDING_POH] =           Location::Collectable(RC_ZF_BOTTOM_FREESTANDING_POH,           RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_ZORAS_FOUNTAIN,        ACTOR_EN_ITEM00, SCENE_ZORAS_FOUNTAIN,            5126,                         0x14, "Bottom Freestanding PoH",           "ZF Bottom Freestanding PoH",           RHT_ZF_BOTTOM_FREESTANDING_POH,           RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN,   true);
    // Lon Lon Ranch
    locationTable[RC_LLR_TALONS_CHICKENS] =                         Location::Base(RC_LLR_TALONS_CHICKENS,                  RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LON_LON_RANCH,         ACTOR_ID_MAX,    SCENE_LON_LON_BUILDINGS,         0x00,                         0x14, "Talons Chickens",                   "LLR Talons Chickens",                  RHT_LLR_TALONS_CHICKENS,                  RG_BOTTLE_WITH_MILK,     {},                         SpoilerCollectionCheck::ItemGetInf(10),           SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH,  true);
    locationTable[RC_LLR_FREESTANDING_POH] =                 Location::Collectable(RC_LLR_FREESTANDING_POH,                 RCQUEST_BOTH, RCTYPE_STANDARD,    RCAREA_LON_LON_RANCH,         ACTOR_EN_ITEM00, SCENE_LON_LON_BUILDINGS,         262,                          0x01, "Freestanding PoH",                  "LLR Freestanding PoH",                 RHT_LLR_FREESTANDING_POH,                 RG_PIECE_OF_HEART,       {},                                                                           SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH,  true);
    locationTable[RC_LLR_DEKU_SCRUB_GROTTO_LEFT] =           Location::GrottoScrub(RC_LLR_DEKU_SCRUB_GROTTO_LEFT,           RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LON_LON_RANCH,         ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x00, 0xFC), 0x30, "Deku Scrub Grotto Left",            "LLR Deku Scrub Grotto Left",           RHT_LLR_DEKU_SCRUB_GROTTO_LEFT,           RG_BUY_DEKU_NUT_5,       { Category::cDekuScrub },   SpoilerCollectionCheck::Scrub(0x26, 0x01),        SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);
    locationTable[RC_LLR_DEKU_SCRUB_GROTTO_RIGHT] =          Location::GrottoScrub(RC_LLR_DEKU_SCRUB_GROTTO_RIGHT,          RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LON_LON_RANCH,         ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x05, 0xFC), 0x37, "Deku Scrub Grotto Right",           "LLR Deku Scrub Grotto Right",          RHT_LLR_DEKU_SCRUB_GROTTO_RIGHT,          RG_BUY_BOMBS_535,        { Category::cDekuScrub },   SpoilerCollectionCheck::Scrub(0x26, 0x06),        SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);
    locationTable[RC_LLR_DEKU_SCRUB_GROTTO_CENTER] =         Location::GrottoScrub(RC_LLR_DEKU_SCRUB_GROTTO_CENTER,         RCQUEST_BOTH, RCTYPE_SCRUB,       RCAREA_LON_LON_RANCH,         ACTOR_EN_DNS,    SCENE_GROTTOS,                   TWO_ACTOR_PARAMS(0x03, 0xFC), 0x33, "Deku Scrub Grotto Center",          "LLR Deku Scrub Grotto Center",         RHT_LLR_DEKU_SCRUB_GROTTO_CENTER,         RG_BUY_DEKU_SEEDS_30,    { Category::cDekuScrub },   SpoilerCollectionCheck::Scrub(0x26, 0x04),        SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);

    // Dungeons
    //            Randomizer Check                                             Randomizer Check                           Quest            Type                Area              Actor ID      Scene ID         Params Flags Short Name                       Spoiler Name                              Hint Text Key                               Vanilla Item              Categories                     Spoiler Collection Check                   Collection Check Group                                Vanilla Progression
    // Deku Tree Vanilla
    locationTable[RC_DEKU_TREE_MAP_CHEST] =                    Location::Chest(RC_DEKU_TREE_MAP_CHEST,                    RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 2083,  0x03, "Map Chest",                     "Deku Tree Map Chest",                    RHT_DEKU_TREE_MAP_CHEST,                    RG_DEKU_TREE_MAP,         { Category::cVanillaMap },                                                SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE, true);
    locationTable[RC_DEKU_TREE_COMPASS_CHEST] =                Location::Chest(RC_DEKU_TREE_COMPASS_CHEST,                RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 2050,  0x02, "Compass Chest",                 "Deku Tree Compass Chest",                RHT_DEKU_TREE_COMPASS_CHEST,                RG_DEKU_TREE_COMPASS,     { Category::cVanillaCompass },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE, true);
    locationTable[RC_DEKU_TREE_COMPASS_ROOM_SIDE_CHEST] =      Location::Chest(RC_DEKU_TREE_COMPASS_ROOM_SIDE_CHEST,      RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 22790, 0x06, "Compass Room Side Chest",       "Deku Tree Compass Room Side Chest",      RHT_DEKU_TREE_COMPASS_ROOM_SIDE_CHEST,      RG_RECOVERY_HEART,        {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_BASEMENT_CHEST] =               Location::Chest(RC_DEKU_TREE_BASEMENT_CHEST,               RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 22788, 0x04, "Basement Chest",                "Deku Tree Basement Chest",               RHT_DEKU_TREE_BASEMENT_CHEST,               RG_RECOVERY_HEART,        {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_SLINGSHOT_CHEST] =              Location::Chest(RC_DEKU_TREE_SLINGSHOT_CHEST,              RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 161,   0x01, "Slingshot Chest",               "Deku Tree Slingshot Chest",              RHT_DEKU_TREE_SLINGSHOT_CHEST,              RG_PROGRESSIVE_SLINGSHOT, {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE, true);
    locationTable[RC_DEKU_TREE_SLINGSHOT_ROOM_SIDE_CHEST] =    Location::Chest(RC_DEKU_TREE_SLINGSHOT_ROOM_SIDE_CHEST,    RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 22789, 0x05, "Slingshot Room Side Chest",     "Deku Tree Slingshot Room Side Chest",    RHT_DEKU_TREE_SLINGSHOT_ROOM_SIDE_CHEST,    RG_RECOVERY_HEART,        {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    // Deku Tree MQ
    locationTable[RC_DEKU_TREE_MQ_MAP_CHEST] =                 Location::Chest(RC_DEKU_TREE_MQ_MAP_CHEST,                 RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 2083,   0x03, "MQ Map Chest",                 "Deku Tree MQ Map Chest",                 RHT_DEKU_TREE_MQ_MAP_CHEST,                 RG_DEKU_TREE_MAP,         { Category::cVanillaMap },                                                SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE, true);
    locationTable[RC_DEKU_TREE_MQ_COMPASS_CHEST] =             Location::Chest(RC_DEKU_TREE_MQ_COMPASS_CHEST,             RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 2049,   0x01, "MQ Compass Chest",             "Deku Tree MQ Compass Chest",             RHT_DEKU_TREE_MQ_COMPASS_CHEST,             RG_DEKU_TREE_COMPASS,     { Category::cVanillaCompass },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE, true);
    locationTable[RC_DEKU_TREE_MQ_SLINGSHOT_CHEST] =           Location::Chest(RC_DEKU_TREE_MQ_SLINGSHOT_CHEST,           RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 4262,   0x06, "MQ Slingshot Chest",           "Deku Tree MQ Slingshot Chest",           RHT_DEKU_TREE_MQ_SLINGSHOT_CHEST,           RG_PROGRESSIVE_SLINGSHOT, {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE, true);
    locationTable[RC_DEKU_TREE_MQ_SLINGSHOT_ROOM_BACK_CHEST] = Location::Chest(RC_DEKU_TREE_MQ_SLINGSHOT_ROOM_BACK_CHEST, RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, -31454, 0x02, "MQ Slingshot Room Back Chest", "Deku Tree MQ Slingshot Room Back Chest", RHT_DEKU_TREE_MQ_SLINGSHOT_ROOM_BACK_CHEST, RG_DEKU_SHIELD,           {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_MQ_BASEMENT_CHEST] =            Location::Chest(RC_DEKU_TREE_MQ_BASEMENT_CHEST,            RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, -31452, 0x04, "MQ Basement Chest",            "Deku Tree MQ Basement Chest",            RHT_DEKU_TREE_MQ_BASEMENT_CHEST,            RG_DEKU_SHIELD,           {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_MQ_BEFORE_SPINNING_LOG_CHEST] = Location::Chest(RC_DEKU_TREE_MQ_BEFORE_SPINNING_LOG_CHEST, RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 22789,  0x05, "MQ Before Spinning Log Chest", "Deku Tree MQ Before Spinning Log Chest", RHT_DEKU_TREE_MQ_BEFORE_SPINNING_LOG_CHEST, RG_RECOVERY_HEART,        {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_MQ_AFTER_SPINNING_LOG_CHEST] =  Location::Chest(RC_DEKU_TREE_MQ_AFTER_SPINNING_LOG_CHEST,  RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_DEKU_TREE, ACTOR_EN_BOX, SCENE_DEKU_TREE, 23200,  0x00, "MQ After Spinning Log Chest",  "Deku Tree MQ After Spinning Log Chest",  RHT_DEKU_TREE_MQ_AFTER_SPINNING_LOG_CHEST,  RG_PURPLE_RUPEE,          {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_MQ_DEKU_SCRUB] =                 Location::Base(RC_DEKU_TREE_MQ_DEKU_SCRUB,                RCQUEST_MQ,      RCTYPE_SCRUB,       RCAREA_DEKU_TREE, ACTOR_EN_DNS, SCENE_DEKU_TREE, 0x04,   0x34, "MQ Deku Scrub",                "Deku Tree MQ Deku Scrub",                RHT_DEKU_TREE_MQ_DEKU_SCRUB,                RG_BUY_DEKU_SHIELD,       { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x00, 0x05), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);

    //            Randomizer Check                                                                 Randomizer Check                                                Quest            Type                Area                    Actor ID      Scene ID                    Params Flags Short Name                                     Spoiler Name                                                Hint Text Key                                                    Vanilla Item                Categories                     Spoiler Collection Check                   Collection Check Group                                      Vanilla Progression
    // Dodongo's Cavern Shared
    locationTable[RC_DODONGOS_CAVERN_BOSS_ROOM_CHEST] =                            Location::Chest(RC_DODONGOS_CAVERN_BOSS_ROOM_CHEST,                             RCQUEST_BOTH,    RCTYPE_STANDARD,    RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN_BOSS, 20512, 0x00, "Boss Room Chest",                             "Dodongos Cavern Boss Room Chest",                          RHT_DODONGOS_CAVERN_BOSS_ROOM_CHEST,                             RG_BOMBS_5,                 {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    // Dodongo's Cavern Vanilla
    locationTable[RC_DODONGOS_CAVERN_MAP_CHEST] =                                  Location::Chest(RC_DODONGOS_CAVERN_MAP_CHEST,                                   RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      2088,  0x08, "Map Chest",                                   "Dodongos Cavern Map Chest",                                RHT_DODONGOS_CAVERN_MAP_CHEST,                                   RG_DODONGOS_CAVERN_MAP,     { Category::cVanillaMap },                                                SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN, true);
    locationTable[RC_DODONGOS_CAVERN_COMPASS_CHEST] =                              Location::Chest(RC_DODONGOS_CAVERN_COMPASS_CHEST,                               RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      2053,  0x05, "Compass Chest",                               "Dodongos Cavern Compass Chest",                            RHT_DODONGOS_CAVERN_COMPASS_CHEST,                               RG_DODONGOS_CAVERN_COMPASS, { Category::cVanillaCompass },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN, true);
    locationTable[RC_DODONGOS_CAVERN_BOMB_FLOWER_PLATFORM_CHEST] =                 Location::Chest(RC_DODONGOS_CAVERN_BOMB_FLOWER_PLATFORM_CHEST,                  RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      22982, 0x06, "Bomb Flower Platform Chest",                  "Dodongos Cavern Bomb Flower Platform Chest",               RHT_DODONGOS_CAVERN_BOMB_FLOWER_PLATFORM_CHEST,                  RG_RED_RUPEE,               {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_BOMB_BAG_CHEST] =                             Location::Chest(RC_DODONGOS_CAVERN_BOMB_BAG_CHEST,                              RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      1604,  0x04, "Bomb Bag Chest",                              "Dodongos Cavern Bomb Bag Chest",                           RHT_DODONGOS_CAVERN_BOMB_BAG_CHEST,                              RG_PROGRESSIVE_BOMB_BAG,    {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN, true);
    locationTable[RC_DODONGOS_CAVERN_END_OF_BRIDGE_CHEST] =                        Location::Chest(RC_DODONGOS_CAVERN_END_OF_BRIDGE_CHEST,                         RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      21802, 0x0A, "End Of Bridge Chest",                         "Dodongos Cavern End Of Bridge Chest",                      RHT_DODONGOS_CAVERN_END_OF_BRIDGE_CHEST,                         RG_DEKU_SHIELD,             {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_DEKU_SCRUB_NEAR_BOMB_BAG_LEFT] =               Location::Base(RC_DODONGOS_CAVERN_DEKU_SCRUB_NEAR_BOMB_BAG_LEFT,               RCQUEST_VANILLA, RCTYPE_SCRUB,       RCAREA_DODONGOS_CAVERN, ACTOR_EN_DNS, SCENE_DODONGOS_CAVERN,      0x00,  0x30, "Deku Scrub Near Bomb Bag Left",               "Dodongos Cavern Deku Scrub Near Bomb Bag Left",            RHT_DODONGOS_CAVERN_DEKU_SCRUB_NEAR_BOMB_BAG_LEFT,               RG_BUY_DEKU_NUT_5,          { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x01, 0x01), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_DEKU_SCRUB_SIDE_ROOM_NEAR_DODONGOS] =          Location::Base(RC_DODONGOS_CAVERN_DEKU_SCRUB_SIDE_ROOM_NEAR_DODONGOS,          RCQUEST_VANILLA, RCTYPE_SCRUB,       RCAREA_DODONGOS_CAVERN, ACTOR_EN_DNS, SCENE_DODONGOS_CAVERN,      0x01,  0x31, "Deku Scrub Side Room Near Dodongos",          "Dodongos Cavern Deku Scrub Side Room Near Dodongos",       RHT_DODONGOS_CAVERN_DEKU_SCRUB_SIDE_ROOM_NEAR_DODONGOS,          RG_BUY_DEKU_STICK_1,        { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x01, 0x02), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_DEKU_SCRUB_NEAR_BOMB_BAG_RIGHT] =              Location::Base(RC_DODONGOS_CAVERN_DEKU_SCRUB_NEAR_BOMB_BAG_RIGHT,              RCQUEST_VANILLA, RCTYPE_SCRUB,       RCAREA_DODONGOS_CAVERN, ACTOR_EN_DNS, SCENE_DODONGOS_CAVERN,      0x03,  0x33, "Deku Scrub Near Bomb Bag Right",              "Dodongos Cavern Deku Scrub Near Bomb Bag Right",           RHT_DODONGOS_CAVERN_DEKU_SCRUB_NEAR_BOMB_BAG_RIGHT,              RG_BUY_DEKU_SEEDS_30,       { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x01, 0x04), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_DEKU_SCRUB_LOBBY] =                            Location::Base(RC_DODONGOS_CAVERN_DEKU_SCRUB_LOBBY,                            RCQUEST_VANILLA, RCTYPE_SCRUB,       RCAREA_DODONGOS_CAVERN, ACTOR_EN_DNS, SCENE_DODONGOS_CAVERN,      0x04,  0x34, "Deku Scrub Lobby",                            "Dodongos Cavern Deku Scrub Lobby",                         RHT_DODONGOS_CAVERN_DEKU_SCRUB_LOBBY,                            RG_BUY_DEKU_SHIELD,         { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x01, 0x05), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    // Dodongo's Cavern MQ
    locationTable[RC_DODONGOS_CAVERN_MQ_MAP_CHEST] =                               Location::Chest(RC_DODONGOS_CAVERN_MQ_MAP_CHEST,                                RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      2080,  0x00, "MQ Map Chest",                                "Dodongos Cavern MQ Map Chest",                             RHT_DODONGOS_CAVERN_MQ_MAP_CHEST,                                RG_DODONGOS_CAVERN_MAP,     { Category::cVanillaMap },                                                SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN, true);
    locationTable[RC_DODONGOS_CAVERN_MQ_BOMB_BAG_CHEST] =                          Location::Chest(RC_DODONGOS_CAVERN_MQ_BOMB_BAG_CHEST,                           RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      1604,  0x04, "MQ Bomb Bag Chest",                           "Dodongos Cavern MQ Bomb Bag Chest",                        RHT_DODONGOS_CAVERN_MQ_BOMB_BAG_CHEST,                           RG_PROGRESSIVE_BOMB_BAG,    {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN, true);
    locationTable[RC_DODONGOS_CAVERN_MQ_COMPASS_CHEST] =                           Location::Chest(RC_DODONGOS_CAVERN_MQ_COMPASS_CHEST,                            RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      6149,  0x05, "MQ Compass Chest",                            "Dodongos Cavern MQ Compass Chest",                         RHT_DODONGOS_CAVERN_MQ_COMPASS_CHEST,                            RG_DODONGOS_CAVERN_COMPASS, { Category::cVanillaCompass },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN, true);
    locationTable[RC_DODONGOS_CAVERN_MQ_LARVAE_ROOM_CHEST] =                       Location::Chest(RC_DODONGOS_CAVERN_MQ_LARVAE_ROOM_CHEST,                        RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      29986, 0x02, "MQ Larvae Room Chest",                        "Dodongos Cavern MQ Larvae Room Chest",                     RHT_DODONGOS_CAVERN_MQ_LARVAE_ROOM_CHEST,                        RG_DEKU_SHIELD,             {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_TORCH_PUZZLE_ROOM_CHEST] =                 Location::Chest(RC_DODONGOS_CAVERN_MQ_TORCH_PUZZLE_ROOM_CHEST,                  RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      22947, 0x03, "MQ Torch Puzzle Room Chest",                  "Dodongos Cavern MQ Torch Puzzle Room Chest",               RHT_DODONGOS_CAVERN_MQ_TORCH_PUZZLE_ROOM_CHEST,                  RG_BLUE_RUPEE,              {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_UNDER_GRAVE_CHEST] =                       Location::Chest(RC_DODONGOS_CAVERN_MQ_UNDER_GRAVE_CHEST,                        RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_DODONGOS_CAVERN, ACTOR_EN_BOX, SCENE_DODONGOS_CAVERN,      21825, 0x01, "MQ Under Grave Chest",                        "Dodongos Cavern MQ Under Grave Chest",                     RHT_DODONGOS_CAVERN_MQ_UNDER_GRAVE_CHEST,                        RG_HYLIAN_SHIELD,           {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_LOBBY_REAR] =                    Location::Base(RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_LOBBY_REAR,                    RCQUEST_MQ,      RCTYPE_SCRUB,       RCAREA_DODONGOS_CAVERN, ACTOR_EN_DNS, SCENE_DODONGOS_CAVERN,      0x01,  0x31, "MQ Deku Scrub Lobby Rear",                    "Dodongos Cavern Deku Scrub Lobby Rear",                    RHT_DODONGOS_CAVERN_MQ_DEKU_SCRUB_LOBBY_REAR,                    RG_BUY_DEKU_STICK_1,        { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x01, 0x02), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_LOBBY_FRONT] =                   Location::Base(RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_LOBBY_FRONT,                   RCQUEST_MQ,      RCTYPE_SCRUB,       RCAREA_DODONGOS_CAVERN, ACTOR_EN_DNS, SCENE_DODONGOS_CAVERN,      0x03,  0x33, "MQ Deku Scrub Lobby Front",                   "Dodongos Cavern Deku Scrub Lobby Front",                   RHT_DODONGOS_CAVERN_MQ_DEKU_SCRUB_LOBBY_FRONT,                   RG_BUY_DEKU_SEEDS_30,       { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x01, 0x04), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_STAIRCASE] =                     Location::Base(RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_STAIRCASE,                     RCQUEST_MQ,      RCTYPE_SCRUB,       RCAREA_DODONGOS_CAVERN, ACTOR_EN_DNS, SCENE_DODONGOS_CAVERN,      0x04,  0x34, "MQ Deku Scrub Staircase",                     "Dodongos Cavern Deku Scrub Staircase",                     RHT_DODONGOS_CAVERN_MQ_DEKU_SCRUB_STAIRCASE,                     RG_BUY_DEKU_SHIELD,         { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x01, 0x05), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_SIDE_ROOM_NEAR_LOWER_LIZALFOS] = Location::Base(RC_DODONGOS_CAVERN_MQ_DEKU_SCRUB_SIDE_ROOM_NEAR_LOWER_LIZALFOS, RCQUEST_MQ,      RCTYPE_SCRUB,       RCAREA_DODONGOS_CAVERN, ACTOR_EN_DNS, SCENE_DODONGOS_CAVERN,      0x07,  0x39, "MQ Deku Scrub Side Room Near Lower Lizalfos", "Dodongos Cavern Deku Scrub Side Room Near Lower Lizalfos", RHT_DODONGOS_CAVERN_MQ_DEKU_SCRUB_SIDE_ROOM_NEAR_LOWER_LIZALFOS, RG_BUY_RED_POTION_30,       { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x01, 0x08), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);

    //            Randomizer Check                                                       Randomizer Check                                     Quest            Type                Area                     Actor ID      Scene ID         Params  Flags Short Name                         Spoiler Name                                        Hint Text Key                                         Vanilla Item                 Categories                     Spoiler Collection Check                   Collection Check Group                                      Vanilla Progression
    // Jabu-Jabu's Belly Vanilla
    locationTable[RC_JABU_JABUS_BELLY_MAP_CHEST] =                       Location::Chest(RC_JABU_JABUS_BELLY_MAP_CHEST,                       RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, 6178,   0x02, "Map Chest",                       "Jabu Jabus Belly Map Chest",                       RHT_JABU_JABUS_BELLY_MAP_CHEST,                       RG_JABU_JABUS_BELLY_MAP,     { Category::cVanillaMap },                                                SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY, true);
    locationTable[RC_JABU_JABUS_BELLY_COMPASS_CHEST] =                   Location::Chest(RC_JABU_JABUS_BELLY_COMPASS_CHEST,                   RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, -18428, 0x04, "Compass Chest",                   "Jabu Jabus Belly Compass Chest",                   RHT_JABU_JABUS_BELLY_COMPASS_CHEST,                   RG_JABU_JABUS_BELLY_COMPASS, { Category::cVanillaCompass },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY, true);
    locationTable[RC_JABU_JABUS_BELLY_BOOMERANG_CHEST] =                 Location::Chest(RC_JABU_JABUS_BELLY_BOOMERANG_CHEST,                 RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, 4289,   0x01, "Boomerang Chest",                 "Jabu Jabus Belly Boomerang Chest",                 RHT_JABU_JABUS_BELLY_BOOMERANG_CHEST,                 RG_BOOMERANG,                {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY, true);
    locationTable[RC_JABU_JABUS_BELLY_DEKU_SCRUB] =                      Location::Base(RC_JABU_JABUS_BELLY_DEKU_SCRUB,                       RCQUEST_VANILLA, RCTYPE_SCRUB,       RCAREA_JABU_JABUS_BELLY, ACTOR_EN_DNS, SCENE_JABU_JABU, 0x00,   0x30, "Deku Scrub",                      "Jabu Jabus Belly Deku Scrub",                      RHT_JABU_JABUS_BELLY_DEKU_SCRUB,                      RG_BUY_DEKU_NUT_5,           { Category::cDekuScrub },      SpoilerCollectionCheck::Scrub(0x02, 0x01), SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    // Jabu-Jabu's Belly MQ
    locationTable[RC_JABU_JABUS_BELLY_MQ_FIRST_ROOM_SIDE_CHEST] =        Location::Chest(RC_JABU_JABUS_BELLY_MQ_FIRST_ROOM_SIDE_CHEST,        RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, -32699, 0x05, "MQ First Room Side Chest",        "Jabu Jabus Belly MQ First Room Side Chest",        RHT_JABU_JABUS_BELLY_MQ_FIRST_ROOM_SIDE_CHEST,        RG_DEKU_NUTS_5,              {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_MAP_CHEST] =                    Location::Chest(RC_JABU_JABUS_BELLY_MQ_MAP_CHEST,                    RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, -18397, 0x03, "MQ Map Chest",                    "Jabu Jabus Belly MQ Map Chest",                    RHT_JABU_JABUS_BELLY_MQ_MAP_CHEST,                    RG_JABU_JABUS_BELLY_MAP,     { Category::cVanillaMap },                                                SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY, true);
    locationTable[RC_JABU_JABUS_BELLY_MQ_SECOND_ROOM_LOWER_CHEST] =      Location::Chest(RC_JABU_JABUS_BELLY_MQ_SECOND_ROOM_LOWER_CHEST,      RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, 20546,  0x02, "MQ Second Room Lower Chest",      "Jabu Jabus Belly MQ Second Room Lower Chest",      RHT_JABU_JABUS_BELLY_MQ_SECOND_ROOM_LOWER_CHEST,      RG_DEKU_NUTS_5,              {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_COMPASS_CHEST] =                Location::Chest(RC_JABU_JABUS_BELLY_MQ_COMPASS_CHEST,                RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, -18432, 0x00, "MQ Compass Chest",                "Jabu Jabus Belly MQ Compass Chest",                RHT_JABU_JABUS_BELLY_MQ_COMPASS_CHEST,                RG_JABU_JABUS_BELLY_COMPASS, { Category::cVanillaCompass },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY, true);
    locationTable[RC_JABU_JABUS_BELLY_MQ_SECOND_ROOM_UPPER_CHEST] =      Location::Chest(RC_JABU_JABUS_BELLY_MQ_SECOND_ROOM_UPPER_CHEST,      RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, -30457, 0x07, "MQ Second Room Upper Chest",      "Jabu Jabus Belly MQ Second Room Upper Chest",      RHT_JABU_JABUS_BELLY_MQ_SECOND_ROOM_UPPER_CHEST,      RG_RECOVERY_HEART,           {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_BASEMENT_NEAR_SWITCHES_CHEST] = Location::Chest(RC_JABU_JABUS_BELLY_MQ_BASEMENT_NEAR_SWITCHES_CHEST, RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, -32696, 0x08, "MQ Basement Near Switches Chest", "Jabu Jabus Belly MQ Basement Near Switches Chest", RHT_JABU_JABUS_BELLY_MQ_BASEMENT_NEAR_SWITCHES_CHEST, RG_DEKU_NUTS_5,              {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_BASEMENT_NEAR_VINES_CHEST] =    Location::Chest(RC_JABU_JABUS_BELLY_MQ_BASEMENT_NEAR_VINES_CHEST,    RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, -32668, 0x04, "MQ Basement Near Vines Chest",    "Jabu Jabus Belly MQ Basement Near Vines Chest",    RHT_JABU_JABUS_BELLY_MQ_BASEMENT_NEAR_VINES_CHEST,    RG_BOMBCHU_10,               {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_NEAR_BOSS_CHEST] =              Location::Chest(RC_JABU_JABUS_BELLY_MQ_NEAR_BOSS_CHEST,              RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, -31446, 0x0A, "MQ Near Boss Chest",              "Jabu Jabus Belly MQ Near Boss Chest",              RHT_JABU_JABUS_BELLY_MQ_NEAR_BOSS_CHEST,              RG_DEKU_SHIELD,              {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_FALLING_LIKE_LIKE_ROOM_CHEST] = Location::Chest(RC_JABU_JABUS_BELLY_MQ_FALLING_LIKE_LIKE_ROOM_CHEST, RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, 28905,  0x09, "MQ Falling Like Like Room Chest", "Jabu Jabus Belly MQ Falling Like Like Room Chest", RHT_JABU_JABUS_BELLY_MQ_FALLING_LIKE_LIKE_ROOM_CHEST, RG_DEKU_STICK_1,             {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_BOOMERANG_ROOM_SMALL_CHEST] =   Location::Chest(RC_JABU_JABUS_BELLY_MQ_BOOMERANG_ROOM_SMALL_CHEST,   RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, 20545,  0x01, "MQ Boomerang Room Small Chest",   "Jabu Jabus Belly MQ Boomerang Room Small Chest",   RHT_JABU_JABUS_BELLY_MQ_BOOMERANG_ROOM_SMALL_CHEST,   RG_DEKU_NUTS_5,              {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_BOOMERANG_CHEST] =              Location::Chest(RC_JABU_JABUS_BELLY_MQ_BOOMERANG_CHEST,              RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_JABU_JABUS_BELLY, ACTOR_EN_BOX, SCENE_JABU_JABU, 4294,   0x06, "MQ Boomerang Chest",              "Jabu Jabus Belly MQ Boomerang Chest",              RHT_JABU_JABUS_BELLY_MQ_BOOMERANG_CHEST,              RG_BOOMERANG,                {},                                                                       SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY, true);

    //            Randomizer Check                                                           Randomizer Check                                         Quest            Type                Area                  Actor ID      Scene ID             Params  Flags Short Name                                Spoiler Name                                            Hint Text Key                                             Vanilla Item                Categories                      Collection Check Group                                    Vanilla Progression
    // Forest Temple Vanilla
    locationTable[RC_FOREST_TEMPLE_FIRST_ROOM_CHEST] =                       Location::Chest(RC_FOREST_TEMPLE_FIRST_ROOM_CHEST,                       RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 22595,  0x03, "First Room Chest",                       "Forest Temple First Room Chest",                       RHT_FOREST_TEMPLE_FIRST_ROOM_CHEST,                       RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_FIRST_STALFOS_CHEST] =                    Location::Chest(RC_FOREST_TEMPLE_FIRST_STALFOS_CHEST,                    RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 30784,  0x00, "First Stalfos Chest",                    "Forest Temple First Stalfos Chest",                    RHT_FOREST_TEMPLE_FIRST_STALFOS_CHEST,                    RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_RAISED_ISLAND_COURTYARD_CHEST] =          Location::Chest(RC_FOREST_TEMPLE_RAISED_ISLAND_COURTYARD_CHEST,          RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 22789,  0x05, "Raised Island Courtyard Chest",          "Forest Temple Raised Island Courtyard Chest",          RHT_FOREST_TEMPLE_RAISED_ISLAND_COURTYARD_CHEST,          RG_RECOVERY_HEART,          {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_MAP_CHEST] =                              Location::Chest(RC_FOREST_TEMPLE_MAP_CHEST,                              RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 6177,   0x01, "Map Chest",                              "Forest Temple Map Chest",                              RHT_FOREST_TEMPLE_MAP_CHEST,                              RG_FOREST_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_WELL_CHEST] =                             Location::Chest(RC_FOREST_TEMPLE_WELL_CHEST,                             RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 22601,  0x09, "Well Chest",                             "Forest Temple Well Chest",                             RHT_FOREST_TEMPLE_WELL_CHEST,                             RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_FALLING_CEILING_ROOM_CHEST] =             Location::Chest(RC_FOREST_TEMPLE_FALLING_CEILING_ROOM_CHEST,             RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 22855,  0x07, "Falling Ceiling Room Chest",             "Forest Temple Falling Ceiling Room Chest",             RHT_FOREST_TEMPLE_FALLING_CEILING_ROOM_CHEST,             RG_ARROWS_10,               {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_EYE_SWITCH_CHEST] =                       Location::Chest(RC_FOREST_TEMPLE_EYE_SWITCH_CHEST,                       RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, -30364, 0x04, "Eye Switch Chest",                       "Forest Temple Eye Switch Chest",                       RHT_FOREST_TEMPLE_EYE_SWITCH_CHEST,                       RG_ARROWS_30,               {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_BOSS_KEY_CHEST] =                         Location::Chest(RC_FOREST_TEMPLE_BOSS_KEY_CHEST,                         RCQUEST_VANILLA, RCTYPE_BOSS_KEY,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 10222,  0x0E, "Boss Key Chest",                         "Forest Temple Boss Key Chest",                         RHT_FOREST_TEMPLE_BOSS_KEY_CHEST,                         RG_FOREST_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_FLOORMASTER_CHEST] =                      Location::Chest(RC_FOREST_TEMPLE_FLOORMASTER_CHEST,                      RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 30786,  0x02, "Floormaster Chest",                      "Forest Temple Floormaster Chest",                      RHT_FOREST_TEMPLE_FLOORMASTER_CHEST,                      RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_BOW_CHEST] =                              Location::Chest(RC_FOREST_TEMPLE_BOW_CHEST,                              RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, -20340, 0x0C, "Bow Chest",                              "Forest Temple Bow Chest",                              RHT_FOREST_TEMPLE_BOW_CHEST,                              RG_PROGRESSIVE_BOW,         {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_RED_POE_CHEST] =                          Location::Chest(RC_FOREST_TEMPLE_RED_POE_CHEST,                          RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 30797,  0x0D, "Red Poe Chest",                          "Forest Temple Red Poe Chest",                          RHT_FOREST_TEMPLE_RED_POE_CHEST,                          RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_BLUE_POE_CHEST] =                         Location::Chest(RC_FOREST_TEMPLE_BLUE_POE_CHEST,                         RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 6159,   0x0F, "Blue Poe Chest",                         "Forest Temple Blue Poe Chest",                         RHT_FOREST_TEMPLE_BLUE_POE_CHEST,                         RG_FOREST_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_BASEMENT_CHEST] =                         Location::Chest(RC_FOREST_TEMPLE_BASEMENT_CHEST,                         RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 22827,  0x0B, "Basement Chest",                         "Forest Temple Basement Chest",                         RHT_FOREST_TEMPLE_BASEMENT_CHEST,                         RG_ARROWS_5,                {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    // Forest Temple MQ
    locationTable[RC_FOREST_TEMPLE_MQ_FIRST_ROOM_CHEST] =                    Location::Chest(RC_FOREST_TEMPLE_MQ_FIRST_ROOM_CHEST,                    RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, -30653, 0x03, "MQ First Room Chest",                    "Forest Temple MQ First Room Chest",                    RHT_FOREST_TEMPLE_MQ_FIRST_ROOM_CHEST,                    RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_MQ_WOLFOS_CHEST] =                        Location::Chest(RC_FOREST_TEMPLE_MQ_WOLFOS_CHEST,                        RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 30784,  0x00, "MQ Wolfos Chest",                        "Forest Temple MQ Wolfos Chest",                        RHT_FOREST_TEMPLE_MQ_WOLFOS_CHEST,                        RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_MQ_BOW_CHEST] =                           Location::Chest(RC_FOREST_TEMPLE_MQ_BOW_CHEST,                           RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, -20340, 0x0C, "MQ Bow Chest",                           "Forest Temple MQ Bow Chest",                           RHT_FOREST_TEMPLE_MQ_BOW_CHEST,                           RG_PROGRESSIVE_BOW,         {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_MQ_RAISED_ISLAND_COURTYARD_LOWER_CHEST] = Location::Chest(RC_FOREST_TEMPLE_MQ_RAISED_ISLAND_COURTYARD_LOWER_CHEST, RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 22593,  0x01, "MQ Raised Island Courtyard Lower Chest", "Forest Temple MQ Raised Island Courtyard Lower Chest", RHT_FOREST_TEMPLE_MQ_RAISED_ISLAND_COURTYARD_LOWER_CHEST, RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_MQ_RAISED_ISLAND_COURTYARD_UPPER_CHEST] = Location::Chest(RC_FOREST_TEMPLE_MQ_RAISED_ISLAND_COURTYARD_UPPER_CHEST, RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 22597,  0x05, "MQ Raised Island Courtyard Upper Chest", "Forest Temple MQ Raised Island Courtyard Upper Chest", RHT_FOREST_TEMPLE_MQ_RAISED_ISLAND_COURTYARD_UPPER_CHEST, RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_MQ_WELL_CHEST] =                          Location::Chest(RC_FOREST_TEMPLE_MQ_WELL_CHEST,                          RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 22601,  0x09, "MQ Well Chest",                          "Forest Temple MQ Well Chest",                          RHT_FOREST_TEMPLE_MQ_WELL_CHEST,                          RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_MQ_MAP_CHEST] =                           Location::Chest(RC_FOREST_TEMPLE_MQ_MAP_CHEST,                           RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 6189,   0x0D, "MQ Map Chest",                           "Forest Temple MQ Map Chest",                           RHT_FOREST_TEMPLE_MQ_MAP_CHEST,                           RG_FOREST_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_MQ_COMPASS_CHEST] =                       Location::Chest(RC_FOREST_TEMPLE_MQ_COMPASS_CHEST,                       RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 6159,   0x0F, "MQ Compass Chest",                       "Forest Temple MQ Compass Chest",                       RHT_FOREST_TEMPLE_MQ_COMPASS_CHEST,                       RG_FOREST_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_MQ_FALLING_CEILING_ROOM_CHEST] =          Location::Chest(RC_FOREST_TEMPLE_MQ_FALLING_CEILING_ROOM_CHEST,          RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, -30426, 0x06, "MQ Falling Ceiling Room Chest",          "Forest Temple MQ Falling Ceiling Room Chest",          RHT_FOREST_TEMPLE_MQ_FALLING_CEILING_ROOM_CHEST,          RG_ARROWS_5,                {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_MQ_BASEMENT_CHEST] =                      Location::Chest(RC_FOREST_TEMPLE_MQ_BASEMENT_CHEST,                      RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 22827,  0x0B, "MQ Basement Chest",                      "Forest Temple MQ Basement Chest",                      RHT_FOREST_TEMPLE_MQ_BASEMENT_CHEST,                      RG_ARROWS_5,                {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_MQ_REDEAD_CHEST] =                        Location::Chest(RC_FOREST_TEMPLE_MQ_REDEAD_CHEST,                        RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 30786,  0x02, "MQ Redead Chest",                        "Forest Temple MQ Redead Chest",                        RHT_FOREST_TEMPLE_MQ_REDEAD_CHEST,                        RG_FOREST_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);
    locationTable[RC_FOREST_TEMPLE_MQ_BOSS_KEY_CHEST] =                      Location::Chest(RC_FOREST_TEMPLE_MQ_BOSS_KEY_CHEST,                      RCQUEST_MQ,      RCTYPE_BOSS_KEY,    RCAREA_FOREST_TEMPLE, ACTOR_EN_BOX, SCENE_FOREST_TEMPLE, 10222,  0x0E, "MQ Boss Key Chest",                      "Forest Temple MQ Boss Key Chest",                      RHT_FOREST_TEMPLE_MQ_BOSS_KEY_CHEST,                      RG_FOREST_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE, true);

    //            Randomizer Check                                                      Randomizer Check                                    Quest            Type                Area                Actor ID         Scene ID           Params Flags Short Name                             Spoiler Name                                       Hint Text Key                                        Vanilla Item              Categories                      Collection Check Group                                  Vanilla Progression
    // Fire Temple Vanilla
    locationTable[RC_FIRE_TEMPLE_NEAR_BOSS_CHEST] =                     Location::Chest(RC_FIRE_TEMPLE_NEAR_BOSS_CHEST,                     RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22593, 0x01, "Near Boss Chest",                     "Fire Temple Near Boss Chest",                     RHT_FIRE_TEMPLE_NEAR_BOSS_CHEST,                     RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_FLARE_DANCER_CHEST] =                  Location::Chest(RC_FIRE_TEMPLE_FLARE_DANCER_CHEST,                  RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 31936, 0x00, "Flare Dancer Chest",                  "Fire Temple Flare Dancer Chest",                  RHT_FIRE_TEMPLE_FLARE_DANCER_CHEST,                  RG_BOMBS_10,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_BOSS_KEY_CHEST] =                      Location::Chest(RC_FIRE_TEMPLE_BOSS_KEY_CHEST,                      RCQUEST_VANILLA, RCTYPE_BOSS_KEY,    RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 10220, 0x0C, "Boss Key Chest",                      "Fire Temple Boss Key Chest",                      RHT_FIRE_TEMPLE_BOSS_KEY_CHEST,                      RG_FIRE_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_BIG_LAVA_ROOM_BLOCKED_DOOR_CHEST] =    Location::Chest(RC_FIRE_TEMPLE_BIG_LAVA_ROOM_BLOCKED_DOOR_CHEST,    RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22594, 0x02, "Big Lava Room Blocked Door Chest",    "Fire Temple Big Lava Room Blocked Door Chest",    RHT_FIRE_TEMPLE_BIG_LAVA_ROOM_BLOCKED_DOOR_CHEST,    RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_BIG_LAVA_ROOM_LOWER_OPEN_DOOR_CHEST] = Location::Chest(RC_FIRE_TEMPLE_BIG_LAVA_ROOM_LOWER_OPEN_DOOR_CHEST, RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22596, 0x04, "Big Lava Room Lower Open Door Chest", "Fire Temple Big Lava Room Lower Open Door Chest", RHT_FIRE_TEMPLE_BIG_LAVA_ROOM_LOWER_OPEN_DOOR_CHEST, RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_BOULDER_MAZE_LOWER_CHEST] =            Location::Chest(RC_FIRE_TEMPLE_BOULDER_MAZE_LOWER_CHEST,            RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22595, 0x03, "Boulder Maze Lower Chest",            "Fire Temple Boulder Maze Lower Chest",            RHT_FIRE_TEMPLE_BOULDER_MAZE_LOWER_CHEST,            RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_BOULDER_MAZE_UPPER_CHEST] =            Location::Chest(RC_FIRE_TEMPLE_BOULDER_MAZE_UPPER_CHEST,            RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22598, 0x06, "Boulder Maze Upper Chest",            "Fire Temple Boulder Maze Upper Chest",            RHT_FIRE_TEMPLE_BOULDER_MAZE_UPPER_CHEST,            RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_BOULDER_MAZE_SIDE_ROOM_CHEST] =        Location::Chest(RC_FIRE_TEMPLE_BOULDER_MAZE_SIDE_ROOM_CHEST,        RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22600, 0x08, "Boulder Maze Side Room Chest",        "Fire Temple Boulder Maze Side Room Chest",        RHT_FIRE_TEMPLE_BOULDER_MAZE_SIDE_ROOM_CHEST,        RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_BOULDER_MAZE_SHORTCUT_CHEST] =         Location::Chest(RC_FIRE_TEMPLE_BOULDER_MAZE_SHORTCUT_CHEST,         RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22603, 0x0B, "Boulder Maze Shortcut Chest",         "Fire Temple Boulder Maze Shortcut Chest",         RHT_FIRE_TEMPLE_BOULDER_MAZE_SHORTCUT_CHEST,         RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_SCARECROW_CHEST] =                     Location::Chest(RC_FIRE_TEMPLE_SCARECROW_CHEST,                     RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 23245, 0x0D, "Scarecrow Chest",                     "Fire Temple Scarecrow Chest",                     RHT_FIRE_TEMPLE_SCARECROW_CHEST,                     RG_HUGE_RUPEE,            {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_MAP_CHEST] =                           Location::Chest(RC_FIRE_TEMPLE_MAP_CHEST,                           RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 2090,  0x0A, "Map Chest",                           "Fire Temple Map Chest",                           RHT_FIRE_TEMPLE_MAP_CHEST,                           RG_FIRE_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_COMPASS_CHEST] =                       Location::Chest(RC_FIRE_TEMPLE_COMPASS_CHEST,                       RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 2055,  0x07, "Compass Chest",                       "Fire Temple Compass Chest",                       RHT_FIRE_TEMPLE_COMPASS_CHEST,                       RG_FIRE_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_HIGHEST_GORON_CHEST] =                 Location::Chest(RC_FIRE_TEMPLE_HIGHEST_GORON_CHEST,                 RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22601, 0x09, "Highest Goron Chest",                 "Fire Temple Highest Goron Chest",                 RHT_FIRE_TEMPLE_HIGHEST_GORON_CHEST,                 RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_MEGATON_HAMMER_CHEST] =                Location::Chest(RC_FIRE_TEMPLE_MEGATON_HAMMER_CHEST,                RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 421,   0x05, "Megaton Hammer Chest",                "Fire Temple Megaton Hammer Chest",                RHT_FIRE_TEMPLE_MEGATON_HAMMER_CHEST,                RG_MEGATON_HAMMER,        {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    // Fire Temple MQ
    locationTable[RC_FIRE_TEMPLE_MQ_NEAR_BOSS_CHEST] =                  Location::Chest(RC_FIRE_TEMPLE_MQ_NEAR_BOSS_CHEST,                  RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22599, 0x07, "MQ Near Boss Chest",                  "Fire Temple MQ Near Boss Chest",                  RHT_FIRE_TEMPLE_MQ_NEAR_BOSS_CHEST,                  RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_MQ_MEGATON_HAMMER_CHEST] =             Location::Chest(RC_FIRE_TEMPLE_MQ_MEGATON_HAMMER_CHEST,             RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 4512,  0x00, "MQ Megaton Hammer Chest",             "Fire Temple MQ Megaton Hammer Chest",             RHT_FIRE_TEMPLE_MQ_MEGATON_HAMMER_CHEST,             RG_MEGATON_HAMMER,        {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_MQ_COMPASS_CHEST] =                    Location::Chest(RC_FIRE_TEMPLE_MQ_COMPASS_CHEST,                    RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 2059,  0x0B, "MQ Compass Chest",                    "Fire Temple MQ Compass Chest",                    RHT_FIRE_TEMPLE_MQ_COMPASS_CHEST,                    RG_FIRE_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_MQ_LIZALFOS_MAZE_LOWER_CHEST] =        Location::Chest(RC_FIRE_TEMPLE_MQ_LIZALFOS_MAZE_LOWER_CHEST,        RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 23747, 0x03, "MQ Lizalfos Maze Lower Chest",        "Fire Temple MQ Lizalfos Maze Lower Chest",        RHT_FIRE_TEMPLE_MQ_LIZALFOS_MAZE_LOWER_CHEST,        RG_BOMBS_10,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_MQ_LIZALFOS_MAZE_UPPER_CHEST] =        Location::Chest(RC_FIRE_TEMPLE_MQ_LIZALFOS_MAZE_UPPER_CHEST,        RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 23782, 0x06, "MQ Lizalfos Maze Upper Chest",        "Fire Temple MQ Lizalfos Maze Upper Chest",        RHT_FIRE_TEMPLE_MQ_LIZALFOS_MAZE_UPPER_CHEST,        RG_BOMBS_10,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_MQ_CHEST_ON_FIRE] =                    Location::Chest(RC_FIRE_TEMPLE_MQ_CHEST_ON_FIRE,                    RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22597, 0x05, "MQ Chest on Fire",                    "Fire Temple MQ Chest on Fire",                    RHT_FIRE_TEMPLE_MQ_CHEST_ON_FIRE,                    RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_MQ_MAP_ROOM_SIDE_CHEST] =              Location::Chest(RC_FIRE_TEMPLE_MQ_MAP_ROOM_SIDE_CHEST,              RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 30018, 0x02, "MQ Map Room Side Chest",              "Fire Temple MQ Map Room Side Chest",              RHT_FIRE_TEMPLE_MQ_MAP_ROOM_SIDE_CHEST,              RG_HYLIAN_SHIELD,         {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_MQ_MAP_CHEST] =                        Location::Chest(RC_FIRE_TEMPLE_MQ_MAP_CHEST,                        RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 2092,  0x0C, "MQ Map Chest",                        "Fire Temple MQ Map Chest",                        RHT_FIRE_TEMPLE_MQ_MAP_CHEST,                        RG_FIRE_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_MQ_BOSS_KEY_CHEST] =                   Location::Chest(RC_FIRE_TEMPLE_MQ_BOSS_KEY_CHEST,                   RCQUEST_MQ,      RCTYPE_BOSS_KEY,    RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 10212, 0x04, "MQ Boss Key Chest",                   "Fire Temple MQ Boss Key Chest",                   RHT_FIRE_TEMPLE_MQ_BOSS_KEY_CHEST,                   RG_FIRE_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_MQ_BIG_LAVA_ROOM_BLOCKED_DOOR_CHEST] = Location::Chest(RC_FIRE_TEMPLE_MQ_BIG_LAVA_ROOM_BLOCKED_DOOR_CHEST, RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22593, 0x01, "MQ Big Lava Room Blocked Door Chest", "Fire Temple MQ Big Lava Room Blocked Door Chest", RHT_FIRE_TEMPLE_MQ_BIG_LAVA_ROOM_BLOCKED_DOOR_CHEST, RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_MQ_LIZALFOS_MAZE_SIDE_ROOM_CHEST] =    Location::Chest(RC_FIRE_TEMPLE_MQ_LIZALFOS_MAZE_SIDE_ROOM_CHEST,    RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_BOX,    SCENE_FIRE_TEMPLE, 22600, 0x08, "MQ Lizalfos Maze Side Room Chest",    "Fire Temple MQ Lizalfos Maze Side Room Chest",    RHT_FIRE_TEMPLE_MQ_LIZALFOS_MAZE_SIDE_ROOM_CHEST,    RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);
    locationTable[RC_FIRE_TEMPLE_MQ_FREESTANDING_KEY] =           Location::Collectable(RC_FIRE_TEMPLE_MQ_FREESTANDING_KEY,                 RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_FIRE_TEMPLE, ACTOR_EN_ITEM00, SCENE_FIRE_TEMPLE, 7185,  0x1C, "MQ Freestanding Key",                 "Fire Temple MQ Freestanding Key",                 RHT_FIRE_TEMPLE_MQ_FREESTANDING_KEY,                 RG_FIRE_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE, true);

    //            Randomizer Check                                             Randomizer Check                          Quest            Type                Area                 Actor ID         Scene ID            Params  Flags Short Name                  Spoiler Name                             Hint Text Key                              Randomizer Get             Categories                      Collection Check Group                                   Vanilla Progression
    // Water Temple Vanilla
    locationTable[RC_WATER_TEMPLE_MAP_CHEST] =                 Location::Chest(RC_WATER_TEMPLE_MAP_CHEST,                RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 6178,   0x02, "Map Chest",                "Water Temple Map Chest",                RHT_WATER_TEMPLE_MAP_CHEST,                RG_WATER_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_COMPASS_CHEST] =             Location::Chest(RC_WATER_TEMPLE_COMPASS_CHEST,            RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 2057,   0x09, "Compass Chest",            "Water Temple Compass Chest",            RHT_WATER_TEMPLE_COMPASS_CHEST,            RG_WATER_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_TORCHES_CHEST] =             Location::Chest(RC_WATER_TEMPLE_TORCHES_CHEST,            RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 30785,  0x01, "Torches Chest",            "Water Temple Torches Chest",            RHT_WATER_TEMPLE_TORCHES_CHEST,            RG_WATER_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_DRAGON_CHEST] =              Location::Chest(RC_WATER_TEMPLE_DRAGON_CHEST,             RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 22602,  0x0A, "Dragon Chest",             "Water Temple Dragon Chest",             RHT_WATER_TEMPLE_DRAGON_CHEST,             RG_WATER_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_CENTRAL_BOW_TARGET_CHEST] =  Location::Chest(RC_WATER_TEMPLE_CENTRAL_BOW_TARGET_CHEST, RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 22600,  0x08, "Central Bow Target Chest", "Water Temple Central Bow Target Chest", RHT_WATER_TEMPLE_CENTRAL_BOW_TARGET_CHEST, RG_WATER_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_CENTRAL_PILLAR_CHEST] =      Location::Chest(RC_WATER_TEMPLE_CENTRAL_PILLAR_CHEST,     RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 22598,  0x06, "Central Pillar Chest",     "Water Temple Central Pillar Chest",     RHT_WATER_TEMPLE_CENTRAL_PILLAR_CHEST,     RG_WATER_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_CRACKED_WALL_CHEST] =        Location::Chest(RC_WATER_TEMPLE_CRACKED_WALL_CHEST,       RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 22592,  0x00, "Cracked Wall Chest",       "Water Temple Cracked Wall Chest",       RHT_WATER_TEMPLE_CRACKED_WALL_CHEST,       RG_WATER_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_BOSS_KEY_CHEST] =            Location::Chest(RC_WATER_TEMPLE_BOSS_KEY_CHEST,           RCQUEST_VANILLA, RCTYPE_BOSS_KEY,    RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 10213,  0x05, "Boss Key Chest",           "Water Temple Boss Key Chest",           RHT_WATER_TEMPLE_BOSS_KEY_CHEST,           RG_WATER_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_LONGSHOT_CHEST] =            Location::Chest(RC_WATER_TEMPLE_LONGSHOT_CHEST,           RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 295,    0x07, "Longshot Chest",           "Water Temple Longshot Chest",           RHT_WATER_TEMPLE_LONGSHOT_CHEST,           RG_PROGRESSIVE_HOOKSHOT,   {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_RIVER_CHEST] =               Location::Chest(RC_WATER_TEMPLE_RIVER_CHEST,              RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 22595,  0x03, "River Chest",              "Water Temple River Chest",              RHT_WATER_TEMPLE_RIVER_CHEST,              RG_WATER_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    // Water Temple MQ
    locationTable[RC_WATER_TEMPLE_MQ_CENTRAL_PILLAR_CHEST] =   Location::Chest(RC_WATER_TEMPLE_MQ_CENTRAL_PILLAR_CHEST,  RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, -30650, 0x06, "MQ Central Pillar Chest",  "Water Temple MQ Central Pillar Chest",  RHT_WATER_TEMPLE_MQ_CENTRAL_PILLAR_CHEST,  RG_WATER_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_MQ_BOSS_KEY_CHEST] =         Location::Chest(RC_WATER_TEMPLE_MQ_BOSS_KEY_CHEST,        RCQUEST_MQ,      RCTYPE_BOSS_KEY,    RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 10213,  0x05, "MQ Boss Key Chest",        "Water Temple MQ Boss Key Chest",        RHT_WATER_TEMPLE_MQ_BOSS_KEY_CHEST,        RG_WATER_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_MQ_LONGSHOT_CHEST] =         Location::Chest(RC_WATER_TEMPLE_MQ_LONGSHOT_CHEST,        RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, -20192, 0x00, "MQ Longshot Chest",        "Water Temple MQ Longshot Chest",        RHT_WATER_TEMPLE_MQ_LONGSHOT_CHEST,        RG_PROGRESSIVE_HOOKSHOT,   {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_MQ_COMPASS_CHEST] =          Location::Chest(RC_WATER_TEMPLE_MQ_COMPASS_CHEST,         RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, 6145,   0x01, "MQ Compass Chest",         "Water Temple MQ Compass Chest",         RHT_WATER_TEMPLE_MQ_COMPASS_CHEST,         RG_WATER_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_MQ_MAP_CHEST] =              Location::Chest(RC_WATER_TEMPLE_MQ_MAP_CHEST,             RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_WATER_TEMPLE, ACTOR_EN_BOX,    SCENE_WATER_TEMPLE, -18398, 0x02, "MQ Map Chest",             "Water Temple MQ Map Chest",             RHT_WATER_TEMPLE_MQ_MAP_CHEST,             RG_WATER_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);
    locationTable[RC_WATER_TEMPLE_MQ_FREESTANDING_KEY] = Location::Collectable(RC_WATER_TEMPLE_MQ_FREESTANDING_KEY,      RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_WATER_TEMPLE, ACTOR_EN_ITEM00, SCENE_WATER_TEMPLE, 273,    0x01, "MQ Freestanding Key",      "Water Temple MQ Freestanding Key",      RHT_WATER_TEMPLE_MQ_FREESTANDING_KEY,      RG_WATER_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE, true);

    //            Randomizer Check                                                     Randomizer Check                                   Quest            Type                Area                  Actor ID      Scene ID               Params  Flags Short Name                          Spoiler Name                                      Hint Text Key                                       Vanilla Item                Categories                      Collection Check Group                                    Vanilla Progression
    // Spirit Temple Shared
    locationTable[RC_SPIRIT_TEMPLE_SILVER_GAUNTLETS_CHEST] =           Location::Chest(RC_SPIRIT_TEMPLE_SILVER_GAUNTLETS_CHEST,           RCQUEST_BOTH,    RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_DESERT_COLOSSUS, 1707,   0x0B, "Silver Gauntlets Chest",           "Spirit Temple Silver Gauntlets Chest",           RHT_SPIRIT_TEMPLE_SILVER_GAUNTLETS_CHEST,           RG_PROGRESSIVE_STRENGTH,    {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MIRROR_SHIELD_CHEST] =              Location::Chest(RC_SPIRIT_TEMPLE_MIRROR_SHIELD_CHEST,              RCQUEST_BOTH,    RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_DESERT_COLOSSUS, 13673,  0x09, "Mirror Shield Chest",              "Spirit Temple Mirror Shield Chest",              RHT_SPIRIT_TEMPLE_MIRROR_SHIELD_CHEST,              RG_MIRROR_SHIELD,           {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    // Spirit Temple Vanilla
    locationTable[RC_SPIRIT_TEMPLE_CHILD_BRIDGE_CHEST] =               Location::Chest(RC_SPIRIT_TEMPLE_CHILD_BRIDGE_CHEST,               RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   21800,  0x08, "Child Bridge Chest",               "Spirit Temple Child Bridge Chest",               RHT_SPIRIT_TEMPLE_CHILD_BRIDGE_CHEST,               RG_DEKU_SHIELD,             {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_CHILD_EARLY_TORCHES_CHEST] =        Location::Chest(RC_SPIRIT_TEMPLE_CHILD_EARLY_TORCHES_CHEST,        RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30656, 0x00, "Child Early Torches Chest",        "Spirit Temple Child Early Torches Chest",        RHT_SPIRIT_TEMPLE_CHILD_EARLY_TORCHES_CHEST,        RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_COMPASS_CHEST] =                    Location::Chest(RC_SPIRIT_TEMPLE_COMPASS_CHEST,                    RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   14340,  0x04, "Compass Chest",                    "Spirit Temple Compass Chest",                    RHT_SPIRIT_TEMPLE_COMPASS_CHEST,                    RG_SPIRIT_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_EARLY_ADULT_RIGHT_CHEST] =          Location::Chest(RC_SPIRIT_TEMPLE_EARLY_ADULT_RIGHT_CHEST,          RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   22599,  0x07, "Early Adult Right Chest",          "Spirit Temple Early Adult Right Chest",          RHT_SPIRIT_TEMPLE_EARLY_ADULT_RIGHT_CHEST,          RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_FIRST_MIRROR_LEFT_CHEST] =          Location::Chest(RC_SPIRIT_TEMPLE_FIRST_MIRROR_LEFT_CHEST,          RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30451, 0x0D, "First Mirror Left Chest",          "Spirit Temple First Mirror Left Chest",          RHT_SPIRIT_TEMPLE_FIRST_MIRROR_LEFT_CHEST,          RG_ICE_TRAP,                {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_FIRST_MIRROR_RIGHT_CHEST] =         Location::Chest(RC_SPIRIT_TEMPLE_FIRST_MIRROR_RIGHT_CHEST,         RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -28786, 0x0E, "First Mirror Right Chest",         "Spirit Temple First Mirror Right Chest",         RHT_SPIRIT_TEMPLE_FIRST_MIRROR_RIGHT_CHEST,         RG_RECOVERY_HEART,          {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MAP_CHEST] =                        Location::Chest(RC_SPIRIT_TEMPLE_MAP_CHEST,                        RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -18397, 0x03, "Map Chest",                        "Spirit Temple Map Chest",                        RHT_SPIRIT_TEMPLE_MAP_CHEST,                        RG_SPIRIT_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_CHILD_CLIMB_NORTH_CHEST] =          Location::Chest(RC_SPIRIT_TEMPLE_CHILD_CLIMB_NORTH_CHEST,          RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -32666, 0x06, "Child Climb North Chest",          "Spirit Temple Child Climb North Chest",          RHT_SPIRIT_TEMPLE_CHILD_CLIMB_NORTH_CHEST,          RG_BOMBCHU_10,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_CHILD_CLIMB_EAST_CHEST] =           Location::Chest(RC_SPIRIT_TEMPLE_CHILD_CLIMB_EAST_CHEST,           RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -31444, 0x0C, "Child Climb East Chest",           "Spirit Temple Child Climb East Chest",           RHT_SPIRIT_TEMPLE_CHILD_CLIMB_EAST_CHEST,           RG_DEKU_SHIELD,             {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_SUN_BLOCK_ROOM_CHEST] =             Location::Chest(RC_SPIRIT_TEMPLE_SUN_BLOCK_ROOM_CHEST,             RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30655, 0x01, "Sun Block Room Chest",             "Spirit Temple Sun Block Room Chest",             RHT_SPIRIT_TEMPLE_SUN_BLOCK_ROOM_CHEST,             RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_STATUE_ROOM_HAND_CHEST] =           Location::Chest(RC_SPIRIT_TEMPLE_STATUE_ROOM_HAND_CHEST,           RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30654, 0x02, "Statue Room Hand Chest",           "Spirit Temple Statue Room Hand Chest",           RHT_SPIRIT_TEMPLE_STATUE_ROOM_HAND_CHEST,           RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_STATUE_ROOM_NORTHEAST_CHEST] =      Location::Chest(RC_SPIRIT_TEMPLE_STATUE_ROOM_NORTHEAST_CHEST,      RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30577, 0x0F, "Statue Room Northeast Chest",      "Spirit Temple Statue Room Northeast Chest",      RHT_SPIRIT_TEMPLE_STATUE_ROOM_NORTHEAST_CHEST,      RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_NEAR_FOUR_ARMOS_CHEST] =            Location::Chest(RC_SPIRIT_TEMPLE_NEAR_FOUR_ARMOS_CHEST,            RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   22597,  0x05, "Near Four Armos Chest",            "Spirit Temple Near Four Armos Chest",            RHT_SPIRIT_TEMPLE_NEAR_FOUR_ARMOS_CHEST,            RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_HALLWAY_RIGHT_INVISIBLE_CHEST] =    Location::Chest(RC_SPIRIT_TEMPLE_HALLWAY_RIGHT_INVISIBLE_CHEST,    RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   26900,  0x14, "Hallway Right Invisible Chest",    "Spirit Temple Hallway Right Invisible Chest",    RHT_SPIRIT_TEMPLE_HALLWAY_RIGHT_INVISIBLE_CHEST,    RG_RECOVERY_HEART,          {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_HALLWAY_LEFT_INVISIBLE_CHEST] =     Location::Chest(RC_SPIRIT_TEMPLE_HALLWAY_LEFT_INVISIBLE_CHEST,     RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   26901,  0x15, "Hallway Left Invisible Chest",     "Spirit Temple Hallway Left Invisible Chest",     RHT_SPIRIT_TEMPLE_HALLWAY_LEFT_INVISIBLE_CHEST,     RG_RECOVERY_HEART,          {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_BOSS_KEY_CHEST] =                   Location::Chest(RC_SPIRIT_TEMPLE_BOSS_KEY_CHEST,                   RCQUEST_VANILLA, RCTYPE_BOSS_KEY,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   10218,  0x0A, "Boss Key Chest",                   "Spirit Temple Boss Key Chest",                   RHT_SPIRIT_TEMPLE_BOSS_KEY_CHEST,                   RG_SPIRIT_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_TOPMOST_CHEST] =                    Location::Chest(RC_SPIRIT_TEMPLE_TOPMOST_CHEST,                    RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -29454, 0x12, "Topmost Chest",                    "Spirit Temple Topmost Chest",                    RHT_SPIRIT_TEMPLE_TOPMOST_CHEST,                    RG_BOMBS_20,                {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    // Spirit Temple MQ
    locationTable[RC_SPIRIT_TEMPLE_MQ_ENTRANCE_FRONT_LEFT_CHEST] =     Location::Chest(RC_SPIRIT_TEMPLE_MQ_ENTRANCE_FRONT_LEFT_CHEST,     RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   20602,  0x1A, "MQ Entrance Front Left Chest",     "Spirit Temple MQ Entrance Front Left Chest",     RHT_SPIRIT_TEMPLE_MQ_ENTRANCE_FRONT_LEFT_CHEST,     RG_BOMBCHU_10,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_ENTRANCE_BACK_RIGHT_CHEST] =     Location::Chest(RC_SPIRIT_TEMPLE_MQ_ENTRANCE_BACK_RIGHT_CHEST,     RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -32641, 0x1F, "MQ Entrance Back Right Chest",     "Spirit Temple MQ Entrance Back Right Chest",     RHT_SPIRIT_TEMPLE_MQ_ENTRANCE_BACK_RIGHT_CHEST,     RG_BOMBCHU_10,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_ENTRANCE_FRONT_RIGHT_CHEST] =    Location::Chest(RC_SPIRIT_TEMPLE_MQ_ENTRANCE_FRONT_RIGHT_CHEST,    RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30629, 0x1B, "MQ Entrance Front Right Chest",    "Spirit Temple MQ Entrance Front Right Chest",    RHT_SPIRIT_TEMPLE_MQ_ENTRANCE_FRONT_RIGHT_CHEST,    RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MQ_ENTRANCE_BACK_LEFT_CHEST] =      Location::Chest(RC_SPIRIT_TEMPLE_MQ_ENTRANCE_BACK_LEFT_CHEST,      RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30626, 0x1E, "MQ Entrance Back Left Chest",      "Spirit Temple MQ Entrance Back Left Chest",      RHT_SPIRIT_TEMPLE_MQ_ENTRANCE_BACK_LEFT_CHEST,      RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MQ_CHILD_HAMMER_SWITCH_CHEST] =     Location::Chest(RC_SPIRIT_TEMPLE_MQ_CHILD_HAMMER_SWITCH_CHEST,     RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30627, 0x1D, "MQ Child Hammer Switch Chest",     "Spirit Temple MQ Child Hammer Switch Chest",     RHT_SPIRIT_TEMPLE_MQ_CHILD_HAMMER_SWITCH_CHEST,     RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MQ_MAP_CHEST] =                     Location::Chest(RC_SPIRIT_TEMPLE_MQ_MAP_CHEST,                     RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   2080,   0x00, "MQ Map Chest",                     "Spirit Temple MQ Map Chest",                     RHT_SPIRIT_TEMPLE_MQ_MAP_CHEST,                     RG_SPIRIT_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MQ_MAP_ROOM_ENEMY_CHEST] =          Location::Chest(RC_SPIRIT_TEMPLE_MQ_MAP_ROOM_ENEMY_CHEST,          RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   30792,  0x08, "MQ Map Room Enemy Chest",          "Spirit Temple MQ Map Room Enemy Chest",          RHT_SPIRIT_TEMPLE_MQ_MAP_ROOM_ENEMY_CHEST,          RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MQ_CHILD_CLIMB_NORTH_CHEST] =       Location::Chest(RC_SPIRIT_TEMPLE_MQ_CHILD_CLIMB_NORTH_CHEST,       RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   28774,  0x06, "MQ Child Climb North Chest",       "Spirit Temple MQ Child Climb North Chest",       RHT_SPIRIT_TEMPLE_MQ_CHILD_CLIMB_NORTH_CHEST,       RG_BOMBCHU_10,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_CHILD_CLIMB_SOUTH_CHEST] =       Location::Chest(RC_SPIRIT_TEMPLE_MQ_CHILD_CLIMB_SOUTH_CHEST,       RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30644, 0x0C, "MQ Child Climb South Chest",       "Spirit Temple MQ Child Climb South Chest",       RHT_SPIRIT_TEMPLE_MQ_CHILD_CLIMB_SOUTH_CHEST,       RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MQ_COMPASS_CHEST] =                 Location::Chest(RC_SPIRIT_TEMPLE_MQ_COMPASS_CHEST,                 RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -18429, 0x03, "MQ Compass Chest",                 "Spirit Temple MQ Compass Chest",                 RHT_SPIRIT_TEMPLE_MQ_COMPASS_CHEST,                 RG_SPIRIT_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MQ_STATUE_ROOM_LULLABY_CHEST] =     Location::Chest(RC_SPIRIT_TEMPLE_MQ_STATUE_ROOM_LULLABY_CHEST,     RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30577, 0x0F, "MQ Statue Room Lullaby Chest",     "Spirit Temple MQ Statue Room Lullaby Chest",     RHT_SPIRIT_TEMPLE_MQ_STATUE_ROOM_LULLABY_CHEST,     RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_STATUE_ROOM_INVISIBLE_CHEST] =   Location::Chest(RC_SPIRIT_TEMPLE_MQ_STATUE_ROOM_INVISIBLE_CHEST,   RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   26882,  0x02, "MQ Statue Room Invisible Chest",   "Spirit Temple MQ Statue Room Invisible Chest",   RHT_SPIRIT_TEMPLE_MQ_STATUE_ROOM_INVISIBLE_CHEST,   RG_RECOVERY_HEART,          {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_SILVER_BLOCK_HALLWAY_CHEST] =    Location::Chest(RC_SPIRIT_TEMPLE_MQ_SILVER_BLOCK_HALLWAY_CHEST,    RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30628, 0x1C, "MQ Silver Block Hallway Chest",    "Spirit Temple MQ Silver Block Hallway Chest",    RHT_SPIRIT_TEMPLE_MQ_SILVER_BLOCK_HALLWAY_CHEST,    RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MQ_SUN_BLOCK_ROOM_CHEST] =          Location::Chest(RC_SPIRIT_TEMPLE_MQ_SUN_BLOCK_ROOM_CHEST,          RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   -30463, 0x01, "MQ Sun Block Room Chest",          "Spirit Temple MQ Sun Block Room Chest",          RHT_SPIRIT_TEMPLE_MQ_SUN_BLOCK_ROOM_CHEST,          RG_RECOVERY_HEART,          {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_SYMPHONY_ROOM_CHEST] =           Location::Chest(RC_SPIRIT_TEMPLE_MQ_SYMPHONY_ROOM_CHEST,           RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   23207,  0x07, "MQ Symphony Room Chest",           "Spirit Temple MQ Symphony Room Chest",           RHT_SPIRIT_TEMPLE_MQ_SYMPHONY_ROOM_CHEST,           RG_PURPLE_RUPEE,            {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_LEEVER_ROOM_CHEST] =             Location::Chest(RC_SPIRIT_TEMPLE_MQ_LEEVER_ROOM_CHEST,             RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   31396,  0x04, "MQ Leever Room Chest",             "Spirit Temple MQ Leever Room Chest",             RHT_SPIRIT_TEMPLE_MQ_LEEVER_ROOM_CHEST,             RG_PURPLE_RUPEE,            {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_BEAMOS_ROOM_CHEST] =             Location::Chest(RC_SPIRIT_TEMPLE_MQ_BEAMOS_ROOM_CHEST,             RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   24472,  0x19, "MQ Beamos Room Chest",             "Spirit Temple MQ Beamos Room Chest",             RHT_SPIRIT_TEMPLE_MQ_BEAMOS_ROOM_CHEST,             RG_RECOVERY_HEART,          {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_CHEST_SWITCH_CHEST] =            Location::Chest(RC_SPIRIT_TEMPLE_MQ_CHEST_SWITCH_CHEST,            RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   31097,  0x18, "MQ Chest Switch Chest",            "Spirit Temple MQ Chest Switch Chest",            RHT_SPIRIT_TEMPLE_MQ_CHEST_SWITCH_CHEST,            RG_ICE_TRAP,                {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_BOSS_KEY_CHEST] =                Location::Chest(RC_SPIRIT_TEMPLE_MQ_BOSS_KEY_CHEST,                RCQUEST_MQ,      RCTYPE_BOSS_KEY,    RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   10213,  0x05, "MQ Boss Key Chest",                "Spirit Temple MQ Boss Key Chest",                RHT_SPIRIT_TEMPLE_MQ_BOSS_KEY_CHEST,                RG_SPIRIT_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);
    locationTable[RC_SPIRIT_TEMPLE_MQ_MIRROR_PUZZLE_INVISIBLE_CHEST] = Location::Chest(RC_SPIRIT_TEMPLE_MQ_MIRROR_PUZZLE_INVISIBLE_CHEST, RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SPIRIT_TEMPLE, ACTOR_EN_BOX, SCENE_SPIRIT_TEMPLE,   26706,  0x12, "MQ Mirror Puzzle Invisible Chest", "Spirit Temple MQ Mirror Puzzle Invisible Chest", RHT_SPIRIT_TEMPLE_MQ_MIRROR_PUZZLE_INVISIBLE_CHEST, RG_SPIRIT_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE, true);

    //            Randomizer Check                                                        Randomizer Check                                      Quest            Type                Area                  Actor ID         Scene ID             Params Flags Short Name                              Spoiler Name                                         Hint Text Key                                          Vanilla Item                Categories                      Collection Check Group                                    Vanilla Progression
    // Shadow Temple Vanilla
    locationTable[RC_SHADOW_TEMPLE_MAP_CHEST] =                           Location::Chest(RC_SHADOW_TEMPLE_MAP_CHEST,                           RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 6177,  0x01, "Map Chest",                            "Shadow Temple Map Chest",                           RHT_SHADOW_TEMPLE_MAP_CHEST,                           RG_SHADOW_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_HOVER_BOOTS_CHEST] =                   Location::Chest(RC_SHADOW_TEMPLE_HOVER_BOOTS_CHEST,                   RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 5607,  0x07, "Hover Boots Chest",                    "Shadow Temple Hover Boots Chest",                   RHT_SHADOW_TEMPLE_HOVER_BOOTS_CHEST,                   RG_HOVER_BOOTS,             {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_COMPASS_CHEST] =                       Location::Chest(RC_SHADOW_TEMPLE_COMPASS_CHEST,                       RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 6147,  0x03, "Compass Chest",                        "Shadow Temple Compass Chest",                       RHT_SHADOW_TEMPLE_COMPASS_CHEST,                       RG_SHADOW_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_EARLY_SILVER_RUPEE_CHEST] =            Location::Chest(RC_SHADOW_TEMPLE_EARLY_SILVER_RUPEE_CHEST,            RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 22594,  0x02, "Early Silver Rupee Chest",            "Shadow Temple Early Silver Rupee Chest",            RHT_SHADOW_TEMPLE_EARLY_SILVER_RUPEE_CHEST,            RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_INVISIBLE_BLADES_VISIBLE_CHEST] =      Location::Chest(RC_SHADOW_TEMPLE_INVISIBLE_BLADES_VISIBLE_CHEST,      RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 22668,  0x0C, "Invisible Blades Visible Chest",      "Shadow Temple Invisible Blades Visible Chest",      RHT_SHADOW_TEMPLE_INVISIBLE_BLADES_VISIBLE_CHEST,      RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_INVISIBLE_BLADES_INVISIBLE_CHEST] =    Location::Chest(RC_SHADOW_TEMPLE_INVISIBLE_BLADES_INVISIBLE_CHEST,    RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 26998,  0x16, "Invisible Blades Invisible Chest",    "Shadow Temple Invisible Blades Invisible Chest",    RHT_SHADOW_TEMPLE_INVISIBLE_BLADES_INVISIBLE_CHEST,    RG_ARROWS_30,               {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_FALLING_SPIKES_LOWER_CHEST] =          Location::Chest(RC_SHADOW_TEMPLE_FALLING_SPIKES_LOWER_CHEST,          RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 22853,  0x05, "Falling Spikes Lower Chest",          "Shadow Temple Falling Spikes Lower Chest",          RHT_SHADOW_TEMPLE_FALLING_SPIKES_LOWER_CHEST,          RG_ARROWS_10,               {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_FALLING_SPIKES_UPPER_CHEST] =          Location::Chest(RC_SHADOW_TEMPLE_FALLING_SPIKES_UPPER_CHEST,          RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 22662,  0x06, "Falling Spikes Upper Chest",          "Shadow Temple Falling Spikes Upper Chest",          RHT_SHADOW_TEMPLE_FALLING_SPIKES_UPPER_CHEST,          RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_FALLING_SPIKES_SWITCH_CHEST] =         Location::Chest(RC_SHADOW_TEMPLE_FALLING_SPIKES_SWITCH_CHEST,         RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, -30652, 0x04, "Falling Spikes Switch Chest",         "Shadow Temple Falling Spikes Switch Chest",         RHT_SHADOW_TEMPLE_FALLING_SPIKES_SWITCH_CHEST,         RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_INVISIBLE_SPIKES_CHEST] =              Location::Chest(RC_SHADOW_TEMPLE_INVISIBLE_SPIKES_CHEST,              RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 30857,  0x09, "Invisible Spikes Chest",              "Shadow Temple Invisible Spikes Chest",              RHT_SHADOW_TEMPLE_INVISIBLE_SPIKES_CHEST,              RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_WIND_HINT_CHEST] =                     Location::Chest(RC_SHADOW_TEMPLE_WIND_HINT_CHEST,                     RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 26965,  0x15, "Wind Hint Chest",                     "Shadow Temple Wind Hint Chest",                     RHT_SHADOW_TEMPLE_WIND_HINT_CHEST,                     RG_ARROWS_10,               {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_AFTER_WIND_ENEMY_CHEST] =              Location::Chest(RC_SHADOW_TEMPLE_AFTER_WIND_ENEMY_CHEST,              RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 30856,  0x08, "After Wind Enemy Chest",              "Shadow Temple After Wind Enemy Chest",              RHT_SHADOW_TEMPLE_AFTER_WIND_ENEMY_CHEST,              RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_AFTER_WIND_HIDDEN_CHEST] =             Location::Chest(RC_SHADOW_TEMPLE_AFTER_WIND_HIDDEN_CHEST,             RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 26708,  0x14, "After Wind Hidden Chest",             "Shadow Temple After Wind Hidden Chest",             RHT_SHADOW_TEMPLE_AFTER_WIND_HIDDEN_CHEST,             RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_SPIKE_WALLS_LEFT_CHEST] =              Location::Chest(RC_SHADOW_TEMPLE_SPIKE_WALLS_LEFT_CHEST,              RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 22666,  0x0A, "Spike Walls Left Chest",              "Shadow Temple Spike Walls Left Chest",              RHT_SHADOW_TEMPLE_SPIKE_WALLS_LEFT_CHEST,              RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_BOSS_KEY_CHEST] =                      Location::Chest(RC_SHADOW_TEMPLE_BOSS_KEY_CHEST,                      RCQUEST_VANILLA, RCTYPE_BOSS_KEY,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 10219,  0x0B, "Boss Key Chest",                      "Shadow Temple Boss Key Chest",                      RHT_SHADOW_TEMPLE_BOSS_KEY_CHEST,                      RG_SHADOW_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_INVISIBLE_FLOORMASTER_CHEST] =         Location::Chest(RC_SHADOW_TEMPLE_INVISIBLE_FLOORMASTER_CHEST,         RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 30797,  0x0D, "Invisible Floormaster Chest",         "Shadow Temple Invisible Floormaster Chest",         RHT_SHADOW_TEMPLE_INVISIBLE_FLOORMASTER_CHEST,         RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_FREESTANDING_KEY] =              Location::Collectable(RC_SHADOW_TEMPLE_FREESTANDING_KEY,                    RCQUEST_VANILLA, RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_ITEM00, SCENE_SHADOW_TEMPLE, 273,    0x01, "Freestanding Key",                    "Shadow Temple Freestanding Key",                    RHT_SHADOW_TEMPLE_FREESTANDING_KEY,                    RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    // Shadow Temple MQ
    locationTable[RC_SHADOW_TEMPLE_MQ_COMPASS_CHEST] =                    Location::Chest(RC_SHADOW_TEMPLE_MQ_COMPASS_CHEST,                    RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 6145,   0x01, "MQ Compass Chest",                    "Shadow Temple MQ Compass Chest",                    RHT_SHADOW_TEMPLE_MQ_COMPASS_CHEST,                    RG_SHADOW_TEMPLE_COMPASS,   { Category::cVanillaCompass },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_MQ_HOVER_BOOTS_CHEST] =                Location::Chest(RC_SHADOW_TEMPLE_MQ_HOVER_BOOTS_CHEST,                RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 5607,   0x07, "MQ Hover Boots Chest",                "Shadow Temple MQ Hover Boots Chest",                RHT_SHADOW_TEMPLE_MQ_HOVER_BOOTS_CHEST,                RG_HOVER_BOOTS,             {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_MQ_EARLY_GIBDOS_CHEST] =               Location::Chest(RC_SHADOW_TEMPLE_MQ_EARLY_GIBDOS_CHEST,               RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 30787,  0x03, "MQ Early Gibdos Chest",               "Shadow Temple MQ Early Gibdos Chest",               RHT_SHADOW_TEMPLE_MQ_EARLY_GIBDOS_CHEST,               RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_MQ_MAP_CHEST] =                        Location::Chest(RC_SHADOW_TEMPLE_MQ_MAP_CHEST,                        RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 2082,   0x02, "MQ Map Chest",                        "Shadow Temple MQ Map Chest",                        RHT_SHADOW_TEMPLE_MQ_MAP_CHEST,                        RG_SHADOW_TEMPLE_MAP,       { Category::cVanillaMap },      SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_MQ_BEAMOS_SILVER_RUPEES_CHEST] =       Location::Chest(RC_SHADOW_TEMPLE_MQ_BEAMOS_SILVER_RUPEES_CHEST,       RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, -30417, 0x0F, "MQ Beamos Silver Rupees Chest",       "Shadow Temple MQ Beamos Silver Rupees Chest",       RHT_SHADOW_TEMPLE_MQ_BEAMOS_SILVER_RUPEES_CHEST,       RG_ARROWS_5,                {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_FALLING_SPIKES_SWITCH_CHEST] =      Location::Chest(RC_SHADOW_TEMPLE_MQ_FALLING_SPIKES_SWITCH_CHEST,      RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 22662,  0x04, "MQ Falling Spikes Switch Chest",      "Shadow Temple MQ Falling Spikes Switch Chest",      RHT_SHADOW_TEMPLE_MQ_FALLING_SPIKES_SWITCH_CHEST,      RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_MQ_FALLING_SPIKES_LOWER_CHEST] =       Location::Chest(RC_SHADOW_TEMPLE_MQ_FALLING_SPIKES_LOWER_CHEST,       RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 22853,  0x05, "MQ Falling Spikes Lower Chest",       "Shadow Temple MQ Falling Spikes Lower Chest",       RHT_SHADOW_TEMPLE_MQ_FALLING_SPIKES_LOWER_CHEST,       RG_ARROWS_10,               {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_FALLING_SPIKES_UPPER_CHEST] =       Location::Chest(RC_SHADOW_TEMPLE_MQ_FALLING_SPIKES_UPPER_CHEST,       RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, -30652, 0x06, "MQ Falling Spikes Upper Chest",       "Shadow Temple MQ Falling Spikes Upper Chest",       RHT_SHADOW_TEMPLE_MQ_FALLING_SPIKES_UPPER_CHEST,       RG_ARROWS_5,                {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_INVISIBLE_SPIKES_CHEST] =           Location::Chest(RC_SHADOW_TEMPLE_MQ_INVISIBLE_SPIKES_CHEST,           RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 30857,  0x09, "MQ Invisible Spikes Chest",           "Shadow Temple MQ Invisible Spikes Chest",           RHT_SHADOW_TEMPLE_MQ_INVISIBLE_SPIKES_CHEST,           RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_BOSS_KEY_CHEST] =                   Location::Chest(RC_SHADOW_TEMPLE_MQ_BOSS_KEY_CHEST,                   RCQUEST_MQ,      RCTYPE_BOSS_KEY,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 10219,  0x0B, "MQ Boss Key Chest",                   "Shadow Temple MQ Boss Key Chest",                   RHT_SHADOW_TEMPLE_MQ_BOSS_KEY_CHEST,                   RG_SHADOW_TEMPLE_BOSS_KEY,  { Category::cVanillaBossKey },  SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_MQ_SPIKE_WALLS_LEFT_CHEST] =           Location::Chest(RC_SHADOW_TEMPLE_MQ_SPIKE_WALLS_LEFT_CHEST,           RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 22666,  0x0A, "MQ Spike Walls Left Chest",           "Shadow Temple MQ Spike Walls Left Chest",           RHT_SHADOW_TEMPLE_MQ_SPIKE_WALLS_LEFT_CHEST,           RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_STALFOS_ROOM_CHEST] =               Location::Chest(RC_SHADOW_TEMPLE_MQ_STALFOS_ROOM_CHEST,               RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 31184,  0x10, "MQ Stalfos Room Chest",               "Shadow Temple MQ Stalfos Room Chest",               RHT_SHADOW_TEMPLE_MQ_STALFOS_ROOM_CHEST,               RG_RED_RUPEE,               {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_INVISIBLE_BLADES_INVISIBLE_CHEST] = Location::Chest(RC_SHADOW_TEMPLE_MQ_INVISIBLE_BLADES_INVISIBLE_CHEST, RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 26710,  0x16, "MQ Invisible Blades Invisible Chest", "Shadow Temple MQ Invisible Blades Invisible Chest", RHT_SHADOW_TEMPLE_MQ_INVISIBLE_BLADES_INVISIBLE_CHEST, RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_MQ_INVISIBLE_BLADES_VISIBLE_CHEST] =   Location::Chest(RC_SHADOW_TEMPLE_MQ_INVISIBLE_BLADES_VISIBLE_CHEST,   RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 22668,  0x0C, "MQ Invisible Blades Visible Chest",   "Shadow Temple MQ Invisible Blades Visible Chest",   RHT_SHADOW_TEMPLE_MQ_INVISIBLE_BLADES_VISIBLE_CHEST,   RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_BOMB_FLOWER_CHEST] =                Location::Chest(RC_SHADOW_TEMPLE_MQ_BOMB_FLOWER_CHEST,                RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 31053,  0x0D, "MQ Bomb Flower Chest",                "Shadow Temple MQ Bomb Flower Chest",                RHT_SHADOW_TEMPLE_MQ_BOMB_FLOWER_CHEST,                RG_ARROWS_10,               {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_WIND_HINT_CHEST] =                  Location::Chest(RC_SHADOW_TEMPLE_MQ_WIND_HINT_CHEST,                  RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 26709,  0x15, "MQ Wind Hint Chest",                  "Shadow Temple MQ Wind Hint Chest",                  RHT_SHADOW_TEMPLE_MQ_WIND_HINT_CHEST,                  RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_MQ_AFTER_WIND_HIDDEN_CHEST] =          Location::Chest(RC_SHADOW_TEMPLE_MQ_AFTER_WIND_HIDDEN_CHEST,          RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 26932,  0x14, "MQ After Wind Hidden Chest",          "Shadow Temple MQ After Wind Hidden Chest",          RHT_SHADOW_TEMPLE_MQ_AFTER_WIND_HIDDEN_CHEST,          RG_ARROWS_5,                {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_AFTER_WIND_ENEMY_CHEST] =           Location::Chest(RC_SHADOW_TEMPLE_MQ_AFTER_WIND_ENEMY_CHEST,           RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 30856,  0x08, "MQ After Wind Enemy Chest",           "Shadow Temple MQ After Wind Enemy Chest",           RHT_SHADOW_TEMPLE_MQ_AFTER_WIND_ENEMY_CHEST,           RG_BLUE_RUPEE,              {},                             SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_NEAR_SHIP_INVISIBLE_CHEST] =        Location::Chest(RC_SHADOW_TEMPLE_MQ_NEAR_SHIP_INVISIBLE_CHEST,        RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_BOX,    SCENE_SHADOW_TEMPLE, 26702,  0x0E, "MQ Near Ship Invisible Chest",        "Shadow Temple MQ Near Ship Invisible Chest",        RHT_SHADOW_TEMPLE_MQ_NEAR_SHIP_INVISIBLE_CHEST,        RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);
    locationTable[RC_SHADOW_TEMPLE_MQ_FREESTANDING_KEY] =           Location::Collectable(RC_SHADOW_TEMPLE_MQ_FREESTANDING_KEY,                 RCQUEST_MQ,      RCTYPE_SMALL_KEY,   RCAREA_SHADOW_TEMPLE, ACTOR_EN_ITEM00, SCENE_SHADOW_TEMPLE, 1553,   0x06, "MQ Freestanding Key",                 "Shadow Temple MQ Freestanding Key",                 RHT_SHADOW_TEMPLE_MQ_FREESTANDING_KEY,                 RG_SHADOW_TEMPLE_SMALL_KEY, { Category::cVanillaSmallKey }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE, true);

    //            Randomizer Check                                                                   Randomizer Check                                           Quest            Type                               Area                       Actor ID         Scene ID                  Params  Flags Short Name                             Spoiler Name                                              Hint Text Key                                               Vanilla Item                     Categories                        Collection Check Group                                         Vanilla Progression
    // Bottom of the Well Vanilla
    locationTable[RC_BOTTOM_OF_THE_WELL_FRONT_LEFT_FAKE_WALL_CHEST] =          Location::Chest(      RC_BOTTOM_OF_THE_WELL_FRONT_LEFT_FAKE_WALL_CHEST,          RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 22600,  0x08, "Front Left Fake Wall Chest",          "Bottom of the Well Front Left Fake Wall Chest",          RHT_BOTTOM_OF_THE_WELL_FRONT_LEFT_FAKE_WALL_CHEST,          RG_BOTTOM_OF_THE_WELL_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    locationTable[RC_BOTTOM_OF_THE_WELL_FRONT_CENTER_BOMBABLE_CHEST] =         Location::Chest(      RC_BOTTOM_OF_THE_WELL_FRONT_CENTER_BOMBABLE_CHEST,         RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 20578,  0x02, "Front Center Bombable Chest",         "Bottom of the Well Front Center Bombable Chest",         RHT_BOTTOM_OF_THE_WELL_FRONT_CENTER_BOMBABLE_CHEST,         RG_BOMBCHU_10,                   {},                               SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_RIGHT_BOTTOM_FAKE_WALL_CHEST] =        Location::Chest(      RC_BOTTOM_OF_THE_WELL_RIGHT_BOTTOM_FAKE_WALL_CHEST,        RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 22597,  0x05, "Right Bottom Fake Wall Chest",        "Bottom of the Well Right Bottom Fake Wall Chest",        RHT_BOTTOM_OF_THE_WELL_RIGHT_BOTTOM_FAKE_WALL_CHEST,        RG_BOTTOM_OF_THE_WELL_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    locationTable[RC_BOTTOM_OF_THE_WELL_COMPASS_CHEST] =                       Location::Chest(      RC_BOTTOM_OF_THE_WELL_COMPASS_CHEST,                       RCQUEST_VANILLA, RCTYPE_MAP_COMPASS,                RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 2049,   0x01, "Compass Chest",                       "Bottom of the Well Compass Chest",                       RHT_BOTTOM_OF_THE_WELL_COMPASS_CHEST,                       RG_BOTTOM_OF_THE_WELL_COMPASS,   { Category::cVanillaCompass },    SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    locationTable[RC_BOTTOM_OF_THE_WELL_CENTER_SKULLTULA_CHEST] =              Location::Chest(      RC_BOTTOM_OF_THE_WELL_CENTER_SKULLTULA_CHEST,              RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 20558,  0x0E, "Center Skulltula Chest",              "Bottom of the Well Center Skulltula Chest",              RHT_BOTTOM_OF_THE_WELL_CENTER_SKULLTULA_CHEST,              RG_DEKU_NUTS_5,                  {},                               SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_BACK_LEFT_BOMBABLE_CHEST] =            Location::Chest(      RC_BOTTOM_OF_THE_WELL_BACK_LEFT_BOMBABLE_CHEST,            RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 23684,  0x04, "Back Left Bombable Chest",            "Bottom of the Well Back Left Bombable Chest",            RHT_BOTTOM_OF_THE_WELL_BACK_LEFT_BOMBABLE_CHEST,            RG_DEKU_NUTS_10,                 {},                               SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_LENS_OF_TRUTH_CHEST] =                 Location::Chest(      RC_BOTTOM_OF_THE_WELL_LENS_OF_TRUTH_CHEST,                 RCQUEST_VANILLA, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 4419,   0x03, "Lens of Truth Chest",                 "Bottom of the Well Lens of Truth Chest",                 RHT_BOTTOM_OF_THE_WELL_LENS_OF_TRUTH_CHEST,                 RG_LENS_OF_TRUTH,                { Category::cSongDungeonReward }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    locationTable[RC_BOTTOM_OF_THE_WELL_INVISIBLE_CHEST] =                     Location::Chest(      RC_BOTTOM_OF_THE_WELL_INVISIBLE_CHEST,                     RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 27348,  0x14, "Invisible Chest",                     "Bottom of the Well Invisible Chest",                     RHT_BOTTOM_OF_THE_WELL_INVISIBLE_CHEST,                     RG_HUGE_RUPEE,                   {},                               SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_UNDERWATER_FRONT_CHEST] =              Location::Chest(      RC_BOTTOM_OF_THE_WELL_UNDERWATER_FRONT_CHEST,              RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 23760,  0x10, "Underwater Front Chest",              "Bottom of the Well Underwater Front Chest",              RHT_BOTTOM_OF_THE_WELL_UNDERWATER_FRONT_CHEST,              RG_BOMBS_10,                     {},                               SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_UNDERWATER_LEFT_CHEST] =               Location::Chest(      RC_BOTTOM_OF_THE_WELL_UNDERWATER_LEFT_CHEST,               RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 22793,  0x09, "Underwater Left Chest",               "Bottom of the Well Underwater Left Chest",               RHT_BOTTOM_OF_THE_WELL_UNDERWATER_LEFT_CHEST,               RG_RECOVERY_HEART,               {},                               SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_MAP_CHEST] =                           Location::Chest(      RC_BOTTOM_OF_THE_WELL_MAP_CHEST,                           RCQUEST_VANILLA, RCTYPE_MAP_COMPASS,                RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 2087,   0x07, "Map Chest",                           "Bottom of the Well Map Chest",                           RHT_BOTTOM_OF_THE_WELL_MAP_CHEST,                           RG_BOTTOM_OF_THE_WELL_MAP,       { Category::cVanillaMap },        SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    locationTable[RC_BOTTOM_OF_THE_WELL_FIRE_KEESE_CHEST] =                    Location::Chest(      RC_BOTTOM_OF_THE_WELL_FIRE_KEESE_CHEST,                    RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 21802,  0x0A, "Fire Keese Chest",                    "Bottom of the Well Fire Keese Chest",                    RHT_BOTTOM_OF_THE_WELL_FIRE_KEESE_CHEST,                    RG_DEKU_SHIELD,                  {},                               SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_LIKE_LIKE_CHEST] =                     Location::Chest(      RC_BOTTOM_OF_THE_WELL_LIKE_LIKE_CHEST,                     RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 21836,  0x0C, "Like Like Chest",                     "Bottom of the Well Like Like Chest",                     RHT_BOTTOM_OF_THE_WELL_LIKE_LIKE_CHEST,                     RG_HYLIAN_SHIELD,                {},                               SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_FREESTANDING_KEY] =                    Location::Chest(      RC_BOTTOM_OF_THE_WELL_FREESTANDING_KEY,                    RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_ITEM00, SCENE_BOTTOM_OF_THE_WELL, 273,    0x01, "Freestanding Key",                    "Bottom of the Well Freestanding Key",                    RHT_BOTTOM_OF_THE_WELL_FREESTANDING_KEY,                    RG_BOTTOM_OF_THE_WELL_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    // Bottom of the Well Master Quest
    locationTable[RC_BOTTOM_OF_THE_WELL_MQ_MAP_CHEST] =                        Location::Chest(      RC_BOTTOM_OF_THE_WELL_MQ_MAP_CHEST,                        RCQUEST_MQ,      RCTYPE_MAP_COMPASS,                RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 2083,   0x03, "MQ Map Chest",                        "Bottom of the Well MQ Map Chest",                        RHT_BOTTOM_OF_THE_WELL_MQ_MAP_CHEST,                        RG_BOTTOM_OF_THE_WELL_MAP,       { Category::cVanillaMap },        SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    locationTable[RC_BOTTOM_OF_THE_WELL_MQ_LENS_OF_TRUTH_CHEST] =              Location::Chest(      RC_BOTTOM_OF_THE_WELL_MQ_LENS_OF_TRUTH_CHEST,              RCQUEST_MQ,      RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, -20159, 0x01, "MQ Lens of Truth Chest",              "Bottom of the Well MQ Lens of Truth Chest",              RHT_BOTTOM_OF_THE_WELL_MQ_LENS_OF_TRUTH_CHEST,              RG_LENS_OF_TRUTH,                { Category::cSongDungeonReward }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    locationTable[RC_BOTTOM_OF_THE_WELL_MQ_COMPASS_CHEST] =                    Location::Chest(      RC_BOTTOM_OF_THE_WELL_MQ_COMPASS_CHEST,                    RCQUEST_MQ,      RCTYPE_MAP_COMPASS,                RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_BOX,    SCENE_BOTTOM_OF_THE_WELL, 6146,   0x02, "MQ Compass Chest",                    "Bottom of the Well MQ Compass Chest",                    RHT_BOTTOM_OF_THE_WELL_MQ_COMPASS_CHEST,                    RG_BOTTOM_OF_THE_WELL_COMPASS,   { Category::cVanillaCompass },    SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    locationTable[RC_BOTTOM_OF_THE_WELL_MQ_DEAD_HAND_FREESTANDING_KEY] =       Location::Collectable(RC_BOTTOM_OF_THE_WELL_MQ_DEAD_HAND_FREESTANDING_KEY,       RCQUEST_MQ,      RCTYPE_SMALL_KEY,                  RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_ITEM00, SCENE_BOTTOM_OF_THE_WELL, 529,    0x02, "MQ Dead Hand Freestanding Key",       "Bottom of the Well MQ Dead Hand Freestanding Key",       RHT_BOTTOM_OF_THE_WELL_MQ_DEAD_HAND_FREESTANDING_KEY,       RG_BOTTOM_OF_THE_WELL_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);
    locationTable[RC_BOTTOM_OF_THE_WELL_MQ_EAST_INNER_ROOM_FREESTANDING_KEY] = Location::Collectable(RC_BOTTOM_OF_THE_WELL_MQ_EAST_INNER_ROOM_FREESTANDING_KEY, RCQUEST_MQ,      RCTYPE_SMALL_KEY,                  RCAREA_BOTTOM_OF_THE_WELL, ACTOR_EN_ITEM00, SCENE_BOTTOM_OF_THE_WELL, 273,    0x01, "MQ East Inner Room Freestanding Key", "Bottom of the Well MQ East Inner Room Freestanding Key", RHT_BOTTOM_OF_THE_WELL_MQ_EAST_INNER_ROOM_FREESTANDING_KEY, RG_BOTTOM_OF_THE_WELL_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL, true);

    //            Randomizer Check                                           Randomizer Check                   Quest            Type                Area               Actor ID         Scene ID          Params  Flag  Short Name             Spoiler Name                      Hint Text Key                       Vanilla Item           Categories                     Collection Check Group                                 Vanilla Progression
    // Ice Cavern Vanilla
    locationTable[RC_ICE_CAVERN_MAP_CHEST] =           Location::Chest(      RC_ICE_CAVERN_MAP_CHEST,           RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_ICE_CAVERN, ACTOR_EN_BOX,    SCENE_ICE_CAVERN, 2080,   0x00, "Map Chest",           "Ice Cavern Map Chest",           RHT_ICE_CAVERN_MAP_CHEST,           RG_ICE_CAVERN_MAP,     { Category::cVanillaMap },     SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN, true);
    locationTable[RC_ICE_CAVERN_COMPASS_CHEST] =       Location::Chest(      RC_ICE_CAVERN_COMPASS_CHEST,       RCQUEST_VANILLA, RCTYPE_MAP_COMPASS, RCAREA_ICE_CAVERN, ACTOR_EN_BOX,    SCENE_ICE_CAVERN, 2049,   0x01, "Compass Chest",       "Ice Cavern Compass Chest",       RHT_ICE_CAVERN_COMPASS_CHEST,       RG_ICE_CAVERN_COMPASS, { Category::cVanillaCompass }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN, true);
    locationTable[RC_ICE_CAVERN_IRON_BOOTS_CHEST] =    Location::Chest(      RC_ICE_CAVERN_IRON_BOOTS_CHEST,    RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_ICE_CAVERN, ACTOR_EN_BOX,    SCENE_ICE_CAVERN, 5570,   0x02, "Iron Boots Chest",    "Ice Cavern Iron Boots Chest",    RHT_ICE_CAVERN_IRON_BOOTS_CHEST,    RG_IRON_BOOTS,         {},                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN, true);
    locationTable[RC_ICE_CAVERN_FREESTANDING_POH] =    Location::Collectable(RC_ICE_CAVERN_FREESTANDING_POH,    RCQUEST_VANILLA, RCTYPE_STANDARD,    RCAREA_ICE_CAVERN, ACTOR_EN_ITEM00, SCENE_ICE_CAVERN, 262,    0x01, "Freestanding PoH",    "Ice Cavern Freestanding PoH",    RHT_ICE_CAVERN_FREESTANDING_POH,    RG_PIECE_OF_HEART,     {},                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN, true);
    // Ice Cavern Master Quest
    locationTable[RC_ICE_CAVERN_MQ_IRON_BOOTS_CHEST] = Location::Chest(      RC_ICE_CAVERN_MQ_IRON_BOOTS_CHEST, RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_ICE_CAVERN, ACTOR_EN_BOX,    SCENE_ICE_CAVERN, 5570,   0x02, "MQ Iron Boots Chest", "Ice Cavern MQ Iron Boots Chest", RHT_ICE_CAVERN_MQ_IRON_BOOTS_CHEST, RG_IRON_BOOTS,         {},                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN, true);
    locationTable[RC_ICE_CAVERN_MQ_COMPASS_CHEST] =    Location::Chest(      RC_ICE_CAVERN_MQ_COMPASS_CHEST,    RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_ICE_CAVERN, ACTOR_EN_BOX,    SCENE_ICE_CAVERN, 2048,   0x00, "MQ Compass Chest",    "Ice Cavern MQ Compass Chest",    RHT_ICE_CAVERN_MQ_COMPASS_CHEST,    RG_ICE_CAVERN_COMPASS, { Category::cVanillaCompass }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN, true);
    locationTable[RC_ICE_CAVERN_MQ_MAP_CHEST] =        Location::Chest(      RC_ICE_CAVERN_MQ_MAP_CHEST,        RCQUEST_MQ,      RCTYPE_MAP_COMPASS, RCAREA_ICE_CAVERN, ACTOR_EN_BOX,    SCENE_ICE_CAVERN, -18399, 0x01, "MQ Map Chest",        "Ice Cavern MQ Map Chest",        RHT_ICE_CAVERN_MQ_MAP_CHEST,        RG_ICE_CAVERN_MAP,     { Category::cVanillaMap },     SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN, true);
    locationTable[RC_ICE_CAVERN_MQ_FREESTANDING_POH] = Location::Collectable(RC_ICE_CAVERN_MQ_FREESTANDING_POH, RCQUEST_MQ,      RCTYPE_STANDARD,    RCAREA_ICE_CAVERN, ACTOR_EN_ITEM00, SCENE_ICE_CAVERN, 262,    0x01, "MQ Freestanding PoH", "Ice Cavern MQ Freestanding PoH", RHT_ICE_CAVERN_MQ_FREESTANDING_POH, RG_PIECE_OF_HEART,     {},                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN, true);

    //            Randomizer Check                                                              Randomizer Check                                            Quest            Type                               Area                           Actor ID         Scene ID                      Params  Flag  Short Name                          Spoiler Name                                                Hint Text Key                                                Vanilla Item                          Categories                        Collection Check Group                                     Vanilla Progression
    // Gerudo Training Grounds Vanilla
    locationTable[RC_GERUDO_TRAINING_GROUND_LOBBY_LEFT_CHEST] =                 Location::Chest(RC_GERUDO_TRAINING_GROUND_LOBBY_LEFT_CHEST,                 RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30573, 0x13, "Lobby Left Chest",                 "Gerudo Training Grounds Lobby Left Chest",                 RHT_GERUDO_TRAINING_GROUND_LOBBY_LEFT_CHEST,                 RG_BLUE_RUPEE,                        {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_LOBBY_RIGHT_CHEST] =                Location::Chest(RC_GERUDO_TRAINING_GROUND_LOBBY_RIGHT_CHEST,                RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30393, 0x07, "Lobby Right Chest",                "Gerudo Training Grounds Lobby Right Chest",                RHT_GERUDO_TRAINING_GROUND_LOBBY_RIGHT_CHEST,                RG_ARROWS_10,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_STALFOS_CHEST] =                    Location::Chest(RC_GERUDO_TRAINING_GROUND_STALFOS_CHEST,                    RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30656, 0x00, "Stalfos Chest",                    "Gerudo Training Grounds Stalfos Chest",                    RHT_GERUDO_TRAINING_GROUND_STALFOS_CHEST,                    RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_BEAMOS_CHEST] =                     Location::Chest(RC_GERUDO_TRAINING_GROUND_BEAMOS_CHEST,                     RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30655, 0x01, "Beamos Chest",                     "Gerudo Training Grounds Beamos Chest",                     RHT_GERUDO_TRAINING_GROUND_BEAMOS_CHEST,                     RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_HIDDEN_CEILING_CHEST] =             Location::Chest(RC_GERUDO_TRAINING_GROUND_HIDDEN_CEILING_CHEST,             RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22603,  0x0B, "Hidden Ceiling Chest",             "Gerudo Training Grounds Hidden Ceiling Chest",             RHT_GERUDO_TRAINING_GROUND_HIDDEN_CEILING_CHEST,             RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_MAZE_PATH_FIRST_CHEST] =            Location::Chest(RC_GERUDO_TRAINING_GROUND_MAZE_PATH_FIRST_CHEST,            RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 23206,  0x06, "Maze Path First Chest",            "Gerudo Training Grounds Maze Path First Chest",            RHT_GERUDO_TRAINING_GROUND_MAZE_PATH_FIRST_CHEST,            RG_PURPLE_RUPEE,                      {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MAZE_PATH_SECOND_CHEST] =           Location::Chest(RC_GERUDO_TRAINING_GROUND_MAZE_PATH_SECOND_CHEST,           RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22986,  0x0A, "Maze Path Second Chest",           "Gerudo Training Grounds Maze Path Second Chest",           RHT_GERUDO_TRAINING_GROUND_MAZE_PATH_SECOND_CHEST,           RG_RED_RUPEE,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MAZE_PATH_THIRD_CHEST] =            Location::Chest(RC_GERUDO_TRAINING_GROUND_MAZE_PATH_THIRD_CHEST,            RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22889,  0x09, "Maze Path Third Chest",            "Gerudo Training Grounds Maze Path Third Chest",            RHT_GERUDO_TRAINING_GROUND_MAZE_PATH_THIRD_CHEST,            RG_ARROWS_30,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MAZE_PATH_FINAL_CHEST] =            Location::Chest(RC_GERUDO_TRAINING_GROUND_MAZE_PATH_FINAL_CHEST,            RCQUEST_VANILLA, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 2860,   0x0C, "Maze Path Final Chest",            "Gerudo Training Grounds Maze Path Final Chest",            RHT_GERUDO_TRAINING_GROUND_MAZE_PATH_FINAL_CHEST,            RG_ICE_ARROWS,                        { Category::cSongDungeonReward }, SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_MAZE_RIGHT_CENTRAL_CHEST] =         Location::Chest(RC_GERUDO_TRAINING_GROUND_MAZE_RIGHT_CENTRAL_CHEST,         RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 23877,  0x05, "Maze Right Central Chest",         "Gerudo Training Grounds Maze Right Central Chest",         RHT_GERUDO_TRAINING_GROUND_MAZE_RIGHT_CENTRAL_CHEST,         RG_BOMBCHU_5,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MAZE_RIGHT_SIDE_CHEST] =            Location::Chest(RC_GERUDO_TRAINING_GROUND_MAZE_RIGHT_SIDE_CHEST,            RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22888,  0x08, "Maze Right Side Chest",            "Gerudo Training Grounds Maze Right Side Chest",            RHT_GERUDO_TRAINING_GROUND_MAZE_RIGHT_SIDE_CHEST,            RG_ARROWS_30,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_UNDERWATER_SILVER_RUPEE_CHEST] =    Location::Chest(RC_GERUDO_TRAINING_GROUND_UNDERWATER_SILVER_RUPEE_CHEST,    RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30643, 0x0D, "Underwater Silver Rupee Chest",    "Gerudo Training Grounds Underwater Silver Rupee Chest",    RHT_GERUDO_TRAINING_GROUND_UNDERWATER_SILVER_RUPEE_CHEST,    RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_HAMMER_ROOM_CLEAR_CHEST] =          Location::Chest(RC_GERUDO_TRAINING_GROUND_HAMMER_ROOM_CLEAR_CHEST,          RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 31058,  0x12, "Hammer Room Clear Chest",          "Gerudo Training Grounds Hammer Room Clear Chest",          RHT_GERUDO_TRAINING_GROUND_HAMMER_ROOM_CLEAR_CHEST,          RG_ARROWS_10,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_HAMMER_ROOM_SWITCH_CHEST] =         Location::Chest(RC_GERUDO_TRAINING_GROUND_HAMMER_ROOM_SWITCH_CHEST,         RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22608,  0x10, "Hammer Room Switch Chest",         "Gerudo Training Grounds Hammer Room Switch Chest",         RHT_GERUDO_TRAINING_GROUND_HAMMER_ROOM_SWITCH_CHEST,         RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_EYE_STATUE_CHEST] =                 Location::Chest(RC_GERUDO_TRAINING_GROUND_EYE_STATUE_CHEST,                 RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30653, 0x03, "Eye Statue Chest",                 "Gerudo Training Grounds Eye Statue Chest",                 RHT_GERUDO_TRAINING_GROUND_EYE_STATUE_CHEST,                 RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_NEAR_SCARECROW_CHEST] =             Location::Chest(RC_GERUDO_TRAINING_GROUND_NEAR_SCARECROW_CHEST,             RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22596,  0x04, "Near Scarecrow Chest",             "Gerudo Training Grounds Near Scarecrow Chest",             RHT_GERUDO_TRAINING_GROUND_NEAR_SCARECROW_CHEST,             RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_BEFORE_HEAVY_BLOCK_CHEST] =         Location::Chest(RC_GERUDO_TRAINING_GROUND_BEFORE_HEAVY_BLOCK_CHEST,         RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 31089,  0x11, "Before Heavy Block Chest",         "Gerudo Training Grounds Before Heavy Block Chest",         RHT_GERUDO_TRAINING_GROUND_BEFORE_HEAVY_BLOCK_CHEST,         RG_ARROWS_30,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_FIRST_CHEST] =          Location::Chest(RC_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_FIRST_CHEST,          RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 31439,  0x0F, "Heavy Block First Chest",          "Gerudo Training Grounds Heavy Block First Chest",          RHT_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_FIRST_CHEST,          RG_HUGE_RUPEE,                        {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_SECOND_CHEST] =         Location::Chest(RC_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_SECOND_CHEST,         RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 30862,  0x0E, "Heavy Block Second Chest",         "Gerudo Training Grounds Heavy Block Second Chest",         RHT_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_SECOND_CHEST,         RG_BLUE_RUPEE,                        {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_THIRD_CHEST] =          Location::Chest(RC_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_THIRD_CHEST,          RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 26708,  0x14, "Heavy Block Third Chest",          "Gerudo Training Grounds Heavy Block Third Chest",          RHT_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_THIRD_CHEST,          RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_FOURTH_CHEST] =         Location::Chest(RC_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_FOURTH_CHEST,         RCQUEST_VANILLA, RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 24450,  0x02, "Heavy Block Fourth Chest",         "Gerudo Training Grounds Heavy Block Fourth Chest",         RHT_GERUDO_TRAINING_GROUND_HEAVY_BLOCK_FOURTH_CHEST,         RG_ICE_TRAP,                          {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_FREESTANDING_KEY] =                 Location::Collectable(RC_GERUDO_TRAINING_GROUND_FREESTANDING_KEY,           RCQUEST_VANILLA, RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_ITEM00, SCENE_GERUDO_TRAINING_GROUND, 273,    0x01, "Freestanding Key",                 "Gerudo Training Grounds Freestanding Key",                 RHT_GERUDO_TRAINING_GROUND_FREESTANDING_KEY,                 RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    // Gerudo Training Grounds Master Quest
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_LOBBY_RIGHT_CHEST] =             Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_LOBBY_RIGHT_CHEST,             RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 23879,  0x07, "MQ Lobby Right Chest",             "Gerudo Training Grounds MQ Lobby Right Chest",             RHT_GERUDO_TRAINING_GROUND_MQ_LOBBY_RIGHT_CHEST,             RG_BOMBCHU_5,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_LOBBY_LEFT_CHEST] =              Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_LOBBY_LEFT_CHEST,              RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22867,  0x13, "MQ Lobby Left Chest",              "Gerudo Training Grounds MQ Lobby Left Chest",              RHT_GERUDO_TRAINING_GROUND_MQ_LOBBY_LEFT_CHEST,              RG_ARROWS_10,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_FIRST_IRON_KNUCKLE_CHEST] =      Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_FIRST_IRON_KNUCKLE_CHEST,      RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30304, 0x00, "MQ First Iron Knuckle Chest",      "Gerudo Training Grounds MQ First Iron Knuckle Chest",      RHT_GERUDO_TRAINING_GROUND_MQ_FIRST_IRON_KNUCKLE_CHEST,      RG_BLUE_RUPEE,                        {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_BEFORE_HEAVY_BLOCK_CHEST] =      Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_BEFORE_HEAVY_BLOCK_CHEST,      RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 31057,  0x11, "MQ Before Heavy Block Chest",      "Gerudo Training Grounds MQ Before Heavy Block Chest",      RHT_GERUDO_TRAINING_GROUND_MQ_BEFORE_HEAVY_BLOCK_CHEST,      RG_ARROWS_10,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_EYE_STATUE_CHEST] =              Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_EYE_STATUE_CHEST,              RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -32669, 0x03, "MQ Eye Statue Chest",              "Gerudo Training Grounds MQ Eye Statue Chest",              RHT_GERUDO_TRAINING_GROUND_MQ_EYE_STATUE_CHEST,              RG_BOMBCHU_10,                        {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_FLAME_CIRCLE_CHEST] =            Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_FLAME_CIRCLE_CHEST,            RCQUEST_MQ,      RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30642, 0x0E, "MQ Flame Circle Chest",            "Gerudo Training Grounds MQ Flame Circle Chest",            RHT_GERUDO_TRAINING_GROUND_MQ_FLAME_CIRCLE_CHEST,            RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_SECOND_IRON_KNUCKLE_CHEST] =     Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_SECOND_IRON_KNUCKLE_CHEST,     RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 31058,  0x12, "MQ Second Iron Knuckle Chest",     "Gerudo Training Grounds MQ Second Iron Knuckle Chest",     RHT_GERUDO_TRAINING_GROUND_MQ_SECOND_IRON_KNUCKLE_CHEST,     RG_ARROWS_10,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_DINOLFOS_CHEST] =                Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_DINOLFOS_CHEST,                RCQUEST_MQ,      RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30655, 0x01, "MQ Dinolfos Chest",                "Gerudo Training Grounds MQ Dinolfos Chest",                RHT_GERUDO_TRAINING_GROUND_MQ_DINOLFOS_CHEST,                RG_GERUDO_TRAINING_GROUNDS_SMALL_KEY, { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_ICE_ARROWS_CHEST] =              Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_ICE_ARROWS_CHEST,              RCQUEST_MQ,      RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -17628, 0x04, "MQ Ice Arrows Chest",              "Gerudo Training Grounds MQ Ice Arrows Chest",              RHT_GERUDO_TRAINING_GROUND_MQ_ICE_ARROWS_CHEST,              RG_ICE_ARROWS,                        { Category::cSongDungeonReward }, SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_MAZE_RIGHT_CENTRAL_CHEST] =      Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_MAZE_RIGHT_CENTRAL_CHEST,      RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22661,  0x05, "MQ Maze Right Central Chest",      "Gerudo Training Grounds MQ Maze Right Central Chest",      RHT_GERUDO_TRAINING_GROUND_MQ_MAZE_RIGHT_CENTRAL_CHEST,      RG_BLUE_RUPEE,                        {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_MAZE_PATH_FIRST_CHEST] =         Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_MAZE_PATH_FIRST_CHEST,         RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22918,  0x06, "MQ Maze Path First Chest",         "Gerudo Training Grounds MQ Maze Path First Chest",         RHT_GERUDO_TRAINING_GROUND_MQ_MAZE_PATH_FIRST_CHEST,         RG_GREEN_RUPEE,                       {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_MAZE_RIGHT_SIDE_CHEST] =         Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_MAZE_RIGHT_SIDE_CHEST,         RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 24136,  0x08, "MQ Maze Right Side Chest",         "Gerudo Training Grounds MQ Maze Right Side Chest",         RHT_GERUDO_TRAINING_GROUND_MQ_MAZE_RIGHT_SIDE_CHEST,         RG_TREASURE_GAME_GREEN_RUPEE,         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_MAZE_PATH_THIRD_CHEST] =         Location::Chest( RC_GERUDO_TRAINING_GROUND_MQ_MAZE_PATH_THIRD_CHEST,        RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 24137,  0x09, "MQ Maze Path Third Chest",         "Gerudo Training Grounds MQ Maze Path Third Chest",         RHT_GERUDO_TRAINING_GROUND_MQ_MAZE_PATH_THIRD_CHEST,         RG_TREASURE_GAME_GREEN_RUPEE,         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_MAZE_PATH_SECOND_CHEST] =        Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_MAZE_PATH_SECOND_CHEST,        RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 22986,  0x0A, "MQ Maze Path Second Chest",        "Gerudo Training Grounds MQ Maze Path Second Chest",        RHT_GERUDO_TRAINING_GROUND_MQ_MAZE_PATH_SECOND_CHEST,        RG_RED_RUPEE,                         {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_HIDDEN_CEILING_CHEST] =          Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_HIDDEN_CEILING_CHEST,          RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 23211,  0x0B, "MQ Hidden Ceiling Chest",          "Gerudo Training Grounds MQ Hidden Ceiling Chest",          RHT_GERUDO_TRAINING_GROUND_MQ_HIDDEN_CEILING_CHEST,          RG_PURPLE_RUPEE,                      {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_UNDERWATER_SILVER_RUPEE_CHEST] = Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_UNDERWATER_SILVER_RUPEE_CHEST, RCQUEST_MQ,      RCTYPE_SMALL_KEY,                  RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, -30643, 0x0D, "MQ Underwater Silver Rupee Chest", "Gerudo Training Grounds MQ Underwater Silver Rupee Chest", RHT_GERUDO_TRAINING_GROUND_MQ_UNDERWATER_SILVER_RUPEE_CHEST, RG_TREASURE_GAME_GREEN_RUPEE,         { Category::cVanillaSmallKey },   SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND, true);
    locationTable[RC_GERUDO_TRAINING_GROUND_MQ_HEAVY_BLOCK_CHEST] =             Location::Chest(RC_GERUDO_TRAINING_GROUND_MQ_HEAVY_BLOCK_CHEST,             RCQUEST_MQ,      RCTYPE_STANDARD,                   RCAREA_GERUDO_TRAINING_GROUND, ACTOR_EN_BOX,    SCENE_GERUDO_TRAINING_GROUND, 31394,  0x02, "MQ Heavy Block Chest",             "Gerudo Training Grounds MQ Heavy Block Chest",             RHT_GERUDO_TRAINING_GROUND_MQ_HEAVY_BLOCK_CHEST,             RG_PURPLE_RUPEE,                      {},                               SpoilerCollectionCheckGroup::GROUP_GERUDO_TRAINING_GROUND);

    //            Randomizer Check                                                            Randomizer Check                                          Quest            Type                   Area                  Actor ID         Scene ID                    Params  Flag  Short Name                                 Spoiler Name                                              Hint Text Key                                              Vanilla Item                Categories                     Spoiler Collection Check                    Collection Check Group                                    Vanilla Progression
    // Ganon's Castle Shared
    locationTable[RC_GANONS_TOWER_BOSS_KEY_CHEST] =                           Location::Chest(RC_GANONS_TOWER_BOSS_KEY_CHEST,                           RCQUEST_BOTH,    RCTYPE_GANON_BOSS_KEY, RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_GANONS_TOWER,         10219,  0x0B, "Boss Key Chest",                          "Ganon's Tower Boss Key Chest",                           RHT_GANONS_TOWER_BOSS_KEY_CHEST,                           RG_GANONS_CASTLE_BOSS_KEY,  {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE, true);
    // Ganon's Castle Vanilla
    locationTable[RC_GANONS_CASTLE_FOREST_TRIAL_CHEST] =                      Location::Chest(RC_GANONS_CASTLE_FOREST_TRIAL_CHEST,                      RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 30857,  0x09, "Forest Trial Chest",                      "Ganon's Castle Forest Trial Chest",                      RHT_GANONS_CASTLE_FOREST_TRIAL_CHEST,                      RG_BLUE_RUPEE,              {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_WATER_TRIAL_LEFT_CHEST] =                  Location::Chest(RC_GANONS_CASTLE_WATER_TRIAL_LEFT_CHEST,                  RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 24455,  0x07, "Water Trial Left Chest",                  "Ganon's Castle Water Trial Left Chest",                  RHT_GANONS_CASTLE_WATER_TRIAL_LEFT_CHEST,                  RG_ICE_TRAP,                {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_WATER_TRIAL_RIGHT_CHEST] =                 Location::Chest(RC_GANONS_CASTLE_WATER_TRIAL_RIGHT_CHEST,                 RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 22790,  0x06, "Water Trial Right Chest",                 "Ganon's Castle Water Trial Right Chest",                 RHT_GANONS_CASTLE_WATER_TRIAL_RIGHT_CHEST,                 RG_RECOVERY_HEART,          {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_SHADOW_TRIAL_FRONT_CHEST] =                Location::Chest(RC_GANONS_CASTLE_SHADOW_TRIAL_FRONT_CHEST,                RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 22664,  0x08, "Shadow Trial Front Chest",                "Ganon's Castle Shadow Trial Front Chest",                RHT_GANONS_CASTLE_SHADOW_TRIAL_FRONT_CHEST,                RG_BLUE_RUPEE,              {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_SHADOW_TRIAL_GOLDEN_GAUNTLETS_CHEST] =     Location::Chest(RC_GANONS_CASTLE_SHADOW_TRIAL_GOLDEN_GAUNTLETS_CHEST,     RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 14021,  0x05, "Shadow Trial Golden Gauntlets Chest",     "Ganon's Castle Shadow Trial Golden Gauntlets Chest",     RHT_GANONS_CASTLE_SHADOW_TRIAL_GOLDEN_GAUNTLETS_CHEST,     RG_PROGRESSIVE_STRENGTH,    {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE, true);
    locationTable[RC_GANONS_CASTLE_SPIRIT_TRIAL_CRYSTAL_SWITCH_CHEST] =       Location::Chest(RC_GANONS_CASTLE_SPIRIT_TRIAL_CRYSTAL_SWITCH_CHEST,       RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -29326, 0x12, "Spirit Trial Crystal Switch Chest",       "Ganon's Castle Spirit Trial Crystal Switch Chest",       RHT_GANONS_CASTLE_SPIRIT_TRIAL_CRYSTAL_SWITCH_CHEST,       RG_BOMBCHU_20,              {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_SPIRIT_TRIAL_INVISIBLE_CHEST] =            Location::Chest(RC_GANONS_CASTLE_SPIRIT_TRIAL_INVISIBLE_CHEST,            RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 26964,  0x14, "Spirit Trial Invisible Chest",            "Ganon's Castle Spirit Trial Invisible Chest",            RHT_GANONS_CASTLE_SPIRIT_TRIAL_INVISIBLE_CHEST,            RG_ARROWS_10,               {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_LIGHT_TRIAL_FIRST_LEFT_CHEST] =            Location::Chest(RC_GANONS_CASTLE_LIGHT_TRIAL_FIRST_LEFT_CHEST,            RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 22668,  0x0C, "Light Trial First Left Chest",            "Ganon's Castle Light Trial First Left Chest",            RHT_GANONS_CASTLE_LIGHT_TRIAL_FIRST_LEFT_CHEST,            RG_BLUE_RUPEE,              {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_LIGHT_TRIAL_SECOND_LEFT_CHEST] =           Location::Chest(RC_GANONS_CASTLE_LIGHT_TRIAL_SECOND_LEFT_CHEST,           RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 24459,  0x0B, "Light Trial Second Left Chest",           "Ganon's Castle Light Trial Second Left Chest",           RHT_GANONS_CASTLE_LIGHT_TRIAL_SECOND_LEFT_CHEST,           RG_ICE_TRAP,                {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_LIGHT_TRIAL_THIRD_LEFT_CHEST] =            Location::Chest(RC_GANONS_CASTLE_LIGHT_TRIAL_THIRD_LEFT_CHEST,            RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 22797,  0x0D, "Light Trial Third Left Chest",            "Ganon's Castle Light Trial Third Left Chest",            RHT_GANONS_CASTLE_LIGHT_TRIAL_THIRD_LEFT_CHEST,            RG_RECOVERY_HEART,          {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_LIGHT_TRIAL_FIRST_RIGHT_CHEST] =           Location::Chest(RC_GANONS_CASTLE_LIGHT_TRIAL_FIRST_RIGHT_CHEST,           RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 24462,  0x0E, "Light Trial First Right Chest",           "Ganon's Castle Light Trial First Right Chest",           RHT_GANONS_CASTLE_LIGHT_TRIAL_FIRST_RIGHT_CHEST,           RG_ICE_TRAP,                {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_LIGHT_TRIAL_SECOND_RIGHT_CHEST] =          Location::Chest(RC_GANONS_CASTLE_LIGHT_TRIAL_SECOND_RIGHT_CHEST,          RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 22890,  0x0A, "Light Trial Second Right Chest",          "Ganon's Castle Light Trial Second Right Chest",          RHT_GANONS_CASTLE_LIGHT_TRIAL_SECOND_RIGHT_CHEST,          RG_ARROWS_30,               {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_LIGHT_TRIAL_THIRD_RIGHT_CHEST] =           Location::Chest(RC_GANONS_CASTLE_LIGHT_TRIAL_THIRD_RIGHT_CHEST,           RCQUEST_VANILLA, RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 24463,  0x0F, "Light Trial Third Right Chest",           "Ganon's Castle Light Trial Third Right Chest",           RHT_GANONS_CASTLE_LIGHT_TRIAL_THIRD_RIGHT_CHEST,           RG_ICE_TRAP,                {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_LIGHT_TRIAL_INVISIBLE_ENEMIES_CHEST] =     Location::Chest(RC_GANONS_CASTLE_LIGHT_TRIAL_INVISIBLE_ENEMIES_CHEST,     RCQUEST_VANILLA, RCTYPE_SMALL_KEY,      RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 30800,  0x10, "Light Trial Invisible Enemies Chest",     "Ganon's Castle Light Trial Invisible Enemies Chest",     RHT_GANONS_CASTLE_LIGHT_TRIAL_INVISIBLE_ENEMIES_CHEST,     RG_GANONS_CASTLE_SMALL_KEY, { Category::cVanillaSmallKey },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE, true);
    locationTable[RC_GANONS_CASTLE_LIGHT_TRIAL_LULLABY_CHEST] =               Location::Chest(RC_GANONS_CASTLE_LIGHT_TRIAL_LULLABY_CHEST,               RCQUEST_VANILLA, RCTYPE_SMALL_KEY,      RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -30639, 0x11, "Light Trial Lullaby Chest",               "Ganon's Castle Light Trial Lullaby Chest",               RHT_GANONS_CASTLE_LIGHT_TRIAL_LULLABY_CHEST,               RG_GANONS_CASTLE_SMALL_KEY, { Category::cVanillaSmallKey },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE, true);
    locationTable[RC_GANONS_CASTLE_DEKU_SCRUB_CENTER_LEFT] =                  Location::Base(RC_GANONS_CASTLE_DEKU_SCRUB_CENTER_LEFT,                   RCQUEST_VANILLA, RCTYPE_SCRUB,          RCAREA_GANONS_CASTLE, ACTOR_EN_DNS,    SCENE_INSIDE_GANONS_CASTLE, 0x05,   0x37, "Deku Scrub Center-Left",                  "Ganon's Castle Deku Scrub Center-Left",                  RHT_GANONS_CASTLE_DEKU_SCRUB_CENTER_LEFT,                  RG_BUY_BOMBS_535,           { Category::cDekuScrub },       SpoilerCollectionCheck::Scrub(0x0D, 0x06), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_DEKU_SCRUB_CENTER_RIGHT] =                 Location::Base(RC_GANONS_CASTLE_DEKU_SCRUB_CENTER_RIGHT,                  RCQUEST_VANILLA, RCTYPE_SCRUB,          RCAREA_GANONS_CASTLE, ACTOR_EN_DNS,    SCENE_INSIDE_GANONS_CASTLE, 0x03,   0x33, "Deku Scrub Center-Right",                 "Ganon's Castle Deku Scrub Center-Right",                 RHT_GANONS_CASTLE_DEKU_SCRUB_CENTER_RIGHT,                 RG_BUY_ARROWS_30,           { Category::cDekuScrub },       SpoilerCollectionCheck::Scrub(0x0D, 0x04), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_DEKU_SCRUB_RIGHT] =                        Location::Base(RC_GANONS_CASTLE_DEKU_SCRUB_RIGHT,                         RCQUEST_VANILLA, RCTYPE_SCRUB,          RCAREA_GANONS_CASTLE, ACTOR_EN_DNS,    SCENE_INSIDE_GANONS_CASTLE, 0x07,   0x39, "Deku Scrub Right",                        "Ganon's Castle Deku Scrub Right",                        RHT_GANONS_CASTLE_DEKU_SCRUB_RIGHT,                        RG_BUY_RED_POTION_30,       { Category::cDekuScrub },       SpoilerCollectionCheck::Scrub(0x0D, 0x08), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_DEKU_SCRUB_LEFT] =                         Location::Base(RC_GANONS_CASTLE_DEKU_SCRUB_LEFT,                          RCQUEST_VANILLA, RCTYPE_SCRUB,          RCAREA_GANONS_CASTLE, ACTOR_EN_DNS,    SCENE_INSIDE_GANONS_CASTLE, 0x08,   0x3A, "Deku Scrub Left",                         "Ganon's Castle Deku Scrub Left",                         RHT_GANONS_CASTLE_DEKU_SCRUB_LEFT,                         RG_BUY_GREEN_POTION,        { Category::cDekuScrub },       SpoilerCollectionCheck::Scrub(0x0D, 0x09), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    // Ganon's Castle MQ
    locationTable[RC_GANONS_CASTLE_MQ_WATER_TRIAL_CHEST] =                    Location::Chest(RC_GANONS_CASTLE_MQ_WATER_TRIAL_CHEST,                    RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 22977,  0x01, "MQ Water Trial Chest",                    "Ganon's Castle MQ Water Trial Chest",                    RHT_GANONS_CASTLE_MQ_WATER_TRIAL_CHEST,                    RG_RED_RUPEE,               {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_FOREST_TRIAL_EYE_SWITCH_CHEST] =        Location::Chest(RC_GANONS_CASTLE_MQ_FOREST_TRIAL_EYE_SWITCH_CHEST,        RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -30398, 0x02, "MQ Forest Trial Eye Switch Chest",        "Ganon's Castle MQ Forest Trial Eye Switch Chest",        RHT_GANONS_CASTLE_MQ_FOREST_TRIAL_EYE_SWITCH_CHEST,        RG_ARROWS_10,               {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_FOREST_TRIAL_FROZEN_EYE_SWITCH_CHEST] = Location::Chest(RC_GANONS_CASTLE_MQ_FOREST_TRIAL_FROZEN_EYE_SWITCH_CHEST, RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -32733, 0x03, "MQ Forest Trial Frozen Eye Switch Chest", "Ganon's Castle MQ Forest Trial Frozen Eye Switch Chest", RHT_GANONS_CASTLE_MQ_FOREST_TRIAL_FROZEN_EYE_SWITCH_CHEST, RG_BOMBS_5,                 {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_LIGHT_TRIAL_LULLABY_CHEST] =            Location::Chest(RC_GANONS_CASTLE_MQ_LIGHT_TRIAL_LULLABY_CHEST,            RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -30460, 0x04, "MQ Light Trial Lullaby Chest",            "Ganon's Castle MQ Light Trial Lullaby Chest",            RHT_GANONS_CASTLE_MQ_LIGHT_TRIAL_LULLABY_CHEST,            RG_RECOVERY_HEART,          {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_SHADOW_TRIAL_BOMB_FLOWER_CHEST] =       Location::Chest(RC_GANONS_CASTLE_MQ_SHADOW_TRIAL_BOMB_FLOWER_CHEST,       RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -30400, 0x00, "MQ Shadow Trial Bomb Flower Chest",       "Ganon's Castle MQ Shadow Trial Bomb Flower Chest",       RHT_GANONS_CASTLE_MQ_SHADOW_TRIAL_BOMB_FLOWER_CHEST,       RG_ARROWS_10,               {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_SHADOW_TRIAL_EYE_SWITCH_CHEST] =        Location::Chest(RC_GANONS_CASTLE_MQ_SHADOW_TRIAL_EYE_SWITCH_CHEST,        RCQUEST_MQ,      RCTYPE_SMALL_KEY,      RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -30651, 0x05, "MQ Shadow Trial Eye Switch Chest",        "Ganon's Castle MQ Shadow Trial Eye Switch Chest",        RHT_GANONS_CASTLE_MQ_SHADOW_TRIAL_EYE_SWITCH_CHEST,        RG_GANONS_CASTLE_SMALL_KEY, { Category::cVanillaSmallKey },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE, true);
    locationTable[RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_GOLDEN_GAUNTLETS_CHEST] =  Location::Chest(RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_GOLDEN_GAUNTLETS_CHEST,  RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -18746, 0x06, "MQ Spirit Trial Golden Gauntlets Chest",  "Ganon's Castle MQ Spirit Trial Golden Gauntlets Chest",  RHT_GANONS_CASTLE_MQ_SPIRIT_TRIAL_GOLDEN_GAUNTLETS_CHEST,  RG_PROGRESSIVE_STRENGTH,    {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE, true);
    locationTable[RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_SUN_BACK_RIGHT_CHEST] =    Location::Chest(RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_SUN_BACK_RIGHT_CHEST,    RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -30457, 0x07, "MQ Spirit Trial Sun Back Right Chest",    "Ganon's Castle MQ Spirit Trial Sun Back Right Chest",    RHT_GANONS_CASTLE_MQ_SPIRIT_TRIAL_SUN_BACK_RIGHT_CHEST,    RG_RECOVERY_HEART,          {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_SUN_BACK_LEFT_CHEST] =     Location::Chest(RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_SUN_BACK_LEFT_CHEST,     RCQUEST_MQ,      RCTYPE_SMALL_KEY,      RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -30648, 0x08, "MQ Spirit Trial Sun Back Left Chest",     "Ganon's Castle MQ Spirit Trial Sun Back Left Chest",     RHT_GANONS_CASTLE_MQ_SPIRIT_TRIAL_SUN_BACK_LEFT_CHEST,     RG_GANONS_CASTLE_SMALL_KEY, { Category::cVanillaSmallKey },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_SUN_FRONT_LEFT_CHEST] =    Location::Chest(RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_SUN_FRONT_LEFT_CHEST,    RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, -30455, 0x09, "MQ Spirit Trial Sun Front Left Chest",    "Ganon's Castle MQ Spirit Trial Sun Front Left Chest",    RHT_GANONS_CASTLE_MQ_SPIRIT_TRIAL_SUN_FRONT_LEFT_CHEST,    RG_RECOVERY_HEART,          {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_FIRST_CHEST] =             Location::Chest(RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_FIRST_CHEST,             RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 20586,  0x0A, "MQ Spirit Trial First Chest",             "Ganon's Castle MQ Spirit Trial First Chest",             RHT_GANONS_CASTLE_MQ_SPIRIT_TRIAL_FIRST_CHEST,             RG_BOMBCHU_10,              {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_INVISIBLE_CHEST] =         Location::Chest(RC_GANONS_CASTLE_MQ_SPIRIT_TRIAL_INVISIBLE_CHEST,         RCQUEST_MQ,      RCTYPE_STANDARD,       RCAREA_GANONS_CASTLE, ACTOR_EN_BOX,    SCENE_INSIDE_GANONS_CASTLE, 26964,  0x14, "MQ Spirit Trial Invisible Chest",         "Ganon's Castle MQ Spirit Trial Invisible Chest",         RHT_GANONS_CASTLE_MQ_SPIRIT_TRIAL_INVISIBLE_CHEST,         RG_ARROWS_10,               {},                                                                        SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_FOREST_TRIAL_FREESTANDING_KEY] =        Location::Collectable(RC_GANONS_CASTLE_MQ_FOREST_TRIAL_FREESTANDING_KEY,  RCQUEST_MQ,      RCTYPE_SMALL_KEY,      RCAREA_GANONS_CASTLE, ACTOR_EN_ITEM00, SCENE_INSIDE_GANONS_CASTLE, 273,    0x01, "MQ Forest Trial Freestanding Key",        "Ganon's Castle MQ Forest Trial Freestanding Key",        RHT_GANONS_CASTLE_MQ_FOREST_TRIAL_FREESTANDING_KEY,        RG_GANONS_CASTLE_SMALL_KEY, { Category::cVanillaSmallKey },                                            SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE, true);
    locationTable[RC_GANONS_CASTLE_MQ_DEKU_SCRUB_RIGHT] =                     Location::Base(RC_GANONS_CASTLE_MQ_DEKU_SCRUB_RIGHT,                      RCQUEST_MQ,      RCTYPE_SCRUB,          RCAREA_GANONS_CASTLE, ACTOR_EN_DNS,    SCENE_INSIDE_GANONS_CASTLE, 0x00,   0x30, "MQ Deku Scrub Right",                     "Ganon's Castle MQ Deku Scrub Right",                     RHT_GANONS_CASTLE_MQ_DEKU_SCRUB_RIGHT,                     RG_BUY_DEKU_NUT_5,          { Category::cDekuScrub },       SpoilerCollectionCheck::Scrub(0x0D, 0x01), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER_LEFT] =               Location::Base(RC_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER_LEFT,                RCQUEST_MQ,      RCTYPE_SCRUB,          RCAREA_GANONS_CASTLE, ACTOR_EN_DNS,    SCENE_INSIDE_GANONS_CASTLE, 0x05,   0x37, "MQ Deku Scrub Center-Left",               "Ganon's Castle MQ Deku Scrub Center-Left",               RHT_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER_LEFT,               RG_BUY_BOMBS_535,           { Category::cDekuScrub },       SpoilerCollectionCheck::Scrub(0x0D, 0x06), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER] =                    Location::Base(RC_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER,                     RCQUEST_MQ,      RCTYPE_SCRUB,          RCAREA_GANONS_CASTLE, ACTOR_EN_DNS,    SCENE_INSIDE_GANONS_CASTLE, 0x03,   0x33, "MQ Deku Scrub Center",                    "Ganon's Castle MQ Deku Scrub Center",                    RHT_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER,                    RG_BUY_ARROWS_30,           { Category::cDekuScrub },       SpoilerCollectionCheck::Scrub(0x0D, 0x04), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER_RIGHT] =              Location::Base(RC_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER_RIGHT,               RCQUEST_MQ,      RCTYPE_SCRUB,          RCAREA_GANONS_CASTLE, ACTOR_EN_DNS,    SCENE_INSIDE_GANONS_CASTLE, 0x07,   0x39, "MQ Deku Scrub Center-Right",              "Ganon's Castle MQ Deku Scrub Center-Right",              RHT_GANONS_CASTLE_MQ_DEKU_SCRUB_CENTER_RIGHT,              RG_BUY_RED_POTION_30,       { Category::cDekuScrub },       SpoilerCollectionCheck::Scrub(0x0D, 0x08), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GANONS_CASTLE_MQ_DEKU_SCRUB_LEFT] =                      Location::Base(RC_GANONS_CASTLE_MQ_DEKU_SCRUB_LEFT,                       RCQUEST_MQ,      RCTYPE_SCRUB,          RCAREA_GANONS_CASTLE, ACTOR_EN_DNS,    SCENE_INSIDE_GANONS_CASTLE, 0x08,   0x3A, "MQ Deku Scrub Left",                      "Ganon's Castle MQ Deku Scrub Left",                      RHT_GANONS_CASTLE_MQ_DEKU_SCRUB_LEFT,                      RG_BUY_GREEN_POTION,        { Category::cDekuScrub },       SpoilerCollectionCheck::Scrub(0x0D, 0x09), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);

    // Gold Skulltula Tokens

    // Dungeons
    // Deku Tree  RandomizerCheck                                                          RandomizerCheck                                      Quest            Area                          Scene ID                    params  Flag  Short Name                          Spoiler Name                                        Hint Text Key                                         Categories                Collection Check Group
    locationTable[RC_DEKU_TREE_GS_BASEMENT_BACK_ROOM] =                  Location::GSToken(RC_DEKU_TREE_GS_BASEMENT_BACK_ROOM,                  RCQUEST_VANILLA, RCAREA_DEKU_TREE,             SCENE_DEKU_TREE,            8193,   0x01, "GS Basement Back Room",            "Deku Tree GS Basement Back Room",                  RHT_DEKU_TREE_GS_BASEMENT_BACK_ROOM,                  { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_GS_BASEMENT_GATE] =                       Location::GSToken(RC_DEKU_TREE_GS_BASEMENT_GATE,                       RCQUEST_VANILLA, RCAREA_DEKU_TREE,             SCENE_DEKU_TREE,            8194,   0x02, "GS Basement Gate",                 "Deku Tree GS Basement Gate",                       RHT_DEKU_TREE_GS_BASEMENT_GATE,                       { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_GS_BASEMENT_VINES] =                      Location::GSToken(RC_DEKU_TREE_GS_BASEMENT_VINES,                      RCQUEST_VANILLA, RCAREA_DEKU_TREE,             SCENE_DEKU_TREE,            8196,   0x04, "GS Basement Vines",                "Deku Tree GS Basement Vines",                      RHT_DEKU_TREE_GS_BASEMENT_VINES,                      { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_GS_COMPASS_ROOM] =                        Location::GSToken(RC_DEKU_TREE_GS_COMPASS_ROOM,                        RCQUEST_VANILLA, RCAREA_DEKU_TREE,             SCENE_DEKU_TREE,            8200,   0x08, "GS Compass Room",                  "Deku Tree GS Compass Room",                        RHT_DEKU_TREE_GS_COMPASS_ROOM,                        { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_MQ_GS_LOBBY] =                            Location::GSToken(RC_DEKU_TREE_MQ_GS_LOBBY,                            RCQUEST_MQ,      RCAREA_DEKU_TREE,             SCENE_DEKU_TREE,            8194,   0x02, "MQ GS Lobby",                      "Deku Tree MQ GS Lobby",                            RHT_DEKU_TREE_MQ_GS_LOBBY,                            { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_MQ_GS_COMPASS_ROOM] =                     Location::GSToken(RC_DEKU_TREE_MQ_GS_COMPASS_ROOM,                     RCQUEST_MQ,      RCAREA_DEKU_TREE,             SCENE_DEKU_TREE,            8200,   0x08, "MQ GS Compass Room",               "Deku Tree MQ GS Compass Room",                     RHT_DEKU_TREE_MQ_GS_COMPASS_ROOM,                     { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_MQ_GS_BASEMENT_GRAVES_ROOM] =             Location::GSToken(RC_DEKU_TREE_MQ_GS_BASEMENT_GRAVES_ROOM,             RCQUEST_MQ,      RCAREA_DEKU_TREE,             SCENE_DEKU_TREE,            8196,   0x04, "MQ GS Basement Graves Room",       "Deku Tree MQ GS Basement Graves Room",             RHT_DEKU_TREE_MQ_GS_BASEMENT_GRAVES_ROOM,             { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    locationTable[RC_DEKU_TREE_MQ_GS_BASEMENT_BACK_ROOM] =               Location::GSToken(RC_DEKU_TREE_MQ_GS_BASEMENT_BACK_ROOM,               RCQUEST_MQ,      RCAREA_DEKU_TREE,             SCENE_DEKU_TREE,            8193,   0x01, "MQ GS Basement Back Room",         "Deku Tree MQ GS Basement Back Room",               RHT_DEKU_TREE_MQ_GS_BASEMENT_BACK_ROOM,               { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE);
    // Dodongo's Cavern
    locationTable[RC_DODONGOS_CAVERN_GS_VINES_ABOVE_STAIRS] =            Location::GSToken(RC_DODONGOS_CAVERN_GS_VINES_ABOVE_STAIRS,            RCQUEST_VANILLA, RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8449,   0x01, "GS Vines Above Stairs",            "Dodongos Cavern GS Vines Above Stairs",            RHT_DODONGOS_CAVERN_GS_VINES_ABOVE_STAIRS,            { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_GS_SCARECROW] =                     Location::GSToken(RC_DODONGOS_CAVERN_GS_SCARECROW,                     RCQUEST_VANILLA, RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8450,   0x02, "GS Scarecrow",                     "Dodongos Cavern GS Scarecrow",                     RHT_DODONGOS_CAVERN_GS_SCARECROW,                     { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_GS_ALCOVE_ABOVE_STAIRS] =           Location::GSToken(RC_DODONGOS_CAVERN_GS_ALCOVE_ABOVE_STAIRS,           RCQUEST_VANILLA, RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8452,   0x04, "GS Alcove Above Stairs",           "Dodongos Cavern GS Alcove Above Stairs",           RHT_DODONGOS_CAVERN_GS_ALCOVE_ABOVE_STAIRS,           { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_GS_BACK_ROOM] =                     Location::GSToken(RC_DODONGOS_CAVERN_GS_BACK_ROOM,                     RCQUEST_VANILLA, RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8456,   0x08, "GS Back Room",                     "Dodongos Cavern GS Back Room",                     RHT_DODONGOS_CAVERN_GS_BACK_ROOM,                     { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_GS_SIDE_ROOM_NEAR_LOWER_LIZALFOS] = Location::GSToken(RC_DODONGOS_CAVERN_GS_SIDE_ROOM_NEAR_LOWER_LIZALFOS, RCQUEST_VANILLA, RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8464,   0x10, "GS Side Room Near Lower Lizalfos", "Dodongos Cavern GS Side Room Near Lower Lizalfos", RHT_DODONGOS_CAVERN_GS_SIDE_ROOM_NEAR_LOWER_LIZALFOS, { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_GS_SCRUB_ROOM] =                 Location::GSToken(RC_DODONGOS_CAVERN_MQ_GS_SCRUB_ROOM,                 RCQUEST_MQ,      RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8450,   0x02, "MQ GS Scrub Room",                 "Dodongos Cavern MQ GS Scrub Room",                 RHT_DODONGOS_CAVERN_MQ_GS_SCRUB_ROOM,                 { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_GS_SONG_OF_TIME_BLOCK_ROOM] =    Location::GSToken(RC_DODONGOS_CAVERN_MQ_GS_SONG_OF_TIME_BLOCK_ROOM,    RCQUEST_MQ,      RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8456,   0x08, "MQ GS Song of Time Block Room",    "Dodongos Cavern MQ GS Song of Time Block Room",    RHT_DODONGOS_CAVERN_MQ_GS_SONG_OF_TIME_BLOCK_ROOM,    { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_GS_LIZALFOS_ROOM] =              Location::GSToken(RC_DODONGOS_CAVERN_MQ_GS_LIZALFOS_ROOM,              RCQUEST_MQ,      RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8452,   0x04, "MQ GS Lizalfos Room",              "Dodongos Cavern MQ GS Lizalfos Room",              RHT_DODONGOS_CAVERN_MQ_GS_LIZALFOS_ROOM,              { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_GS_LARVAE_ROOM] =                Location::GSToken(RC_DODONGOS_CAVERN_MQ_GS_LARVAE_ROOM,                RCQUEST_MQ,      RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8464,   0x10, "MQ GS Larvae Room",                "Dodongos Cavern MQ GS Larvae Room",                RHT_DODONGOS_CAVERN_MQ_GS_LARVAE_ROOM,                { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_DODONGOS_CAVERN_MQ_GS_BACK_AREA] =                  Location::GSToken(RC_DODONGOS_CAVERN_MQ_GS_BACK_AREA,                  RCQUEST_MQ,      RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,      8449,   0x01, "MQ GS Back Room",                  "Dodongos Cavern MQ GS Back Room",                  RHT_DODONGOS_CAVERN_MQ_GS_BACK_AREA,                  { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN);
    locationTable[RC_JABU_JABUS_BELLY_GS_LOBBY_BASEMENT_LOWER] =         Location::GSToken(RC_JABU_JABUS_BELLY_GS_LOBBY_BASEMENT_LOWER,         RCQUEST_VANILLA, RCAREA_JABU_JABUS_BELLY,      SCENE_JABU_JABU,            8705,   0x01, "GS Lobby Basement Lower",          "Jabu Jabus Belly GS Lobby Basement Lower",         RHT_JABU_JABUS_BELLY_GS_LOBBY_BASEMENT_LOWER,         { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_GS_LOBBY_BASEMENT_UPPER] =         Location::GSToken(RC_JABU_JABUS_BELLY_GS_LOBBY_BASEMENT_UPPER,         RCQUEST_VANILLA, RCAREA_JABU_JABUS_BELLY,      SCENE_JABU_JABU,            8706,   0x02, "GS Lobby Basement Upper",          "Jabu Jabus Belly GS Lobby Basement Upper",         RHT_JABU_JABUS_BELLY_GS_LOBBY_BASEMENT_UPPER,         { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_GS_NEAR_BOSS] =                    Location::GSToken(RC_JABU_JABUS_BELLY_GS_NEAR_BOSS,                    RCQUEST_VANILLA, RCAREA_JABU_JABUS_BELLY,      SCENE_JABU_JABU,            8708,   0x04, "GS Near Boss",                     "Jabu Jabus Belly GS Near Boss",                    RHT_JABU_JABUS_BELLY_GS_NEAR_BOSS,                    { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_GS_WATER_SWITCH_ROOM] =            Location::GSToken(RC_JABU_JABUS_BELLY_GS_WATER_SWITCH_ROOM,            RCQUEST_VANILLA, RCAREA_JABU_JABUS_BELLY,      SCENE_JABU_JABU,            8712,   0x08, "GS Water Switch Room",             "Jabu Jabus Belly GS Water Switch Room",            RHT_JABU_JABUS_BELLY_GS_WATER_SWITCH_ROOM,            { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_GS_TAILPASARAN_ROOM] =          Location::GSToken(RC_JABU_JABUS_BELLY_MQ_GS_TAILPASARAN_ROOM,          RCQUEST_MQ,      RCAREA_JABU_JABUS_BELLY,      SCENE_JABU_JABU,            8708,   0x04, "MQ GS Tail Parasan Room",          "Jabu Jabus Belly MQ GS Tail Parasan Room",         RHT_JABU_JABUS_BELLY_MQ_GS_TAILPASARAN_ROOM,          { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_GS_INVISIBLE_ENEMIES_ROOM] =    Location::GSToken(RC_JABU_JABUS_BELLY_MQ_GS_INVISIBLE_ENEMIES_ROOM,    RCQUEST_MQ,      RCAREA_JABU_JABUS_BELLY,      SCENE_JABU_JABU,            8712,   0x08, "MQ GS Invisible Enemies Room",     "Jabu Jabus Belly MQ GS Invisible Enemies Room",    RHT_JABU_JABUS_BELLY_MQ_GS_INVISIBLE_ENEMIES_ROOM,    { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_GS_BOOMERANG_CHEST_ROOM] =      Location::GSToken(RC_JABU_JABUS_BELLY_MQ_GS_BOOMERANG_CHEST_ROOM,      RCQUEST_MQ,      RCAREA_JABU_JABUS_BELLY,      SCENE_JABU_JABU,            8705,   0x01, "MQ GS Boomerang Chest Room",       "Jabu Jabus Belly MQ GS Boomerang Chest Room",      RHT_JABU_JABUS_BELLY_MQ_GS_BOOMERANG_CHEST_ROOM,      { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_GS_NEAR_BOSS] =                 Location::GSToken(RC_JABU_JABUS_BELLY_MQ_GS_NEAR_BOSS,                 RCQUEST_MQ,      RCAREA_JABU_JABUS_BELLY,      SCENE_JABU_JABU,            8706,   0x02, "MQ GS Near Boss",                  "Jabu Jabus Belly MQ GS Near Boss",                 RHT_JABU_JABUS_BELLY_MQ_GS_NEAR_BOSS,                 { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);
    locationTable[RC_FOREST_TEMPLE_GS_RAISED_ISLAND_COURTYARD] =         Location::GSToken(RC_FOREST_TEMPLE_GS_RAISED_ISLAND_COURTYARD,         RCQUEST_VANILLA, RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8961,   0x01, "GS Raised Island Courtyard",       "Forest Temple GS Raised Island Courtyard",         RHT_FOREST_TEMPLE_GS_RAISED_ISLAND_COURTYARD,         { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_GS_FIRST_ROOM] =                      Location::GSToken(RC_FOREST_TEMPLE_GS_FIRST_ROOM,                      RCQUEST_VANILLA, RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8962,   0x02, "GS First Room",                    "Forest Temple GS First Room",                      RHT_FOREST_TEMPLE_GS_FIRST_ROOM,                      { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_GS_LEVEL_ISLAND_COURTYARD] =          Location::GSToken(RC_FOREST_TEMPLE_GS_LEVEL_ISLAND_COURTYARD,          RCQUEST_VANILLA, RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8964,   0x04, "GS Level Island Courtyard",        "Forest Temple GS Level Island Courtyard",          RHT_FOREST_TEMPLE_GS_LEVEL_ISLAND_COURTYARD,          { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_GS_LOBBY] =                           Location::GSToken(RC_FOREST_TEMPLE_GS_LOBBY,                           RCQUEST_VANILLA, RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8968,   0x08, "GS Lobby",                         "Forest Temple GS Lobby",                           RHT_FOREST_TEMPLE_GS_LOBBY,                           { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_GS_BASEMENT] =                        Location::GSToken(RC_FOREST_TEMPLE_GS_BASEMENT,                        RCQUEST_VANILLA, RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8976,   0x10, "GS Basement",                      "Forest Temple GS Basement",                        RHT_FOREST_TEMPLE_GS_BASEMENT,                        { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_MQ_GS_FIRST_HALLWAY] =                Location::GSToken(RC_FOREST_TEMPLE_MQ_GS_FIRST_HALLWAY,                RCQUEST_MQ,      RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8962,   0x02, "MQ GS First Hallway",              "Forest Temple MQ GS First Hallway",                RHT_FOREST_TEMPLE_MQ_GS_FIRST_HALLWAY,                { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_MQ_GS_BLOCK_PUSH_ROOM] =              Location::GSToken(RC_FOREST_TEMPLE_MQ_GS_BLOCK_PUSH_ROOM,              RCQUEST_MQ,      RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8976,   0x10, "MQ GS Block Push Room",            "Forest Temple MQ GS Block Push Room",              RHT_FOREST_TEMPLE_MQ_GS_BLOCK_PUSH_ROOM,              { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_MQ_GS_RAISED_ISLAND_COURTYARD] =      Location::GSToken(RC_FOREST_TEMPLE_MQ_GS_RAISED_ISLAND_COURTYARD,      RCQUEST_MQ,      RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8961,   0x01, "MQ GS Raised Island Courtyard",    "Forest Temple MQ GS Raised Island Courtyard",      RHT_FOREST_TEMPLE_MQ_GS_RAISED_ISLAND_COURTYARD,      { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_MQ_GS_LEVEL_ISLAND_COURTYARD] =       Location::GSToken(RC_FOREST_TEMPLE_MQ_GS_LEVEL_ISLAND_COURTYARD,       RCQUEST_MQ,      RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8964,   0x04, "MQ GS Level Island Courtyard",     "Forest Temple MQ GS Level Island Courtyard",       RHT_FOREST_TEMPLE_MQ_GS_LEVEL_ISLAND_COURTYARD,       { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    locationTable[RC_FOREST_TEMPLE_MQ_GS_WELL] =                         Location::GSToken(RC_FOREST_TEMPLE_MQ_GS_WELL,                         RCQUEST_MQ,      RCAREA_FOREST_TEMPLE,         SCENE_FOREST_TEMPLE,        8968,   0x08, "MQ GS Well",                       "Forest Temple MQ GS Well",                         RHT_FOREST_TEMPLE_MQ_GS_WELL,                         { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE);
    // Fire Temple
    locationTable[RC_FIRE_TEMPLE_GS_SONG_OF_TIME_ROOM] =                 Location::GSToken(RC_FIRE_TEMPLE_GS_SONG_OF_TIME_ROOM,                 RCQUEST_VANILLA, RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9217,   0x01, "GS Song of Time Room",             "Fire Temple GS Song of Time Room",                 RHT_FIRE_TEMPLE_GS_SONG_OF_TIME_ROOM,                 { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_GS_BOSS_KEY_LOOP] =                     Location::GSToken(RC_FIRE_TEMPLE_GS_BOSS_KEY_LOOP,                     RCQUEST_VANILLA, RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9218,   0x02, "GS Boss Key Loop",                 "Fire Temple GS Boss Key Loop",                     RHT_FIRE_TEMPLE_GS_BOSS_KEY_LOOP,                     { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_GS_BOULDER_MAZE] =                      Location::GSToken(RC_FIRE_TEMPLE_GS_BOULDER_MAZE,                      RCQUEST_VANILLA, RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9220,   0x04, "GS Boulder Maze",                  "Fire Temple GS Boulder Maze",                      RHT_FIRE_TEMPLE_GS_BOULDER_MAZE,                      { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_GS_SCARECROW_TOP] =                     Location::GSToken(RC_FIRE_TEMPLE_GS_SCARECROW_TOP,                     RCQUEST_VANILLA, RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9224,   0x08, "GS Scarecrow Top",                 "Fire Temple GS Scarecrow Top",                     RHT_FIRE_TEMPLE_GS_SCARECROW_TOP,                     { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_GS_SCARECROW_CLIMB] =                   Location::GSToken(RC_FIRE_TEMPLE_GS_SCARECROW_CLIMB,                   RCQUEST_VANILLA, RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9232,   0x10, "GS Scarecrow Climb",               "Fire Temple GS Scarecrow Climb",                   RHT_FIRE_TEMPLE_GS_SCARECROW_CLIMB,                   { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_MQ_GS_ABOVE_FIRE_WALL_MAZE] =           Location::GSToken(RC_FIRE_TEMPLE_MQ_GS_ABOVE_FIRE_WALL_MAZE,           RCQUEST_MQ,      RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9218,   0x02, "MQ GS Above Fire Wall Maze",       "Fire Temple MQ GS Above Fire Wall Maze",           RHT_FIRE_TEMPLE_MQ_GS_ABOVE_FIRE_WALL_MAZE,           { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_MQ_GS_FIRE_WALL_MAZE_CENTER] =          Location::GSToken(RC_FIRE_TEMPLE_MQ_GS_FIRE_WALL_MAZE_CENTER,          RCQUEST_MQ,      RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9224,   0x08, "MQ GS Fire Wall Maze Center",      "Fire Temple MQ GS Fire Wall Maze Center",          RHT_FIRE_TEMPLE_MQ_GS_FIRE_WALL_MAZE_CENTER,          { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_MQ_GS_BIG_LAVA_ROOM_OPEN_DOOR] =        Location::GSToken(RC_FIRE_TEMPLE_MQ_GS_BIG_LAVA_ROOM_OPEN_DOOR,        RCQUEST_MQ,      RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9217,   0x01, "MQ GS Big Lava Room Open Door",    "Fire Temple MQ GS Big Lava Room Open Door",        RHT_FIRE_TEMPLE_MQ_GS_BIG_LAVA_ROOM_OPEN_DOOR,        { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_MQ_GS_FIRE_WALL_MAZE_SIDE_ROOM] =       Location::GSToken(RC_FIRE_TEMPLE_MQ_GS_FIRE_WALL_MAZE_SIDE_ROOM,       RCQUEST_MQ,      RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9232,   0x10, "MQ GS Fire Wall Maze Side Room",   "Fire Temple MQ GS Fire Wall Maze Side Room",       RHT_FIRE_TEMPLE_MQ_GS_FIRE_WALL_MAZE_SIDE_ROOM,       { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    locationTable[RC_FIRE_TEMPLE_MQ_GS_SKULL_ON_FIRE] =                  Location::GSToken(RC_FIRE_TEMPLE_MQ_GS_SKULL_ON_FIRE,                  RCQUEST_MQ,      RCAREA_FIRE_TEMPLE,           SCENE_FIRE_TEMPLE,          9220,   0x04, "MQ GS Skull on Fire",              "Fire Temple MQ GS Skull on Fire",                  RHT_FIRE_TEMPLE_MQ_GS_SKULL_ON_FIRE,                  { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE);
    // Water Temple
    locationTable[RC_WATER_TEMPLE_GS_BEHIND_GATE] =                      Location::GSToken(RC_WATER_TEMPLE_GS_BEHIND_GATE,                      RCQUEST_VANILLA, RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9473,   0x01, "GS Behind Gate",                   "Water Temple GS Behind Gate",                      RHT_WATER_TEMPLE_GS_BEHIND_GATE,                      { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    locationTable[RC_WATER_TEMPLE_GS_FALLING_PLATFORM_ROOM] =            Location::GSToken(RC_WATER_TEMPLE_GS_FALLING_PLATFORM_ROOM,            RCQUEST_VANILLA, RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9474,   0x02, "GS Falling Platform Room",         "Water Temple GS Falling Platform Room",            RHT_WATER_TEMPLE_GS_FALLING_PLATFORM_ROOM,            { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    locationTable[RC_WATER_TEMPLE_GS_CENTRAL_PILLAR] =                   Location::GSToken(RC_WATER_TEMPLE_GS_CENTRAL_PILLAR,                   RCQUEST_VANILLA, RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9476,   0x04, "GS Central Pillar",                "Water Temple GS Central Pillar",                   RHT_WATER_TEMPLE_GS_CENTRAL_PILLAR,                   { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    locationTable[RC_WATER_TEMPLE_GS_NEAR_BOSS_KEY_CHEST] =              Location::GSToken(RC_WATER_TEMPLE_GS_NEAR_BOSS_KEY_CHEST,              RCQUEST_VANILLA, RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9480,   0x08, "GS Near Boss Key Chest",           "Water Temple GS Near Boss Key Chest",              RHT_WATER_TEMPLE_GS_NEAR_BOSS_KEY_CHEST,              { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    locationTable[RC_WATER_TEMPLE_GS_RIVER] =                            Location::GSToken(RC_WATER_TEMPLE_GS_RIVER,                            RCQUEST_VANILLA, RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9488,   0x10, "GS River",                         "Water Temple GS River",                            RHT_WATER_TEMPLE_GS_RIVER,                            { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    locationTable[RC_WATER_TEMPLE_MQ_GS_BEFORE_UPPER_WATER_SWITCH] =     Location::GSToken(RC_WATER_TEMPLE_MQ_GS_BEFORE_UPPER_WATER_SWITCH,     RCQUEST_MQ,      RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9476,   0x04, "MQ GS Before Upper Water Switch",  "Water Temple MQ GS Before Upper Water Switch",     RHT_WATER_TEMPLE_MQ_GS_BEFORE_UPPER_WATER_SWITCH,     { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    locationTable[RC_WATER_TEMPLE_MQ_GS_FREESTANDING_KEY_AREA] =         Location::GSToken(RC_WATER_TEMPLE_MQ_GS_FREESTANDING_KEY_AREA,         RCQUEST_MQ,      RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9480,   0x08, "MQ GS Freestanding Key Area",      "Water Temple MQ GS Freestanding Key Area",         RHT_WATER_TEMPLE_MQ_GS_FREESTANDING_KEY_AREA,         { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    locationTable[RC_WATER_TEMPLE_MQ_GS_LIZALFOS_HALLWAY] =              Location::GSToken(RC_WATER_TEMPLE_MQ_GS_LIZALFOS_HALLWAY,              RCQUEST_MQ,      RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9473,   0x01, "MQ GS Lizalfos Hallway",           "Water Temple MQ GS Lizalfos Hallway",              RHT_WATER_TEMPLE_MQ_GS_LIZALFOS_HALLWAY,              { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    locationTable[RC_WATER_TEMPLE_MQ_GS_RIVER] =                         Location::GSToken(RC_WATER_TEMPLE_MQ_GS_RIVER,                         RCQUEST_MQ,      RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9474,   0x02, "MQ GS River",                      "Water Temple MQ GS River",                         RHT_WATER_TEMPLE_MQ_GS_RIVER,                         { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    locationTable[RC_WATER_TEMPLE_MQ_GS_TRIPLE_WALL_TORCH] =             Location::GSToken(RC_WATER_TEMPLE_MQ_GS_TRIPLE_WALL_TORCH,             RCQUEST_MQ,      RCAREA_WATER_TEMPLE,          SCENE_WATER_TEMPLE,         9488,   0x10, "MQ GS Triple Wall Torch",          "Water Temple MQ GS Triple Wall Torch",             RHT_WATER_TEMPLE_MQ_GS_TRIPLE_WALL_TORCH,             { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE);
    // Spirit Temple
    locationTable[RC_SPIRIT_TEMPLE_GS_HALL_AFTER_SUN_BLOCK_ROOM] =       Location::GSToken(RC_SPIRIT_TEMPLE_GS_HALL_AFTER_SUN_BLOCK_ROOM,       RCQUEST_VANILLA, RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9729,   0x01, "GS Hall After Sun Block Room",     "Spirit Temple GS Hall After Sun Block Room",       RHT_SPIRIT_TEMPLE_GS_HALL_AFTER_SUN_BLOCK_ROOM,       { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_GS_BOULDER_ROOM] =                    Location::GSToken(RC_SPIRIT_TEMPLE_GS_BOULDER_ROOM,                    RCQUEST_VANILLA, RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9730,   0x02, "GS Boulder Room",                  "Spirit Temple GS Boulder Room",                    RHT_SPIRIT_TEMPLE_GS_BOULDER_ROOM,                    { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_GS_LOBBY] =                           Location::GSToken(RC_SPIRIT_TEMPLE_GS_LOBBY,                           RCQUEST_VANILLA, RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9732,   0x04, "GS Lobby",                         "Spirit Temple GS Lobby",                           RHT_SPIRIT_TEMPLE_GS_LOBBY,                           { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_GS_SUN_ON_FLOOR_ROOM] =               Location::GSToken(RC_SPIRIT_TEMPLE_GS_SUN_ON_FLOOR_ROOM,               RCQUEST_VANILLA, RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9736,   0x08, "GS Sun on Floor Room",             "Spirit Temple GS Sun on Floor Room",               RHT_SPIRIT_TEMPLE_GS_SUN_ON_FLOOR_ROOM,               { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_GS_METAL_FENCE] =                     Location::GSToken(RC_SPIRIT_TEMPLE_GS_METAL_FENCE,                     RCQUEST_VANILLA, RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9744,   0x10, "GS Metal Fence",                   "Spirit Temple GS Metal Fence",                     RHT_SPIRIT_TEMPLE_GS_METAL_FENCE,                     { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_GS_SYMPHONY_ROOM] =                Location::GSToken(RC_SPIRIT_TEMPLE_MQ_GS_SYMPHONY_ROOM,                RCQUEST_MQ,      RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9736,   0x08, "MQ GS Symphony Room",              "Spirit Temple MQ GS Symphony Room",                RHT_SPIRIT_TEMPLE_MQ_GS_SYMPHONY_ROOM,                { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_GS_LEEVER_ROOM] =                  Location::GSToken(RC_SPIRIT_TEMPLE_MQ_GS_LEEVER_ROOM,                  RCQUEST_MQ,      RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9730,   0x02, "MQ GS Leever Room",                "Spirit Temple MQ GS Leever Room",                  RHT_SPIRIT_TEMPLE_MQ_GS_LEEVER_ROOM,                  { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_GS_NINE_THRONES_ROOM_WEST] =       Location::GSToken(RC_SPIRIT_TEMPLE_MQ_GS_NINE_THRONES_ROOM_WEST,       RCQUEST_MQ,      RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9732,   0x04, "MQ GS Nine Thrones Room West",     "Spirit Temple MQ GS Nine Thrones Room West",       RHT_SPIRIT_TEMPLE_MQ_GS_NINE_THRONES_ROOM_WEST,       { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_GS_NINE_THRONES_ROOM_NORTH] =      Location::GSToken(RC_SPIRIT_TEMPLE_MQ_GS_NINE_THRONES_ROOM_NORTH,      RCQUEST_MQ,      RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9744,   0x10, "MQ GS Nine Thrones Room North",    "Spirit Temple MQ GS Nine Thrones Room North",      RHT_SPIRIT_TEMPLE_MQ_GS_NINE_THRONES_ROOM_NORTH,      { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    locationTable[RC_SPIRIT_TEMPLE_MQ_GS_SUN_BLOCK_ROOM] =               Location::GSToken(RC_SPIRIT_TEMPLE_MQ_GS_SUN_BLOCK_ROOM,               RCQUEST_MQ,      RCAREA_SPIRIT_TEMPLE,         SCENE_SPIRIT_TEMPLE,        9729,   0x01, "MQ GS Sun Block Room",             "Spirit Temple MQ GS Sun Block Room",               RHT_SPIRIT_TEMPLE_MQ_GS_SUN_BLOCK_ROOM,               { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE);
    // Shadow Temple
    locationTable[RC_SHADOW_TEMPLE_GS_SINGLE_GIANT_POT] =                Location::GSToken(RC_SHADOW_TEMPLE_GS_SINGLE_GIANT_POT,                RCQUEST_VANILLA, RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        9985,   0x01, "GS Single Giant Pot",              "Shadow Temple GS Single Giant Pot",                RHT_SHADOW_TEMPLE_GS_SINGLE_GIANT_POT,                { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_GS_FALLING_SPIKES_ROOM] =             Location::GSToken(RC_SHADOW_TEMPLE_GS_FALLING_SPIKES_ROOM,             RCQUEST_VANILLA, RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        9986,   0x02, "GS Falling Spikes Room",           "Shadow Temple GS Falling Spikes Room",             RHT_SHADOW_TEMPLE_GS_FALLING_SPIKES_ROOM,             { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_GS_TRIPLE_GIANT_POT] =                Location::GSToken(RC_SHADOW_TEMPLE_GS_TRIPLE_GIANT_POT,                RCQUEST_VANILLA, RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        9988,   0x04, "GS Triple Giant Pot",              "Shadow Temple GS Triple Giant Pot",                RHT_SHADOW_TEMPLE_GS_TRIPLE_GIANT_POT,                { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_GS_LIKE_LIKE_ROOM] =                  Location::GSToken(RC_SHADOW_TEMPLE_GS_LIKE_LIKE_ROOM,                  RCQUEST_VANILLA, RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        9992,   0x08, "GS Like Like Room",                "Shadow Temple GS Like Like Room",                  RHT_SHADOW_TEMPLE_GS_LIKE_LIKE_ROOM,                  { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_GS_NEAR_SHIP] =                       Location::GSToken(RC_SHADOW_TEMPLE_GS_NEAR_SHIP,                       RCQUEST_VANILLA, RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        10000,  0x10, "GS Near Ship",                     "Shadow Temple GS Near Ship",                       RHT_SHADOW_TEMPLE_GS_NEAR_SHIP,                       { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_GS_FALLING_SPIKES_ROOM] =          Location::GSToken(RC_SHADOW_TEMPLE_MQ_GS_FALLING_SPIKES_ROOM,          RCQUEST_MQ,      RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        9986,   0x02, "MQ GS Falling Spikes Room",        "Shadow Temple MQ GS Falling Spikes Room",          RHT_SHADOW_TEMPLE_MQ_GS_FALLING_SPIKES_ROOM,          { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_GS_WIND_HINT_ROOM] =               Location::GSToken(RC_SHADOW_TEMPLE_MQ_GS_WIND_HINT_ROOM,               RCQUEST_MQ,      RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        9985,   0x01, "MQ GS Wind Hint Room",             "Shadow Temple MQ GS Wind Hint Room",               RHT_SHADOW_TEMPLE_MQ_GS_WIND_HINT_ROOM,               { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_GS_AFTER_WIND] =                   Location::GSToken(RC_SHADOW_TEMPLE_MQ_GS_AFTER_WIND,                   RCQUEST_MQ,      RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        9992,   0x08, "MQ GS After Wind",                 "Shadow Temple MQ GS After Wind",                   RHT_SHADOW_TEMPLE_MQ_GS_AFTER_WIND,                   { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_GS_AFTER_SHIP] =                   Location::GSToken(RC_SHADOW_TEMPLE_MQ_GS_AFTER_SHIP,                   RCQUEST_MQ,      RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        10000,  0x10, "MQ GS After Ship",                 "Shadow Temple MQ GS After Ship",                   RHT_SHADOW_TEMPLE_MQ_GS_AFTER_SHIP,                   { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    locationTable[RC_SHADOW_TEMPLE_MQ_GS_NEAR_BOSS] =                    Location::GSToken(RC_SHADOW_TEMPLE_MQ_GS_NEAR_BOSS,                    RCQUEST_MQ,      RCAREA_SHADOW_TEMPLE,         SCENE_SHADOW_TEMPLE,        9988,   0x04, "MQ GS Near Boss",                  "Shadow Temple MQ GS Near Boss",                    RHT_SHADOW_TEMPLE_MQ_GS_NEAR_BOSS,                    { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE);
    // Bottom of the Well
    locationTable[RC_BOTTOM_OF_THE_WELL_GS_LIKE_LIKE_CAGE] =             Location::GSToken(RC_BOTTOM_OF_THE_WELL_GS_LIKE_LIKE_CAGE,             RCQUEST_VANILLA, RCAREA_BOTTOM_OF_THE_WELL,    SCENE_BOTTOM_OF_THE_WELL,   10241,  0x01, "GS Like Like Cage",                "Bottom of the Well GS Like Like Cage",             RHT_BOTTOM_OF_THE_WELL_GS_LIKE_LIKE_CAGE,             { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_GS_EAST_INNER_ROOM] =            Location::GSToken(RC_BOTTOM_OF_THE_WELL_GS_EAST_INNER_ROOM,            RCQUEST_VANILLA, RCAREA_BOTTOM_OF_THE_WELL,    SCENE_BOTTOM_OF_THE_WELL,   10242,  0x02, "GS East Inner Room",               "Bottom of the Well GS East Inner Room",            RHT_BOTTOM_OF_THE_WELL_GS_EAST_INNER_ROOM,            { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_GS_WEST_INNER_ROOM] =            Location::GSToken(RC_BOTTOM_OF_THE_WELL_GS_WEST_INNER_ROOM,            RCQUEST_VANILLA, RCAREA_BOTTOM_OF_THE_WELL,    SCENE_BOTTOM_OF_THE_WELL,   10244,  0x04, "GS West Inner Room",               "Bottom of the Well GS West Inner Room",            RHT_BOTTOM_OF_THE_WELL_GS_WEST_INNER_ROOM,            { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_MQ_GS_BASEMENT] =                Location::GSToken(RC_BOTTOM_OF_THE_WELL_MQ_GS_BASEMENT,                RCQUEST_MQ,      RCAREA_BOTTOM_OF_THE_WELL,    SCENE_BOTTOM_OF_THE_WELL,   10241,  0x01, "MQ GS Basement",                   "Bottom of the Well MQ GS Basement",                RHT_BOTTOM_OF_THE_WELL_MQ_GS_BASEMENT,                { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_MQ_GS_COFFIN_ROOM] =             Location::GSToken(RC_BOTTOM_OF_THE_WELL_MQ_GS_COFFIN_ROOM,             RCQUEST_MQ,      RCAREA_BOTTOM_OF_THE_WELL,    SCENE_BOTTOM_OF_THE_WELL,   10244,  0x04, "MQ GS Coffin Room",                "Bottom of the Well MQ GS Coffin Room",             RHT_BOTTOM_OF_THE_WELL_MQ_GS_COFFIN_ROOM,             { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    locationTable[RC_BOTTOM_OF_THE_WELL_MQ_GS_WEST_INNER_ROOM] =         Location::GSToken(RC_BOTTOM_OF_THE_WELL_MQ_GS_WEST_INNER_ROOM,         RCQUEST_MQ,      RCAREA_BOTTOM_OF_THE_WELL,    SCENE_BOTTOM_OF_THE_WELL,   10242,  0x02, "MQ GS West Inner Room",            "Bottom of the Well MQ GS West Inner Room",         RHT_BOTTOM_OF_THE_WELL_MQ_GS_WEST_INNER_ROOM,         { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_BOTTOM_OF_THE_WELL);
    // Ice Cavern
    locationTable[RC_ICE_CAVERN_GS_PUSH_BLOCK_ROOM] =                    Location::GSToken(RC_ICE_CAVERN_GS_PUSH_BLOCK_ROOM,                    RCQUEST_VANILLA, RCAREA_ICE_CAVERN,            SCENE_ICE_CAVERN,           10497,  0x01, "GS Push Block Room",               "Ice Cavern GS Push Block Room",                    RHT_ICE_CAVERN_GS_PUSH_BLOCK_ROOM,                    { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN);
    locationTable[RC_ICE_CAVERN_GS_SPINNING_SCYTHE_ROOM] =               Location::GSToken(RC_ICE_CAVERN_GS_SPINNING_SCYTHE_ROOM,               RCQUEST_VANILLA, RCAREA_ICE_CAVERN,            SCENE_ICE_CAVERN,           10498,  0x02, "GS Spinning Scythe Room",          "Ice Cavern GS Spinning Scythe Room",               RHT_ICE_CAVERN_GS_SPINNING_SCYTHE_ROOM,               { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN);
    locationTable[RC_ICE_CAVERN_GS_HEART_PIECE_ROOM] =                   Location::GSToken(RC_ICE_CAVERN_GS_HEART_PIECE_ROOM,                   RCQUEST_VANILLA, RCAREA_ICE_CAVERN,            SCENE_ICE_CAVERN,           10500,  0x04, "GS Heart Piece Room",              "Ice Cavern GS Heart Piece Room",                   RHT_ICE_CAVERN_GS_HEART_PIECE_ROOM,                   { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN);
    locationTable[RC_ICE_CAVERN_MQ_GS_SCARECROW] =                       Location::GSToken(RC_ICE_CAVERN_MQ_GS_SCARECROW,                       RCQUEST_MQ,      RCAREA_ICE_CAVERN,            SCENE_ICE_CAVERN,           10497,  0x01, "MQ GS Scarecrow",                  "Ice Cavern MQ GS Scarecrow",                       RHT_ICE_CAVERN_MQ_GS_SCARECROW,                       { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN);
    locationTable[RC_ICE_CAVERN_MQ_GS_ICE_BLOCK] =                       Location::GSToken(RC_ICE_CAVERN_MQ_GS_ICE_BLOCK,                       RCQUEST_MQ,      RCAREA_ICE_CAVERN,            SCENE_ICE_CAVERN,           10500,  0x04, "MQ GS Ice Block",                  "Ice Cavern MQ GS Ice Block",                       RHT_ICE_CAVERN_MQ_GS_ICE_BLOCK,                       { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN);
    locationTable[RC_ICE_CAVERN_MQ_GS_RED_ICE] =                         Location::GSToken(RC_ICE_CAVERN_MQ_GS_RED_ICE,                         RCQUEST_MQ,      RCAREA_ICE_CAVERN,            SCENE_ICE_CAVERN,           10498,  0x02, "MQ GS Red Ice",                    "Ice Cavern MQ GS Red Ice",                         RHT_ICE_CAVERN_MQ_GS_RED_ICE,                         { Category::cSkulltula }, SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN);
    // Overworld
    // Kokiri Forest RandomizerCheck                                                       RandomizerCheck                                      Quest            Area                          Scene ID                    params  Flag  Short Name                          Spoiler Name                                        Hint Text Key                                         Categories                Map Index Collection Check Group
    locationTable[RC_KF_GS_BEAN_PATCH] =                                 Location::GSToken(RC_KF_GS_BEAN_PATCH,                                 RCQUEST_BOTH,    RCAREA_KOKIRI_FOREST,         SCENE_KOKIRI_FOREST,        27649,  0x01, "GS Bean Patch",                    "KF GS Bean Patch",                                 RHT_KF_GS_BEAN_PATCH,                                 { Category::cSkulltula }, 0x0C, SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_GS_KNOW_IT_ALL_HOUSE] =                          Location::GSToken(RC_KF_GS_KNOW_IT_ALL_HOUSE,                          RCQUEST_BOTH,    RCAREA_KOKIRI_FOREST,         SCENE_KOKIRI_FOREST,        19458,  0x02, "GS Know It All House",             "KF GS Know It All House",                          RHT_KF_GS_KNOW_IT_ALL_HOUSE,                          { Category::cSkulltula }, 0x0C, SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_GS_HOUSE_OF_TWINS] =                             Location::GSToken(RC_KF_GS_HOUSE_OF_TWINS,                             RCQUEST_BOTH,    RCAREA_KOKIRI_FOREST,         SCENE_KOKIRI_FOREST,        19460,  0x04, "GS House of Twins",                "KF GS House of Twins",                             RHT_KF_GS_HOUSE_OF_TWINS,                             { Category::cSkulltula }, 0x0C, SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    // Lost Woods
    locationTable[RC_LW_GS_BEAN_PATCH_NEAR_BRIDGE] =                     Location::GSToken(RC_LW_GS_BEAN_PATCH_NEAR_BRIDGE,                     RCQUEST_BOTH,    RCAREA_LOST_WOODS,            SCENE_LOST_WOODS,           27905,  0x01, "GS Bean Patch Near Bridge",        "LW GS Bean Patch Near Bridge",                     RHT_LW_GS_BEAN_PATCH_NEAR_BRIDGE,                     { Category::cSkulltula }, 0x0D, SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    locationTable[RC_LW_GS_BEAN_PATCH_NEAR_THEATER] =                    Location::GSToken(RC_LW_GS_BEAN_PATCH_NEAR_THEATER,                    RCQUEST_BOTH,    RCAREA_LOST_WOODS,            SCENE_LOST_WOODS,           27906,  0x02, "GS Bean Patch Near Theater",       "LW GS Bean Patch Near Theater",                    RHT_LW_GS_BEAN_PATCH_NEAR_THEATER,                    { Category::cSkulltula }, 0x0D, SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    locationTable[RC_LW_GS_ABOVE_THEATER] =                              Location::GSToken(RC_LW_GS_ABOVE_THEATER,                              RCQUEST_BOTH,    RCAREA_LOST_WOODS,            SCENE_LOST_WOODS,           19716,  0x04, "GS Above Theater",                 "LW GS Above Theater",                              RHT_LW_GS_ABOVE_THEATER,                              { Category::cSkulltula }, 0x0D, SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    locationTable[RC_SFM_GS] =                                           Location::GSToken(RC_SFM_GS,                                           RCQUEST_BOTH,    RCAREA_SACRED_FOREST_MEADOW,  SCENE_SACRED_FOREST_MEADOW, 19720,  0x08, "GS",                               "SFM GS",                                           RHT_SFM_GS,                                           { Category::cSkulltula }, 0x0D, SpoilerCollectionCheckGroup::GROUP_LOST_WOODS);
    // Hyrule Field
    locationTable[RC_HF_GS_COW_GROTTO] =                                 Location::GSToken(RC_HF_GS_COW_GROTTO,                                 RCQUEST_BOTH,    RCAREA_HYRULE_FIELD,          SCENE_GROTTOS,              10753,  0x01, "GS Cow Grotto",                    "HF GS Cow Grotto",                                 RHT_HF_GS_COW_GROTTO,                                 { Category::cSkulltula }, 0x0A, SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD);
    locationTable[RC_HF_GS_NEAR_KAK_GROTTO] =                            Location::GSToken(RC_HF_GS_NEAR_KAK_GROTTO,                            RCQUEST_BOTH,    RCAREA_HYRULE_FIELD,          SCENE_GROTTOS,              10754,  0x02, "GS Near Kak Grotto",               "HF GS Near Kak Grotto",                            RHT_HF_GS_NEAR_KAK_GROTTO,                            { Category::cSkulltula }, 0x0A, SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD);
    // Lake Hylia
    locationTable[RC_LH_GS_BEAN_PATCH] =                                 Location::GSToken(RC_LH_GS_BEAN_PATCH,                                 RCQUEST_BOTH,    RCAREA_LAKE_HYLIA,            SCENE_LAKE_HYLIA,           29185,  0x01, "GS Bean Patch",                    "LH GS Bean Patch",                                 RHT_LH_GS_BEAN_PATCH,                                 { Category::cSkulltula }, 0x12, SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA);
    locationTable[RC_LH_GS_SMALL_ISLAND] =                               Location::GSToken(RC_LH_GS_SMALL_ISLAND,                               RCQUEST_BOTH,    RCAREA_LAKE_HYLIA,            SCENE_LAKE_HYLIA,           20994,  0x02, "GS Small Island",                  "LH GS Small Island",                               RHT_LH_GS_SMALL_ISLAND,                               { Category::cSkulltula }, 0x12, SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA);
    locationTable[RC_LH_GS_LAB_WALL] =                                   Location::GSToken(RC_LH_GS_LAB_WALL,                                   RCQUEST_BOTH,    RCAREA_LAKE_HYLIA,            SCENE_LAKE_HYLIA,           20996,  0x04, "GS Lab Wall",                      "LH GS Lab Wall",                                   RHT_LH_GS_LAB_WALL,                                   { Category::cSkulltula }, 0x12, SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA);
    locationTable[RC_LH_GS_LAB_CRATE] =                                  Location::GSToken(RC_LH_GS_LAB_CRATE,                                  RCQUEST_BOTH,    RCAREA_LAKE_HYLIA,            SCENE_LAKESIDE_LABORATORY,  -28152, 0x08, "GS Lab Crate",                     "LH GS Lab Crate",                                  RHT_LH_GS_LAB_CRATE,                                  { Category::cSkulltula }, 0x12, SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA);
    locationTable[RC_LH_GS_TREE] =                                       Location::GSToken(RC_LH_GS_TREE,                                       RCQUEST_BOTH,    RCAREA_LAKE_HYLIA,            SCENE_LAKE_HYLIA,           21008,  0x10, "GS Tree",                          "LH GS Tree",                                       RHT_LH_GS_TREE,                                       { Category::cSkulltula }, 0x12, SpoilerCollectionCheckGroup::GROUP_LAKE_HYLIA);
    // Gerudo Valley
    locationTable[RC_GV_GS_BEAN_PATCH] =                                 Location::GSToken(RC_GV_GS_BEAN_PATCH,                                 RCQUEST_BOTH,    RCAREA_GERUDO_VALLEY,         SCENE_GERUDO_VALLEY,        29441,  0x01, "GS Bean Patch",                    "GV GS Bean Patch",                                 RHT_GV_GS_BEAN_PATCH,                                 { Category::cSkulltula }, 0x13, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_GV_GS_SMALL_BRIDGE] =                               Location::GSToken(RC_GV_GS_SMALL_BRIDGE,                               RCQUEST_BOTH,    RCAREA_GERUDO_VALLEY,         SCENE_GERUDO_VALLEY,        21250,  0x02, "GS Small Bridge",                  "GV GS Small Bridge",                               RHT_GV_GS_SMALL_BRIDGE,                               { Category::cSkulltula }, 0x13, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_GV_GS_PILLAR] =                                     Location::GSToken(RC_GV_GS_PILLAR,                                     RCQUEST_BOTH,    RCAREA_GERUDO_VALLEY,         SCENE_GERUDO_VALLEY,        21252,  0x04, "GS Pillar",                        "GV GS Pillar",                                     RHT_GV_GS_PILLAR,                                     { Category::cSkulltula }, 0x13, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_GV_GS_BEHIND_TENT] =                                Location::GSToken(RC_GV_GS_BEHIND_TENT,                                RCQUEST_BOTH,    RCAREA_GERUDO_VALLEY,         SCENE_GERUDO_VALLEY,        21256,  0x08, "GS Behind Tent",                   "GV GS Behind Tent",                                RHT_GV_GS_BEHIND_TENT,                                { Category::cSkulltula }, 0x13, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    // Gerudo Fortress
    locationTable[RC_GF_GS_ARCHERY_RANGE] =                              Location::GSToken(RC_GF_GS_ARCHERY_RANGE,                              RCQUEST_BOTH,    RCAREA_GERUDO_FORTRESS,       SCENE_GERUDOS_FORTRESS,     21505,  0x01, "GS Archery Range",                 "GF GS Archery Range",                              RHT_GF_GS_ARCHERY_RANGE,                              { Category::cSkulltula }, 0x14, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_GF_GS_TOP_FLOOR] =                                  Location::GSToken(RC_GF_GS_TOP_FLOOR,                                  RCQUEST_BOTH,    RCAREA_GERUDO_FORTRESS,       SCENE_GERUDOS_FORTRESS,     21506,  0x02, "GS Top Floor",                     "GF GS Top Floor",                                  RHT_GF_GS_TOP_FLOOR,                                  { Category::cSkulltula }, 0x14, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    // Wasteland & Desert Colossus
    locationTable[RC_WASTELAND_GS] =                                     Location::GSToken(RC_WASTELAND_GS,                                     RCQUEST_BOTH,    RCAREA_WASTELAND,             SCENE_HAUNTED_WASTELAND,    13570,  0x02, "GS",                               "Wasteland GS",                                     RHT_WASTELAND_GS,                                     { Category::cSkulltula }, 0x15, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_COLOSSUS_GS_BEAN_PATCH] =                           Location::GSToken(RC_COLOSSUS_GS_BEAN_PATCH,                           RCQUEST_BOTH,    RCAREA_DESERT_COLOSSUS,       SCENE_DESERT_COLOSSUS,      29953,  0x01, "GS Bean Patch",                    "Colossus GS Bean Patch",                           RHT_COLOSSUS_GS_BEAN_PATCH,                           { Category::cSkulltula }, 0x15, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_COLOSSUS_GS_HILL] =                                 Location::GSToken(RC_COLOSSUS_GS_HILL,                                 RCQUEST_BOTH,    RCAREA_DESERT_COLOSSUS,       SCENE_DESERT_COLOSSUS,      21764,  0x04, "GS Hill",                          "Colossus GS Hill",                                 RHT_COLOSSUS_GS_HILL,                                 { Category::cSkulltula }, 0x15, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_COLOSSUS_GS_TREE] =                                 Location::GSToken(RC_COLOSSUS_GS_TREE,                                 RCQUEST_BOTH,    RCAREA_DESERT_COLOSSUS,       SCENE_DESERT_COLOSSUS,      21768,  0x08, "GS Tree",                          "Colossus GS Tree",                                 RHT_COLOSSUS_GS_TREE,                                 { Category::cSkulltula }, 0x15, SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    // Hyrule Castle, Market, and Outside Ganon's Castle
    locationTable[RC_OGC_GS] =                                           Location::GSToken(RC_OGC_GS,                                           RCQUEST_BOTH,    RCAREA_HYRULE_CASTLE,         SCENE_OUTSIDE_GANONS_CASTLE,11777,  0x01, "OGC GS",                           "OGC GS",                                           RHT_OGC_GS,                                           { Category::cSkulltula }, 0x0E, SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_HC_GS_STORMS_GROTTO] =                              Location::GSToken(RC_HC_GS_STORMS_GROTTO,                              RCQUEST_BOTH,    RCAREA_HYRULE_CASTLE,         SCENE_GROTTOS,              11778,  0x02, "GS Storms Grotto",                 "HC GS Storms Grotto",                              RHT_HC_GS_STORMS_GROTTO,                              { Category::cSkulltula }, 0x0E, SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_HC_GS_TREE] =                                       Location::GSToken(RC_HC_GS_TREE,                                       RCQUEST_BOTH,    RCAREA_HYRULE_CASTLE,         SCENE_HYRULE_CASTLE,        -29180, 0x04, "GS Tree",                          "HC GS Tree",                                       RHT_HC_GS_TREE,                                       { Category::cSkulltula }, 0x0E, SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_GS_GUARD_HOUSE] =                            Location::GSToken(RC_MARKET_GS_GUARD_HOUSE,                            RCQUEST_BOTH,    RCAREA_MARKET,                SCENE_MARKET_GUARD_HOUSE,   -29176, 0x08, "Market GS Guard House",            "Market GS Guard House",                            RHT_MARKET_GS_GUARD_HOUSE,                            { Category::cSkulltula }, 0x0E, SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    // Kakariko
    locationTable[RC_KAK_GS_HOUSE_UNDER_CONSTRUCTION] =                  Location::GSToken(RC_KAK_GS_HOUSE_UNDER_CONSTRUCTION,                  RCQUEST_BOTH,    RCAREA_KAKARIKO_VILLAGE,      SCENE_KAKARIKO_VILLAGE,     20488,  0x08, "GS House Under Construction",      "Kak GS House Under Construction",                  RHT_KAK_GS_HOUSE_UNDER_CONSTRUCTION,                  { Category::cSkulltula }, 0x10, SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_GS_SKULLTULA_HOUSE] =                           Location::GSToken(RC_KAK_GS_SKULLTULA_HOUSE,                           RCQUEST_BOTH,    RCAREA_KAKARIKO_VILLAGE,      SCENE_KAKARIKO_VILLAGE,     20496,  0x10, "GS Skulltula House",               "Kak GS Skulltula House",                           RHT_KAK_GS_SKULLTULA_HOUSE,                           { Category::cSkulltula }, 0x10, SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_GS_GUARDS_HOUSE] =                              Location::GSToken(RC_KAK_GS_GUARDS_HOUSE,                              RCQUEST_BOTH,    RCAREA_KAKARIKO_VILLAGE,      SCENE_KAKARIKO_VILLAGE,     20482,  0x02, "GS Guards House",                  "Kak GS Guards House",                              RHT_KAK_GS_GUARDS_HOUSE,                              { Category::cSkulltula }, 0x10, SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_GS_TREE] =                                      Location::GSToken(RC_KAK_GS_TREE,                                      RCQUEST_BOTH,    RCAREA_KAKARIKO_VILLAGE,      SCENE_KAKARIKO_VILLAGE,     -28640, 0x20, "GS Tree",                          "Kak GS Tree",                                      RHT_KAK_GS_TREE,                                      { Category::cSkulltula }, 0x10, SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_GS_WATCHTOWER] =                                Location::GSToken(RC_KAK_GS_WATCHTOWER,                                RCQUEST_BOTH,    RCAREA_KAKARIKO_VILLAGE,      SCENE_KAKARIKO_VILLAGE,     20484,  0x04, "GS Watchtower",                    "Kak GS Watchtower",                                RHT_KAK_GS_WATCHTOWER,                                { Category::cSkulltula }, 0x10, SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_GS_ABOVE_IMPAS_HOUSE] =                         Location::GSToken(RC_KAK_GS_ABOVE_IMPAS_HOUSE,                         RCQUEST_BOTH,    RCAREA_KAKARIKO_VILLAGE,      SCENE_KAKARIKO_VILLAGE,     20544,  0x40, "GS Above Impas House",             "Kak GS Above Impas House",                         RHT_KAK_GS_ABOVE_IMPAS_HOUSE,                         { Category::cSkulltula }, 0x10, SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    // Graveyard
    locationTable[RC_GRAVEYARD_GS_WALL] =                                Location::GSToken(RC_GRAVEYARD_GS_WALL,                                RCQUEST_BOTH,    RCAREA_GRAVEYARD,             SCENE_GRAVEYARD,            20608,  0x80, "GS Wall",                          "Graveyard GS Wall",                                RHT_GRAVEYARD_GS_WALL,                                { Category::cSkulltula }, 0x10, SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_GRAVEYARD_GS_BEAN_PATCH] =                          Location::GSToken(RC_GRAVEYARD_GS_BEAN_PATCH,                          RCQUEST_BOTH,    RCAREA_GRAVEYARD,             SCENE_GRAVEYARD,            28673,  0x01, "GS Bean Patch",                    "Graveyard GS Bean Patch",                          RHT_GRAVEYARD_GS_BEAN_PATCH,                          { Category::cSkulltula }, 0x10, SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    // Death Mountain
    locationTable[RC_DMC_GS_BEAN_PATCH] =                                Location::GSToken(RC_DMC_GS_BEAN_PATCH,                                RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_CRATER, SCENE_DEATH_MOUNTAIN_CRATER,28417,  0x01, "GS Bean Patch",                    "DMC GS Bean Patch",                                RHT_DMC_GS_BEAN_PATCH,                                { Category::cSkulltula }, 0x0F, SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMC_GS_CRATE] =                                     Location::GSToken(RC_DMC_GS_CRATE,                                     RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_CRATER, SCENE_DEATH_MOUNTAIN_CRATER,-28800, 0x80, "GS Crate",                         "DMC GS Crate",                                     RHT_DMC_GS_CRATE,                                     { Category::cSkulltula }, 0x0F, SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMT_GS_BEAN_PATCH] =                                Location::GSToken(RC_DMT_GS_BEAN_PATCH,                                RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_TRAIL,  SCENE_DEATH_MOUNTAIN_TRAIL, 28418,  0x02, "GS Bean Patch",                    "DMT GS Bean Patch",                                RHT_DMT_GS_BEAN_PATCH,                                { Category::cSkulltula }, 0x0F, SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMT_GS_NEAR_KAK] =                                  Location::GSToken(RC_DMT_GS_NEAR_KAK,                                  RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_TRAIL,  SCENE_DEATH_MOUNTAIN_TRAIL, 12036,  0x04, "GS Near Kak",                      "DMT GS Near Kak",                                  RHT_DMT_GS_NEAR_KAK,                                  { Category::cSkulltula }, 0x0F, SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMT_GS_ABOVE_DODONGOS_CAVERN] =                     Location::GSToken(RC_DMT_GS_ABOVE_DODONGOS_CAVERN,                     RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_TRAIL,  SCENE_DEATH_MOUNTAIN_TRAIL, 20232,  0x08, "GS Above Dodongos Cavern",         "DMT GS Above Dodongos Cavern",                     RHT_DMT_GS_ABOVE_DODONGOS_CAVERN,                     { Category::cSkulltula }, 0x0F, SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_DMT_GS_FALLING_ROCKS_PATH] =                        Location::GSToken(RC_DMT_GS_FALLING_ROCKS_PATH,                        RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_TRAIL,  SCENE_DEATH_MOUNTAIN_TRAIL, 20240,  0x10, "GS Falling Rocks Path",            "DMT GS Falling Rocks Path",                        RHT_DMT_GS_FALLING_ROCKS_PATH,                        { Category::cSkulltula }, 0x0F, SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_GC_GS_CENTER_PLATFORM] =                            Location::GSToken(RC_GC_GS_CENTER_PLATFORM,                            RCQUEST_BOTH,    RCAREA_GORON_CITY,            SCENE_GORON_CITY,           12064,  0x20, "GS Center Platform",               "GC GS Center Platform",                            RHT_GC_GS_CENTER_PLATFORM,                            { Category::cSkulltula }, 0x0F, SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_GS_BOULDER_MAZE] =                               Location::GSToken(RC_GC_GS_BOULDER_MAZE,                               RCQUEST_BOTH,    RCAREA_GORON_CITY,            SCENE_GORON_CITY,           -28864, 0x40, "GS Boulder Maze",                  "GC GS Boulder Maze",                               RHT_GC_GS_BOULDER_MAZE,                               { Category::cSkulltula }, 0x0F, SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    // Zora's River, Domain, and Fountain
    locationTable[RC_ZR_GS_LADDER] =                                     Location::GSToken(RC_ZR_GS_LADDER,                                     RCQUEST_BOTH,    RCAREA_ZORAS_RIVER,           SCENE_ZORAS_RIVER,          20737,  0x01, "GS Ladder",                        "ZR GS Ladder",                                     RHT_ZR_GS_LADDER,                                     { Category::cSkulltula }, 0x11, SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_GS_TREE] =                                       Location::GSToken(RC_ZR_GS_TREE,                                       RCQUEST_BOTH,    RCAREA_ZORAS_RIVER,           SCENE_ZORAS_RIVER,          -28414, 0x02, "GS Tree",                          "ZR GS Tree",                                       RHT_ZR_GS_TREE,                                       { Category::cSkulltula }, 0x11, SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_GS_ABOVE_BRIDGE] =                               Location::GSToken(RC_ZR_GS_ABOVE_BRIDGE,                               RCQUEST_BOTH,    RCAREA_ZORAS_RIVER,           SCENE_ZORAS_RIVER,          20744,  0x08, "GS Above Bridge",                  "ZR GS Above Bridge",                               RHT_ZR_GS_ABOVE_BRIDGE,                               { Category::cSkulltula }, 0x11, SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZR_GS_NEAR_RAISED_GROTTOS] =                        Location::GSToken(RC_ZR_GS_NEAR_RAISED_GROTTOS,                        RCQUEST_BOTH,    RCAREA_ZORAS_RIVER,           SCENE_ZORAS_RIVER,          20752,  0x10, "GS Near Raised Grottos",           "ZR GS Near Raised Grottos",                        RHT_ZR_GS_NEAR_RAISED_GROTTOS,                        { Category::cSkulltula }, 0x11, SpoilerCollectionCheckGroup::GROUP_ZORAS_RIVER);
    locationTable[RC_ZD_GS_FROZEN_WATERFALL] =                           Location::GSToken(RC_ZD_GS_FROZEN_WATERFALL,                           RCQUEST_BOTH,    RCAREA_ZORAS_DOMAIN,          SCENE_ZORAS_DOMAIN,         20800,  0x40, "GS Frozen Waterfall",              "ZD GS Frozen Waterfall",                           RHT_ZD_GS_FROZEN_WATERFALL,                           { Category::cSkulltula }, 0x11, SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZF_GS_ABOVE_THE_LOG] =                              Location::GSToken(RC_ZF_GS_ABOVE_THE_LOG,                              RCQUEST_BOTH,    RCAREA_ZORAS_FOUNTAIN,        SCENE_ZORAS_FOUNTAIN,       20740,  0x04, "GS Above The Log",                 "ZF GS Above The Log",                              RHT_ZF_GS_ABOVE_THE_LOG,                              { Category::cSkulltula }, 0x11, SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZF_GS_HIDDEN_CAVE] =                                Location::GSToken(RC_ZF_GS_HIDDEN_CAVE,                                RCQUEST_BOTH,    RCAREA_ZORAS_FOUNTAIN,        SCENE_ZORAS_FOUNTAIN,       20768,  0x20, "GS Hidden Cave",                   "ZF GS Hidden Cave",                                RHT_ZF_GS_HIDDEN_CAVE,                                { Category::cSkulltula }, 0x11, SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZF_GS_TREE] =                                       Location::GSToken(RC_ZF_GS_TREE,                                       RCQUEST_BOTH,    RCAREA_ZORAS_FOUNTAIN,        SCENE_ZORAS_FOUNTAIN,       -28288, 0x80, "GS Tree",                          "ZF GS Tree",                                       RHT_ZF_GS_TREE,                                       { Category::cSkulltula }, 0x11, SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    // Lon Lon Ranch
    locationTable[RC_LLR_GS_BACK_WALL] =                                 Location::GSToken(RC_LLR_GS_BACK_WALL,                                 RCQUEST_BOTH,    RCAREA_LON_LON_RANCH,         SCENE_LON_LON_RANCH,        11009,  0x01, "GS Back Wall",                     "LLR GS Back Wall",                                 RHT_LLR_GS_BACK_WALL,                                 { Category::cSkulltula }, 0x0B, SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);
    locationTable[RC_LLR_GS_RAIN_SHED] =                                 Location::GSToken(RC_LLR_GS_RAIN_SHED,                                 RCQUEST_BOTH,    RCAREA_LON_LON_RANCH,         SCENE_LON_LON_RANCH,        11010,  0x02, "GS Rain Shed",                     "LLR GS Rain Shed",                                 RHT_LLR_GS_RAIN_SHED,                                 { Category::cSkulltula }, 0x0B, SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);
    locationTable[RC_LLR_GS_HOUSE_WINDOW] =                              Location::GSToken(RC_LLR_GS_HOUSE_WINDOW,                              RCQUEST_BOTH,    RCAREA_LON_LON_RANCH,         SCENE_LON_LON_RANCH,        11012,  0x04, "GS House Window",                  "LLR GS House Window",                              RHT_LLR_GS_HOUSE_WINDOW,                              { Category::cSkulltula }, 0x0B, SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);
    locationTable[RC_LLR_GS_TREE] =                                      Location::GSToken(RC_LLR_GS_TREE,                                      RCQUEST_BOTH,    RCAREA_LON_LON_RANCH,         SCENE_LON_LON_RANCH,        -29944, 0x08, "GS Tree",                          "LLR GS Tree",                                      RHT_LLR_GS_TREE,                                      { Category::cSkulltula }, 0x0B, SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);

    // Bosses     Randomizer Check                       Randomizer Check    Quest         Type                   Area                     Actor ID          Scene ID                    Params Flags                                      Short Name         Spoiler Name       Hint Text Key      Vanilla Item        Categories Spoiler Collection Check             Collection Check Group                                      Vanilla Progression
    locationTable[RC_LINKS_POCKET] =    Location::Reward(RC_LINKS_POCKET,    RCQUEST_BOTH, RCTYPE_LINKS_POCKET,   RCAREA_KOKIRI_FOREST,    ACTOR_ID_MAX,     SCENE_ID_MAX,               0x00, 0x00,                                       "Link's Pocket",   "Link's Pocket",   RHT_LINKS_POCKET,  RG_LIGHT_MEDALLION,  {}, SpoilerCollectionCheck::AlwaysCollected(), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST,           true);
    locationTable[RC_QUEEN_GOHMA] =     Location::Reward(RC_QUEEN_GOHMA,     RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_DEKU_TREE,        ACTOR_DOOR_WARP1, SCENE_DEKU_TREE_BOSS,       0x00, DungeonId::DUNGEON_DEKU_TREE,               "Queen Gohma",     "Queen Gohma",     RHT_QUEEN_GOHMA,   RG_KOKIRI_EMERALD,   {}, SpoilerCollectionCheck::Chest(0x11, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE,       true);
    locationTable[RC_KING_DODONGO] =    Location::Reward(RC_KING_DODONGO,    RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_DODONGOS_CAVERN,  ACTOR_DOOR_WARP1, SCENE_DODONGOS_CAVERN_BOSS, 0x00, DungeonId::DUNGEON_DODONGOS_CAVERN,         "King Dodongo",    "King Dodongo",    RHT_KING_DODONGO,  RG_GORON_RUBY,       {}, SpoilerCollectionCheck::Chest(0x12, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN, true);
    locationTable[RC_BARINADE] =        Location::Reward(RC_BARINADE,        RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_JABU_JABUS_BELLY, ACTOR_DOOR_WARP1, SCENE_JABU_JABU_BOSS,       0x00, DungeonId::DUNGEON_JABUJABUS_BELLY,         "Barinade",        "Barinade",        RHT_BARINADE,      RG_ZORA_SAPPHIRE,    {}, SpoilerCollectionCheck::Chest(0x13, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY, true);
    locationTable[RC_PHANTOM_GANON] =   Location::Reward(RC_PHANTOM_GANON,   RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_FOREST_TEMPLE,    ACTOR_DOOR_WARP1, SCENE_FOREST_TEMPLE_BOSS,   0x00, DungeonId::DUNGEON_FOREST_TEMPLE,           "Phantom Ganon",   "Phantom Ganon",   RHT_PHANTOM_GANON, RG_FOREST_MEDALLION, {}, SpoilerCollectionCheck::Chest(0x14, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE,   true);
    locationTable[RC_VOLVAGIA] =        Location::Reward(RC_VOLVAGIA,        RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_FIRE_TEMPLE,      ACTOR_DOOR_WARP1, SCENE_FIRE_TEMPLE_BOSS,     0x00, DungeonId::DUNGEON_FIRE_TEMPLE,             "Volvagia",        "Volvagia",        RHT_VOLVAGIA,      RG_FIRE_MEDALLION,   {}, SpoilerCollectionCheck::Chest(0x15, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE,     true);
    locationTable[RC_MORPHA] =          Location::Reward(RC_MORPHA,          RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_WATER_TEMPLE,     ACTOR_DOOR_WARP1, SCENE_WATER_TEMPLE_BOSS,    0x00, DungeonId::DUNGEON_WATER_TEMPLE,            "Morpha",          "Morpha",          RHT_MORPHA,        RG_WATER_MEDALLION,  {}, SpoilerCollectionCheck::Chest(0x16, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE,    true);
    locationTable[RC_TWINROVA] =        Location::Reward(RC_TWINROVA,        RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_SPIRIT_TEMPLE,    ACTOR_DOOR_WARP1, SCENE_SPIRIT_TEMPLE_BOSS,   0x00, DungeonId::DUNGEON_SPIRIT_TEMPLE,           "Twinrova",        "Twinrova",        RHT_TWINROVA,      RG_SPIRIT_MEDALLION, {}, SpoilerCollectionCheck::Chest(0x17, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE,   true);
    locationTable[RC_BONGO_BONGO] =     Location::Reward(RC_BONGO_BONGO,     RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_SHADOW_TEMPLE,    ACTOR_DOOR_WARP1, SCENE_SHADOW_TEMPLE_BOSS,   0x00, DungeonId::DUNGEON_SHADOW_TEMPLE,           "Bongo Bongo",     "Bongo Bongo",     RHT_BONGO_BONGO,   RG_SHADOW_MEDALLION, {}, SpoilerCollectionCheck::Chest(0x18, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE,   true);
    locationTable[RC_GANON] =           Location::Reward(RC_GANON,           RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_GANONS_CASTLE,    ACTOR_DOOR_WARP1, SCENE_GANON_BOSS,           0x00, DungeonId::DUNGEON_GANONS_CASTLE_CRUMBLING, "Ganon",           "Ganon",           RHT_NONE,          RG_TRIFORCE,         {}, SpoilerCollectionCheck::None(),            SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE);
    locationTable[RC_GIFT_FROM_SAGES] = Location::Reward(RC_GIFT_FROM_SAGES, RCQUEST_BOTH, RCTYPE_DUNGEON_REWARD, RCAREA_MARKET,           ACTOR_ID_MAX,     SCENE_ID_MAX,               0x00, 0x00,                                       "Gift from Raoru", "Gift from Raoru", RHT_NONE,          RG_LIGHT_MEDALLION,  {}, SpoilerCollectionCheck::None(),            SpoilerCollectionCheckGroup::GROUP_NO_GROUP,                true);

    // Heart Containers     Randomizer Check                              Randomizer Check                       Quest         Type                               Area                     Actor ID            Scene ID                    Params Flags Short Name                      Spoiler Name                                    Hint Text Key                           Vanilla Item        Categories                        Spoiler Collection Check                         Collection Check Group                                      Vanilla Progression
    locationTable[RC_DEKU_TREE_QUEEN_GOHMA_HEART] =        Location::Base(RC_DEKU_TREE_QUEEN_GOHMA_HEART,        RCQUEST_BOTH, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_DEKU_TREE,        ACTOR_ITEM_B_HEART, SCENE_DEKU_TREE_BOSS,       0x00, 0x4F, "Queen Gohma Heart Container",   "Deku Tree Queen Gohma Heart Container",        RHT_DEKU_TREE_QUEEN_GOHMA_HEART,        RG_HEART_CONTAINER, { Category::cSongDungeonReward }, SpoilerCollectionCheck::Collectable(0x11, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DEKU_TREE,       true);
    locationTable[RC_DODONGOS_CAVERN_KING_DODONGO_HEART] = Location::Base(RC_DODONGOS_CAVERN_KING_DODONGO_HEART, RCQUEST_BOTH, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_DODONGOS_CAVERN,  ACTOR_ITEM_B_HEART, SCENE_DODONGOS_CAVERN_BOSS, 0x00, 0x4F, "King Dodongo Heart Container",  "Dodongos Cavern King Dodongo Heart Container", RHT_DODONGOS_CAVERN_KING_DODONGO_HEART, RG_HEART_CONTAINER, { Category::cSongDungeonReward }, SpoilerCollectionCheck::Collectable(0x12, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_DODONGOS_CAVERN, true);
    locationTable[RC_JABU_JABUS_BELLY_BARINADE_HEART] =    Location::Base(RC_JABU_JABUS_BELLY_BARINADE_HEART,    RCQUEST_BOTH, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_JABU_JABUS_BELLY, ACTOR_ITEM_B_HEART, SCENE_JABU_JABU_BOSS,       0x00, 0x4F, "Barinade Heart Container",      "Jabu Jabus Belly Barinade Heart Container",    RHT_JABU_JABUS_BELLY_BARINADE_HEART,    RG_HEART_CONTAINER, { Category::cSongDungeonReward }, SpoilerCollectionCheck::Collectable(0x13, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY, true);
    locationTable[RC_FOREST_TEMPLE_PHANTOM_GANON_HEART] =  Location::Base(RC_FOREST_TEMPLE_PHANTOM_GANON_HEART,  RCQUEST_BOTH, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_FOREST_TEMPLE,    ACTOR_ITEM_B_HEART, SCENE_FOREST_TEMPLE_BOSS,   0x00, 0x4F, "Phantom Ganon Heart Container", "Forest Temple Phantom Ganon Heart Container",  RHT_FOREST_TEMPLE_PHANTOM_GANON_HEART,  RG_HEART_CONTAINER, { Category::cSongDungeonReward }, SpoilerCollectionCheck::Collectable(0x14, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_FOREST_TEMPLE,   true);
    locationTable[RC_FIRE_TEMPLE_VOLVAGIA_HEART] =         Location::Base(RC_FIRE_TEMPLE_VOLVAGIA_HEART,         RCQUEST_BOTH, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_FIRE_TEMPLE,      ACTOR_ITEM_B_HEART, SCENE_FIRE_TEMPLE_BOSS,     0x00, 0x4F, "Volvagia Heart Container",      "Fire Temple Volvagia Heart Container",         RHT_FIRE_TEMPLE_VOLVAGIA_HEART,         RG_HEART_CONTAINER, { Category::cSongDungeonReward }, SpoilerCollectionCheck::Collectable(0x15, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_FIRE_TEMPLE,     true);
    locationTable[RC_WATER_TEMPLE_MORPHA_HEART] =          Location::Base(RC_WATER_TEMPLE_MORPHA_HEART,          RCQUEST_BOTH, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_WATER_TEMPLE,     ACTOR_ITEM_B_HEART, SCENE_WATER_TEMPLE_BOSS,    0x00, 0x4F, "Morpha Heart Container",        "Water Temple Morpha Heart Container",          RHT_WATER_TEMPLE_MORPHA_HEART,          RG_HEART_CONTAINER, { Category::cSongDungeonReward }, SpoilerCollectionCheck::Collectable(0x16, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_WATER_TEMPLE,    true);
    locationTable[RC_SPIRIT_TEMPLE_TWINROVA_HEART] =       Location::Base(RC_SPIRIT_TEMPLE_TWINROVA_HEART,       RCQUEST_BOTH, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_SPIRIT_TEMPLE,    ACTOR_ITEM_B_HEART, SCENE_SPIRIT_TEMPLE_BOSS,   0x00, 0x4F, "Twinrova Heart Container",      "Spirit Temple Twinrova Heart Container",       RHT_SPIRIT_TEMPLE_TWINROVA_HEART,       RG_HEART_CONTAINER, { Category::cSongDungeonReward }, SpoilerCollectionCheck::Collectable(0x17, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_SPIRIT_TEMPLE,   true);
    locationTable[RC_SHADOW_TEMPLE_BONGO_BONGO_HEART] =    Location::Base(RC_SHADOW_TEMPLE_BONGO_BONGO_HEART,    RCQUEST_BOTH, RCTYPE_BOSS_HEART_OR_OTHER_REWARD, RCAREA_SHADOW_TEMPLE,    ACTOR_ITEM_B_HEART, SCENE_SHADOW_TEMPLE_BOSS,   0x00, 0x4F, "Bongo Bongo Heart Container",   "Shadow Temple Bongo Bongo Heart Container",    RHT_SHADOW_TEMPLE_BONGO_BONGO_HEART,    RG_HEART_CONTAINER, { Category::cSongDungeonReward }, SpoilerCollectionCheck::Collectable(0x18, 0x1F), SpoilerCollectionCheckGroup::GROUP_DUNGEON_SHADOW_TEMPLE,   true);

    // Cutscenes  Randomizer Check                                    Randomizer Check                Quest         Type             Area                          Actor ID             Scene ID                            Params Flags Short Name                 Spoiler Name                   Hint Text Key                    Vanilla Item                Categories Spoiler Collection Check            Collection Check Group                                    Vanilla Progression
    locationTable[RC_TOT_MASTER_SWORD] =            Location::Delayed(RC_TOT_MASTER_SWORD,            RCQUEST_BOTH, RCTYPE_STANDARD, RCAREA_MARKET,                ACTOR_ID_MAX,        SCENE_ID_MAX,                       0x00, 0x00, "ToT Master Sword",         "ToT Master Sword",            RHT_TOT_MASTER_SWORD,            RG_MASTER_SWORD,            {}, SpoilerCollectionCheck::MasterSword(),     SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,         true);
    locationTable[RC_TOT_LIGHT_ARROWS_CUTSCENE] =   Location::Delayed(RC_TOT_LIGHT_ARROWS_CUTSCENE,   RCQUEST_BOTH, RCTYPE_STANDARD, RCAREA_MARKET,                ACTOR_ID_MAX,        SCENE_ID_MAX,                       0x00, 0x01, "ToT Light Arrow Cutscene", "ToT Light Arrow Cutscene",    RHT_TOT_LIGHT_ARROWS_CUTSCENE,   RG_LIGHT_ARROWS,            {}, SpoilerCollectionCheck::Chest(0x43, 0x1E), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,         true);
    locationTable[RC_LW_GIFT_FROM_SARIA] =          Location::Delayed(RC_LW_GIFT_FROM_SARIA,          RCQUEST_BOTH, RCTYPE_OCARINA,  RCAREA_LOST_WOODS,            ACTOR_ID_MAX,        SCENE_LOST_WOODS,                   0x00, 0x02, "Gift From Saria",          "LW Gift From Saria",          RHT_LW_GIFT_FROM_SARIA,          RG_PROGRESSIVE_OCARINA,     {}, SpoilerCollectionCheck::EventChkInf(0xC1), SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,            true);
    locationTable[RC_ZF_GREAT_FAIRY_REWARD] =       Location::Delayed(RC_ZF_GREAT_FAIRY_REWARD,       RCQUEST_BOTH, RCTYPE_STANDARD, RCAREA_ZORAS_FOUNTAIN,        ACTOR_BG_DY_YOSEIZO, SCENE_GREAT_FAIRYS_FOUNTAIN_SPELLS, 1,    0x10, "Great Fairy Reward",       "ZF Great Fairy Reward",       RHT_ZF_GREAT_FAIRY_REWARD,       RG_FARORES_WIND,            {}, SpoilerCollectionCheck::Chest(0x3D, 0x01), SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN,          true);
    locationTable[RC_HC_GREAT_FAIRY_REWARD] =       Location::Delayed(RC_HC_GREAT_FAIRY_REWARD,       RCQUEST_BOTH, RCTYPE_STANDARD, RCAREA_HYRULE_CASTLE,         ACTOR_BG_DY_YOSEIZO, SCENE_GREAT_FAIRYS_FOUNTAIN_SPELLS, 2,    0x11, "Great Fairy Reward",       "HC Great Fairy Reward",       RHT_HC_GREAT_FAIRY_REWARD,       RG_DINS_FIRE,               {}, SpoilerCollectionCheck::Chest(0x3D, 0x02), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,         true);
    locationTable[RC_COLOSSUS_GREAT_FAIRY_REWARD] = Location::Delayed(RC_COLOSSUS_GREAT_FAIRY_REWARD, RCQUEST_BOTH, RCTYPE_STANDARD, RCAREA_DESERT_COLOSSUS,       ACTOR_BG_DY_YOSEIZO, SCENE_GREAT_FAIRYS_FOUNTAIN_SPELLS, 3,    0x12, "Great Fairy Reward",       "Colossus Great Fairy Reward", RHT_COLOSSUS_GREAT_FAIRY_REWARD, RG_NAYRUS_LOVE,             {}, SpoilerCollectionCheck::Chest(0x3D, 0x03), SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,         true);
    locationTable[RC_DMT_GREAT_FAIRY_REWARD] =      Location::Delayed(RC_DMT_GREAT_FAIRY_REWARD,      RCQUEST_BOTH, RCTYPE_STANDARD, RCAREA_DEATH_MOUNTAIN_TRAIL,  ACTOR_BG_DY_YOSEIZO, SCENE_GREAT_FAIRYS_FOUNTAIN_MAGIC,  1,    0x13, "Great Fairy Reward",       "DMT Great Fairy Reward",      RHT_DMT_GREAT_FAIRY_REWARD,      RG_PROGRESSIVE_MAGIC_METER, {}, SpoilerCollectionCheck::Chest(0x3B, 0x01), SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN,        true);
    locationTable[RC_DMC_GREAT_FAIRY_REWARD] =      Location::Delayed(RC_DMC_GREAT_FAIRY_REWARD,      RCQUEST_BOTH, RCTYPE_STANDARD, RCAREA_DEATH_MOUNTAIN_CRATER, ACTOR_BG_DY_YOSEIZO, SCENE_GREAT_FAIRYS_FOUNTAIN_MAGIC,  2,    0x14, "Great Fairy Reward",       "DMC Great Fairy Reward",      RHT_DMC_GREAT_FAIRY_REWARD,      RG_PROGRESSIVE_MAGIC_METER, {}, SpoilerCollectionCheck::Chest(0x3B, 0x02), SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN,        true);
    locationTable[RC_OGC_GREAT_FAIRY_REWARD] =      Location::Delayed(RC_OGC_GREAT_FAIRY_REWARD,      RCQUEST_BOTH, RCTYPE_STANDARD, RCAREA_HYRULE_CASTLE,         ACTOR_BG_DY_YOSEIZO, SCENE_GREAT_FAIRYS_FOUNTAIN_MAGIC,  3,    0x15, "OGC Great Fairy Reward",   "OGC Great Fairy Reward",      RHT_OGC_GREAT_FAIRY_REWARD,      RG_DOUBLE_DEFENSE,          {}, SpoilerCollectionCheck::Chest(0x3B, 0x03), SpoilerCollectionCheckGroup::GROUP_DUNGEON_GANONS_CASTLE, true);

    // Songs      Randomizer Check                                     Randomizer Check                 Quest         Type                  Area                          Actor ID      Scene ID                    Params Flags Short Name                  Spoiler Name                 Hint Text Key                     Vanilla Item           Categories                                         Spoiler Collection Check                   Collection Check Group                                 Vanilla Progression
    locationTable[RC_SHEIK_IN_FOREST] =              Location::Delayed(RC_SHEIK_IN_FOREST,              RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_SACRED_FOREST_MEADOW,  ACTOR_ID_MAX, SCENE_SACRED_FOREST_MEADOW, 0x00, 0x20, "Sheik in Forest",           "Sheik in Forest",           RHT_SHEIK_IN_FOREST,              RG_MINUET_OF_FOREST,   { Category::cSong },                               SpoilerCollectionCheck::EventChkInf(0x50), SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,         true);
    locationTable[RC_SHEIK_IN_CRATER] =              Location::Delayed(RC_SHEIK_IN_CRATER,              RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_DEATH_MOUNTAIN_CRATER, ACTOR_ID_MAX, SCENE_ID_MAX,               0x00, 0x21, "Sheik in Crater",           "Sheik in Crater",           RHT_SHEIK_IN_CRATER,              RG_BOLERO_OF_FIRE,     { Category::cSong },                               SpoilerCollectionCheck::EventChkInf(0x51), SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN,     true);
    locationTable[RC_SHEIK_IN_ICE_CAVERN] =          Location::Delayed(RC_SHEIK_IN_ICE_CAVERN,          RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_ICE_CAVERN,            ACTOR_ID_MAX, SCENE_ICE_CAVERN,           0x00, 0x22, "Sheik in Ice Cavern",       "Sheik in Ice Cavern",       RHT_SHEIK_IN_ICE_CAVERN,          RG_SERENADE_OF_WATER,  { Category::cSong, Category::cSongDungeonReward }, SpoilerCollectionCheck::EventChkInf(0x52), SpoilerCollectionCheckGroup::GROUP_DUNGEON_ICE_CAVERN, true);
    locationTable[RC_SHEIK_AT_COLOSSUS] =            Location::Delayed(RC_SHEIK_AT_COLOSSUS,            RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_DESERT_COLOSSUS,       ACTOR_ID_MAX, SCENE_DESERT_COLOSSUS,      0x00, 0x23, "Sheik at Colossus",         "Sheik at Colossus",         RHT_SHEIK_AT_COLOSSUS,            RG_REQUIEM_OF_SPIRIT,  { Category::cSong },                               SpoilerCollectionCheck::EventChkInf(0xAC), SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY,      true);
    locationTable[RC_SHEIK_IN_KAKARIKO] =            Location::Delayed(RC_SHEIK_IN_KAKARIKO,            RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX, SCENE_ID_MAX,               0x00, 0x24, "Sheik in Kakariko",         "Sheik in Kakariko",         RHT_SHEIK_IN_KAKARIKO,            RG_NOCTURNE_OF_SHADOW, { Category::cSong },                               SpoilerCollectionCheck::EventChkInf(0xAA), SpoilerCollectionCheckGroup::GROUP_KAKARIKO,           true);
    locationTable[RC_SHEIK_AT_TEMPLE] =              Location::Delayed(RC_SHEIK_AT_TEMPLE,              RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_MARKET,                ACTOR_ID_MAX, SCENE_ID_MAX,               0x00, 0x25, "Sheik at Temple",           "Sheik at Temple",           RHT_SHEIK_AT_TEMPLE,              RG_PRELUDE_OF_LIGHT,   { Category::cSong },                               SpoilerCollectionCheck::Chest(0x43, 0x1F), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,      true);
    locationTable[RC_SONG_FROM_IMPA] =               Location::Delayed(RC_SONG_FROM_IMPA,               RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_HYRULE_CASTLE,         ACTOR_ID_MAX, SCENE_ID_MAX,               0x00, 0x26, "Song from Impa",            "Song from Impa",            RHT_SONG_FROM_IMPA,               RG_ZELDAS_LULLABY,     { Category::cSong, Category::cSongDungeonReward }, SpoilerCollectionCheck::EventChkInf(0x59), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE,      true);
    locationTable[RC_SONG_FROM_MALON] =              Location::Delayed(RC_SONG_FROM_MALON,              RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_LON_LON_RANCH,         ACTOR_ID_MAX, SCENE_ID_MAX,               0x00, 0x27, "Song from Malon",           "Song from Malon",           RHT_SONG_FROM_MALON,              RG_EPONAS_SONG,        { Category::cSong },                               SpoilerCollectionCheck::Chest(0x63, 0x1F), SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH,      true);
    locationTable[RC_SONG_FROM_SARIA] =              Location::Delayed(RC_SONG_FROM_SARIA,              RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_SACRED_FOREST_MEADOW,  ACTOR_ID_MAX, SCENE_SACRED_FOREST_MEADOW, 0x00, 0x28, "Song from Saria",           "Song from Saria",           RHT_SONG_FROM_SARIA,              RG_SARIAS_SONG,        { Category::cSong },                               SpoilerCollectionCheck::Chest(0x56, 0x1F), SpoilerCollectionCheckGroup::GROUP_LOST_WOODS,         true);
    locationTable[RC_SONG_FROM_ROYAL_FAMILYS_TOMB] = Location::Delayed(RC_SONG_FROM_ROYAL_FAMILYS_TOMB, RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_GRAVEYARD,             ACTOR_ID_MAX, SCENE_ID_MAX,               0x00, 0x29, "Song from Composers Grave", "Song from Composers Grave", RHT_SONG_FROM_ROYAL_FAMILYS_TOMB, RG_SUNS_SONG,          { Category::cSong },                               SpoilerCollectionCheck::Chest(0x41, 0x1F), SpoilerCollectionCheckGroup::GROUP_KAKARIKO,           true);
    locationTable[RC_SONG_FROM_OCARINA_OF_TIME] =    Location::Delayed(RC_SONG_FROM_OCARINA_OF_TIME,    RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_HYRULE_FIELD,          ACTOR_ID_MAX, SCENE_ID_MAX,               0x00, 0x2A, "Song from Ocarina of Time", "Song from Ocarina of Time", RHT_SONG_FROM_OCARINA_OF_TIME,    RG_SONG_OF_TIME,       { Category::cSong },                               SpoilerCollectionCheck::Chest(0x51, 0x1F), SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD,       true);
    locationTable[RC_SONG_FROM_WINDMILL] =           Location::Delayed(RC_SONG_FROM_WINDMILL,           RCQUEST_BOTH, RCTYPE_SONG_LOCATION, RCAREA_KAKARIKO_VILLAGE,      ACTOR_ID_MAX, SCENE_ID_MAX,               0x00, 0x2B, "Song from Windmill",        "Song from Windmill",        RHT_SONG_FROM_WINDMILL,           RG_SONG_OF_STORMS,     { Category::cSong },                               SpoilerCollectionCheck::EventChkInf(0x5B), SpoilerCollectionCheckGroup::GROUP_KAKARIKO,           true);

    // Cows       Randomizer Check                             Randomizer Check            Quest         Type        Area                         Actor ID      Scene ID                 Params                        Flags Short Name           Spoiler Name               Hint Text Key                Vanilla Item Categories      Spoiler Collection Check                 Collection Check Group
    locationTable[RC_KF_LINKS_HOUSE_COW] =      Location::Base(RC_KF_LINKS_HOUSE_COW,      RCQUEST_BOTH, RCTYPE_COW, RCAREA_KOKIRI_FOREST,        ACTOR_EN_COW, SCENE_LINKS_HOUSE,       0x00,                         0x15, "Links House Cow",   "KF Links House Cow",      RHT_KF_LINKS_HOUSE_COW,      RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x34, 0x15), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_HF_COW_GROTTO_COW] =       Location::Base(RC_HF_COW_GROTTO_COW,       RCQUEST_BOTH, RCTYPE_COW, RCAREA_HYRULE_FIELD,         ACTOR_EN_COW, SCENE_GROTTOS,           TWO_ACTOR_PARAMS(3485, -291), 0x16, "Cow Grotto Cow",    "HF Cow Grotto Cow",       RHT_HF_COW_GROTTO_COW,       RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x3E, 0x16), SpoilerCollectionCheckGroup::GROUP_HYRULE_FIELD);
    locationTable[RC_LLR_STABLES_LEFT_COW] =    Location::Base(RC_LLR_STABLES_LEFT_COW,    RCQUEST_BOTH, RCTYPE_COW, RCAREA_LON_LON_RANCH,        ACTOR_EN_COW, SCENE_STABLE,            TWO_ACTOR_PARAMS(-122, -254), 0x16, "Stables Left Cow",  "LLR Stables Left Cow",    RHT_LLR_STABLES_LEFT_COW,    RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x36, 0x16), SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);
    locationTable[RC_LLR_STABLES_RIGHT_COW] =   Location::Base(RC_LLR_STABLES_RIGHT_COW,   RCQUEST_BOTH, RCTYPE_COW, RCAREA_LON_LON_RANCH,        ACTOR_EN_COW, SCENE_STABLE,            TWO_ACTOR_PARAMS(116, -254),  0x15, "Stables Right Cow", "LLR Stables Right Cow",   RHT_LLR_STABLES_RIGHT_COW,   RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x36, 0x15), SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);
    locationTable[RC_LLR_TOWER_LEFT_COW] =      Location::Base(RC_LLR_TOWER_LEFT_COW,      RCQUEST_BOTH, RCTYPE_COW, RCAREA_LON_LON_RANCH,        ACTOR_EN_COW, SCENE_LON_LON_BUILDINGS, TWO_ACTOR_PARAMS(-229, 157),  0x15, "Tower Left Cow",    "LLR Tower Left Cow",      RHT_LLR_TOWER_LEFT_COW,      RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x4C, 0x16), SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);
    locationTable[RC_LLR_TOWER_RIGHT_COW] =     Location::Base(RC_LLR_TOWER_RIGHT_COW,     RCQUEST_BOTH, RCTYPE_COW, RCAREA_LON_LON_RANCH,        ACTOR_EN_COW, SCENE_LON_LON_BUILDINGS, TWO_ACTOR_PARAMS(-142, -140), 0x16, "Tower Right Cow",   "LLR Tower Right Cow",     RHT_LLR_TOWER_RIGHT_COW,     RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x4C, 0x15), SpoilerCollectionCheckGroup::GROUP_LON_LON_RANCH);
    locationTable[RC_KAK_IMPAS_HOUSE_COW] =     Location::Base(RC_KAK_IMPAS_HOUSE_COW,     RCQUEST_BOTH, RCTYPE_COW, RCAREA_KAKARIKO_VILLAGE,     ACTOR_EN_COW, SCENE_IMPAS_HOUSE,       0x00,                         0x15, "Impas House Cow",   "Kak Impas House Cow",     RHT_KAK_IMPAS_HOUSE_COW,     RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x37, 0x15), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_DMT_COW_GROTTO_COW] =      Location::Base(RC_DMT_COW_GROTTO_COW,      RCQUEST_BOTH, RCTYPE_COW, RCAREA_DEATH_MOUNTAIN_TRAIL, ACTOR_EN_COW, SCENE_GROTTOS,           TWO_ACTOR_PARAMS(2444, -471), 0x15, "Cow Grotto Cow",    "DMT Cow Grotto Cow",      RHT_DMT_COW_GROTTO_COW,      RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x3E, 0x15), SpoilerCollectionCheckGroup::GROUP_DEATH_MOUNTAIN);
    locationTable[RC_GV_COW] =                  Location::Base(RC_GV_COW,                  RCQUEST_BOTH, RCTYPE_COW, RCAREA_GERUDO_VALLEY,        ACTOR_EN_COW, SCENE_GERUDO_VALLEY,     0x00,                         0x15, "Cow",               "GV Cow",                  RHT_GV_COW,                  RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x5A, 0x15), SpoilerCollectionCheckGroup::GROUP_GERUDO_VALLEY);
    locationTable[RC_JABU_JABUS_BELLY_MQ_COW] = Location::Base(RC_JABU_JABUS_BELLY_MQ_COW, RCQUEST_MQ,   RCTYPE_COW, RCAREA_JABU_JABUS_BELLY,     ACTOR_EN_COW, SCENE_JABU_JABU,         0x00,                         0x15, "MQ Cow",            "Jabu Jabus Belly MQ Cow", RHT_JABU_JABUS_BELLY_MQ_COW, RG_MILK, { Category::cCow }, SpoilerCollectionCheck::Cow(0x02, 0x15), SpoilerCollectionCheckGroup::GROUP_DUNGEON_JABUJABUS_BELLY);

    /*-------------------------------
              --- SHOPS ---
      8     6               2     4

      7     5               1     3
      -------------------------------*/
    //            Randomizer Check                                 Randomizer Check               Quest         Type         Area                       Actor ID        Scene ID                    Params Flags Short Name            Spoiler Name              Hint Text Key                   Vanilla Item           Categories           Spoiler Collection Check                   Spoiler Collection Check Group
    // Kokiri Forest
    locationTable[RC_KF_SHOP_ITEM_1] =              Location::Base(RC_KF_SHOP_ITEM_1,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KOKIRI_FOREST,      ACTOR_EN_GIRLA, SCENE_KOKIRI_SHOP,          0x00, 0x00, "Shop Item 1",         "KF Shop Item 1",         RHT_KF_SHOP_ITEM_1,             RG_BUY_DEKU_SHIELD,    { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2D, 0), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_SHOP_ITEM_2] =              Location::Base(RC_KF_SHOP_ITEM_2,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KOKIRI_FOREST,      ACTOR_EN_GIRLA, SCENE_KOKIRI_SHOP,          0x01, 0x01, "Shop Item 2",         "KF Shop Item 2",         RHT_KF_SHOP_ITEM_2,             RG_BUY_DEKU_NUT_5,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2D, 1), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_SHOP_ITEM_3] =              Location::Base(RC_KF_SHOP_ITEM_3,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KOKIRI_FOREST,      ACTOR_EN_GIRLA, SCENE_KOKIRI_SHOP,          0x02, 0x02, "Shop Item 3",         "KF Shop Item 3",         RHT_KF_SHOP_ITEM_3,             RG_BUY_DEKU_NUT_10,    { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2D, 2), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_SHOP_ITEM_4] =              Location::Base(RC_KF_SHOP_ITEM_4,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KOKIRI_FOREST,      ACTOR_EN_GIRLA, SCENE_KOKIRI_SHOP,          0x03, 0x03, "Shop Item 4",         "KF Shop Item 4",         RHT_KF_SHOP_ITEM_4,             RG_BUY_DEKU_STICK_1,   { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2D, 3), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_SHOP_ITEM_5] =              Location::Base(RC_KF_SHOP_ITEM_5,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KOKIRI_FOREST,      ACTOR_EN_GIRLA, SCENE_KOKIRI_SHOP,          0x04, 0x04, "Shop Item 5",         "KF Shop Item 5",         RHT_KF_SHOP_ITEM_5,             RG_BUY_DEKU_SEEDS_30,  { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2D, 4), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_SHOP_ITEM_6] =              Location::Base(RC_KF_SHOP_ITEM_6,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KOKIRI_FOREST,      ACTOR_EN_GIRLA, SCENE_KOKIRI_SHOP,          0x05, 0x05, "Shop Item 6",         "KF Shop Item 6",         RHT_KF_SHOP_ITEM_6,             RG_BUY_ARROWS_10,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2D, 5), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_SHOP_ITEM_7] =              Location::Base(RC_KF_SHOP_ITEM_7,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KOKIRI_FOREST,      ACTOR_EN_GIRLA, SCENE_KOKIRI_SHOP,          0x06, 0x06, "Shop Item 7",         "KF Shop Item 7",         RHT_KF_SHOP_ITEM_7,             RG_BUY_ARROWS_30,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2D, 6), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);
    locationTable[RC_KF_SHOP_ITEM_8] =              Location::Base(RC_KF_SHOP_ITEM_8,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KOKIRI_FOREST,      ACTOR_EN_GIRLA, SCENE_KOKIRI_SHOP,          0x07, 0x07, "Shop Item 8",         "KF Shop Item 8",         RHT_KF_SHOP_ITEM_8,             RG_BUY_HEART,          { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2D, 7), SpoilerCollectionCheckGroup::GROUP_KOKIRI_FOREST);

    // Kakariko Village
    locationTable[RC_KAK_POTION_SHOP_ITEM_1] =      Location::Base(RC_KAK_POTION_SHOP_ITEM_1,     RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_POTION_SHOP_KAKARIKO, 0x00, 0x30, "Potion Shop Item 1",  "Kak Potion Shop Item 1", RHT_KAK_POTION_SHOP_ITEM_1,     RG_BUY_GREEN_POTION,   { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x30, 0), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_POTION_SHOP_ITEM_2] =      Location::Base(RC_KAK_POTION_SHOP_ITEM_2,     RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_POTION_SHOP_KAKARIKO, 0x01, 0x31, "Potion Shop Item 2",  "Kak Potion Shop Item 2", RHT_KAK_POTION_SHOP_ITEM_2,     RG_BUY_BLUE_FIRE,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x30, 1), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_POTION_SHOP_ITEM_3] =      Location::Base(RC_KAK_POTION_SHOP_ITEM_3,     RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_POTION_SHOP_KAKARIKO, 0x02, 0x32, "Potion Shop Item 3",  "Kak Potion Shop Item 3", RHT_KAK_POTION_SHOP_ITEM_3,     RG_BUY_RED_POTION_30,  { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x30, 2), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_POTION_SHOP_ITEM_4] =      Location::Base(RC_KAK_POTION_SHOP_ITEM_4,     RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_POTION_SHOP_KAKARIKO, 0x03, 0x33, "Potion Shop Item 4",  "Kak Potion Shop Item 4", RHT_KAK_POTION_SHOP_ITEM_4,     RG_BUY_FAIRYS_SPIRIT,  { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x30, 3), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_POTION_SHOP_ITEM_5] =      Location::Base(RC_KAK_POTION_SHOP_ITEM_5,     RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_POTION_SHOP_KAKARIKO, 0x04, 0x34, "Potion Shop Item 5",  "Kak Potion Shop Item 5", RHT_KAK_POTION_SHOP_ITEM_5,     RG_BUY_DEKU_NUT_5,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x30, 4), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_POTION_SHOP_ITEM_6] =      Location::Base(RC_KAK_POTION_SHOP_ITEM_6,     RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_POTION_SHOP_KAKARIKO, 0x05, 0x35, "Potion Shop Item 6",  "Kak Potion Shop Item 6", RHT_KAK_POTION_SHOP_ITEM_6,     RG_BUY_BOTTLE_BUG,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x30, 5), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_POTION_SHOP_ITEM_7] =      Location::Base(RC_KAK_POTION_SHOP_ITEM_7,     RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_POTION_SHOP_KAKARIKO, 0x06, 0x36, "Potion Shop Item 7",  "Kak Potion Shop Item 7", RHT_KAK_POTION_SHOP_ITEM_7,     RG_BUY_POE,            { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x30, 6), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_POTION_SHOP_ITEM_8] =      Location::Base(RC_KAK_POTION_SHOP_ITEM_8,     RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_POTION_SHOP_KAKARIKO, 0x07, 0x37, "Potion Shop Item 8",  "Kak Potion Shop Item 8", RHT_KAK_POTION_SHOP_ITEM_8,     RG_BUY_FISH,           { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x30, 7), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_BAZAAR_ITEM_1] =           Location::Base(RC_KAK_BAZAAR_ITEM_1,          RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_TEST01,               0x00, 0x38, "Bazaar Item 1",       "Kak Bazaar Item 1",      RHT_KAK_BAZAAR_ITEM_1,          RG_BUY_HYLIAN_SHIELD,  { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x33, 0), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_BAZAAR_ITEM_2] =           Location::Base(RC_KAK_BAZAAR_ITEM_2,          RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_TEST01,               0x01, 0x39, "Bazaar Item 2",       "Kak Bazaar Item 2",      RHT_KAK_BAZAAR_ITEM_2,          RG_BUY_BOMBS_535,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x33, 1), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_BAZAAR_ITEM_3] =           Location::Base(RC_KAK_BAZAAR_ITEM_3,          RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_TEST01,               0x02, 0x3A, "Bazaar Item 3",       "Kak Bazaar Item 3",      RHT_KAK_BAZAAR_ITEM_3,          RG_BUY_DEKU_NUT_5,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x33, 2), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_BAZAAR_ITEM_4] =           Location::Base(RC_KAK_BAZAAR_ITEM_4,          RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_TEST01,               0x03, 0x3B, "Bazaar Item 4",       "Kak Bazaar Item 4",      RHT_KAK_BAZAAR_ITEM_4,          RG_BUY_HEART,          { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x33, 3), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_BAZAAR_ITEM_5] =           Location::Base(RC_KAK_BAZAAR_ITEM_5,          RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_TEST01,               0x04, 0x3C, "Bazaar Item 5",       "Kak Bazaar Item 5",      RHT_KAK_BAZAAR_ITEM_5,          RG_BUY_ARROWS_10,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x33, 4), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_BAZAAR_ITEM_6] =           Location::Base(RC_KAK_BAZAAR_ITEM_6,          RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_TEST01,               0x05, 0x3D, "Bazaar Item 6",       "Kak Bazaar Item 6",      RHT_KAK_BAZAAR_ITEM_6,          RG_BUY_ARROWS_50,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x33, 5), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_BAZAAR_ITEM_7] =           Location::Base(RC_KAK_BAZAAR_ITEM_7,          RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_TEST01,               0x06, 0x3E, "Bazaar Item 7",       "Kak Bazaar Item 7",      RHT_KAK_BAZAAR_ITEM_7,          RG_BUY_DEKU_STICK_1,   { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x33, 6), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);
    locationTable[RC_KAK_BAZAAR_ITEM_8] =           Location::Base(RC_KAK_BAZAAR_ITEM_8,          RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_KAKARIKO_VILLAGE,   ACTOR_EN_GIRLA, SCENE_TEST01,               0x07, 0x3F, "Bazaar Item 8",       "Kak Bazaar Item 8",      RHT_KAK_BAZAAR_ITEM_8,          RG_BUY_ARROWS_30,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x33, 7), SpoilerCollectionCheckGroup::GROUP_KAKARIKO);

    // Market
    locationTable[RC_MARKET_BOMBCHU_SHOP_ITEM_1] =  Location::Base(RC_MARKET_BOMBCHU_SHOP_ITEM_1, RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BOMBCHU_SHOP,         0x00, 0x30, "Bombchu Shop Item 1", "MK Bombchu Shop Item 1", RHT_MARKET_BOMBCHU_SHOP_ITEM_1, RG_BUY_BOMBCHU_10,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x32, 0), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BOMBCHU_SHOP_ITEM_2] =  Location::Base(RC_MARKET_BOMBCHU_SHOP_ITEM_2, RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BOMBCHU_SHOP,         0x01, 0x31, "Bombchu Shop Item 2", "MK Bombchu Shop Item 2", RHT_MARKET_BOMBCHU_SHOP_ITEM_2, RG_BUY_BOMBCHU_10,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x32, 1), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BOMBCHU_SHOP_ITEM_3] =  Location::Base(RC_MARKET_BOMBCHU_SHOP_ITEM_3, RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BOMBCHU_SHOP,         0x02, 0x32, "Bombchu Shop Item 3", "MK Bombchu Shop Item 3", RHT_MARKET_BOMBCHU_SHOP_ITEM_3, RG_BUY_BOMBCHU_10,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x32, 2), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BOMBCHU_SHOP_ITEM_4] =  Location::Base(RC_MARKET_BOMBCHU_SHOP_ITEM_4, RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BOMBCHU_SHOP,         0x03, 0x33, "Bombchu Shop Item 4", "MK Bombchu Shop Item 4", RHT_MARKET_BOMBCHU_SHOP_ITEM_4, RG_BUY_BOMBCHU_10,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x32, 3), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BOMBCHU_SHOP_ITEM_5] =  Location::Base(RC_MARKET_BOMBCHU_SHOP_ITEM_5, RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BOMBCHU_SHOP,         0x04, 0x34, "Bombchu Shop Item 5", "MK Bombchu Shop Item 5", RHT_MARKET_BOMBCHU_SHOP_ITEM_5, RG_BUY_BOMBCHU_20,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x32, 4), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BOMBCHU_SHOP_ITEM_6] =  Location::Base(RC_MARKET_BOMBCHU_SHOP_ITEM_6, RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BOMBCHU_SHOP,         0x05, 0x35, "Bombchu Shop Item 6", "MK Bombchu Shop Item 6", RHT_MARKET_BOMBCHU_SHOP_ITEM_6, RG_BUY_BOMBCHU_20,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x32, 5), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BOMBCHU_SHOP_ITEM_7] =  Location::Base(RC_MARKET_BOMBCHU_SHOP_ITEM_7, RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BOMBCHU_SHOP,         0x06, 0x36, "Bombchu Shop Item 7", "MK Bombchu Shop Item 7", RHT_MARKET_BOMBCHU_SHOP_ITEM_7, RG_BUY_BOMBCHU_20,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x32, 6), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BOMBCHU_SHOP_ITEM_8] =  Location::Base(RC_MARKET_BOMBCHU_SHOP_ITEM_8, RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BOMBCHU_SHOP,         0x07, 0x37, "Bombchu Shop Item 8", "MK Bombchu Shop Item 8", RHT_MARKET_BOMBCHU_SHOP_ITEM_8, RG_BUY_BOMBCHU_20,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x32, 7), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_POTION_SHOP_ITEM_1] =   Location::Base(RC_MARKET_POTION_SHOP_ITEM_1,  RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_POTION_SHOP_MARKET,   0x00, 0x30, "Potion Shop Item 1",  "MK Potion Shop Item 1",  RHT_MARKET_POTION_SHOP_ITEM_1,  RG_BUY_GREEN_POTION,   { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x31, 0), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_POTION_SHOP_ITEM_2] =   Location::Base(RC_MARKET_POTION_SHOP_ITEM_2,  RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_POTION_SHOP_MARKET,   0x01, 0x31, "Potion Shop Item 2",  "MK Potion Shop Item 2",  RHT_MARKET_POTION_SHOP_ITEM_2,  RG_BUY_BLUE_FIRE,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x31, 1), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_POTION_SHOP_ITEM_3] =   Location::Base(RC_MARKET_POTION_SHOP_ITEM_3,  RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_POTION_SHOP_MARKET,   0x02, 0x32, "Potion Shop Item 3",  "MK Potion Shop Item 3",  RHT_MARKET_POTION_SHOP_ITEM_3,  RG_BUY_RED_POTION_30,  { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x31, 2), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_POTION_SHOP_ITEM_4] =   Location::Base(RC_MARKET_POTION_SHOP_ITEM_4,  RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_POTION_SHOP_MARKET,   0x03, 0x33, "Potion Shop Item 4",  "MK Potion Shop Item 4",  RHT_MARKET_POTION_SHOP_ITEM_4,  RG_BUY_FAIRYS_SPIRIT,  { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x31, 3), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_POTION_SHOP_ITEM_5] =   Location::Base(RC_MARKET_POTION_SHOP_ITEM_5,  RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_POTION_SHOP_MARKET,   0x04, 0x34, "Potion Shop Item 5",  "MK Potion Shop Item 5",  RHT_MARKET_POTION_SHOP_ITEM_5,  RG_BUY_DEKU_NUT_5,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x31, 4), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_POTION_SHOP_ITEM_6] =   Location::Base(RC_MARKET_POTION_SHOP_ITEM_6,  RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_POTION_SHOP_MARKET,   0x05, 0x35, "Potion Shop Item 6",  "MK Potion Shop Item 6",  RHT_MARKET_POTION_SHOP_ITEM_6,  RG_BUY_BOTTLE_BUG,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x31, 5), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_POTION_SHOP_ITEM_7] =   Location::Base(RC_MARKET_POTION_SHOP_ITEM_7,  RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_POTION_SHOP_MARKET,   0x06, 0x36, "Potion Shop Item 7",  "MK Potion Shop Item 7",  RHT_MARKET_POTION_SHOP_ITEM_7,  RG_BUY_POE,            { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x31, 6), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_POTION_SHOP_ITEM_8] =   Location::Base(RC_MARKET_POTION_SHOP_ITEM_8,  RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_POTION_SHOP_MARKET,   0x07, 0x37, "Potion Shop Item 8",  "MK Potion Shop Item 8",  RHT_MARKET_POTION_SHOP_ITEM_8,  RG_BUY_FISH,           { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x31, 7), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BAZAAR_ITEM_1] =        Location::Base(RC_MARKET_BAZAAR_ITEM_1,       RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BAZAAR,               0x00, 0x30, "Bazaar Item 1",       "MK Bazaar Item 1",       RHT_MARKET_BAZAAR_ITEM_1,       RG_BUY_HYLIAN_SHIELD,  { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2C, 0), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BAZAAR_ITEM_2] =        Location::Base(RC_MARKET_BAZAAR_ITEM_2,       RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BAZAAR,               0x01, 0x31, "Bazaar Item 2",       "MK Bazaar Item 2",       RHT_MARKET_BAZAAR_ITEM_2,       RG_BUY_BOMBS_535,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2C, 1), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BAZAAR_ITEM_3] =        Location::Base(RC_MARKET_BAZAAR_ITEM_3,       RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BAZAAR,               0x02, 0x32, "Bazaar Item 3",       "MK Bazaar Item 3",       RHT_MARKET_BAZAAR_ITEM_3,       RG_BUY_DEKU_NUT_5,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2C, 2), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BAZAAR_ITEM_4] =        Location::Base(RC_MARKET_BAZAAR_ITEM_4,       RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BAZAAR,               0x03, 0x33, "Bazaar Item 4",       "MK Bazaar Item 4",       RHT_MARKET_BAZAAR_ITEM_4,       RG_BUY_HEART,          { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2C, 3), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BAZAAR_ITEM_5] =        Location::Base(RC_MARKET_BAZAAR_ITEM_5,       RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BAZAAR,               0x04, 0x34, "Bazaar Item 5",       "MK Bazaar Item 5",       RHT_MARKET_BAZAAR_ITEM_5,       RG_BUY_ARROWS_10,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2C, 4), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BAZAAR_ITEM_6] =        Location::Base(RC_MARKET_BAZAAR_ITEM_6,       RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BAZAAR,               0x05, 0x35, "Bazaar Item 6",       "MK Bazaar Item 6",       RHT_MARKET_BAZAAR_ITEM_6,       RG_BUY_ARROWS_50,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2C, 5), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BAZAAR_ITEM_7] =        Location::Base(RC_MARKET_BAZAAR_ITEM_7,       RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BAZAAR,               0x06, 0x36, "Bazaar Item 7",       "MK Bazaar Item 7",       RHT_MARKET_BAZAAR_ITEM_7,       RG_BUY_DEKU_STICK_1,   { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2C, 6), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
    locationTable[RC_MARKET_BAZAAR_ITEM_8] =        Location::Base(RC_MARKET_BAZAAR_ITEM_8,       RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_MARKET,             ACTOR_EN_GIRLA, SCENE_BAZAAR,               0x07, 0x37, "Bazaar Item 8",       "MK Bazaar Item 8",       RHT_MARKET_BAZAAR_ITEM_8,       RG_BUY_ARROWS_30,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2C, 7), SpoilerCollectionCheckGroup::GROUP_HYRULE_CASTLE);
 
    // Zora's Domain 
    locationTable[RC_ZD_SHOP_ITEM_1] =              Location::Base(RC_ZD_SHOP_ITEM_1,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_ZORAS_DOMAIN,       ACTOR_EN_GIRLA, SCENE_ZORA_SHOP,            0x00, 0x30, "Shop Item 1",         "ZD Shop Item 1",         RHT_ZD_SHOP_ITEM_1,             RG_BUY_ZORA_TUNIC,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2F, 0), SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZD_SHOP_ITEM_2] =              Location::Base(RC_ZD_SHOP_ITEM_2,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_ZORAS_DOMAIN,       ACTOR_EN_GIRLA, SCENE_ZORA_SHOP,            0x01, 0x31, "Shop Item 2",         "ZD Shop Item 2",         RHT_ZD_SHOP_ITEM_2,             RG_BUY_ARROWS_10,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2F, 1), SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZD_SHOP_ITEM_3] =              Location::Base(RC_ZD_SHOP_ITEM_3,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_ZORAS_DOMAIN,       ACTOR_EN_GIRLA, SCENE_ZORA_SHOP,            0x02, 0x32, "Shop Item 3",         "ZD Shop Item 3",         RHT_ZD_SHOP_ITEM_3,             RG_BUY_HEART,          { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2F, 2), SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZD_SHOP_ITEM_4] =              Location::Base(RC_ZD_SHOP_ITEM_4,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_ZORAS_DOMAIN,       ACTOR_EN_GIRLA, SCENE_ZORA_SHOP,            0x03, 0x33, "Shop Item 4",         "ZD Shop Item 4",         RHT_ZD_SHOP_ITEM_4,             RG_BUY_ARROWS_30,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2F, 3), SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZD_SHOP_ITEM_5] =              Location::Base(RC_ZD_SHOP_ITEM_5,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_ZORAS_DOMAIN,       ACTOR_EN_GIRLA, SCENE_ZORA_SHOP,            0x04, 0x34, "Shop Item 5",         "ZD Shop Item 5",         RHT_ZD_SHOP_ITEM_5,             RG_BUY_DEKU_NUT_5,     { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2F, 4), SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZD_SHOP_ITEM_6] =              Location::Base(RC_ZD_SHOP_ITEM_6,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_ZORAS_DOMAIN,       ACTOR_EN_GIRLA, SCENE_ZORA_SHOP,            0x05, 0x35, "Shop Item 6",         "ZD Shop Item 6",         RHT_ZD_SHOP_ITEM_6,             RG_BUY_ARROWS_50,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2F, 5), SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZD_SHOP_ITEM_7] =              Location::Base(RC_ZD_SHOP_ITEM_7,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_ZORAS_DOMAIN,       ACTOR_EN_GIRLA, SCENE_ZORA_SHOP,            0x06, 0x36, "Shop Item 7",         "ZD Shop Item 7",         RHT_ZD_SHOP_ITEM_7,             RG_BUY_FISH,           { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2F, 6), SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
    locationTable[RC_ZD_SHOP_ITEM_8] =              Location::Base(RC_ZD_SHOP_ITEM_8,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_ZORAS_DOMAIN,       ACTOR_EN_GIRLA, SCENE_ZORA_SHOP,            0x07, 0x37, "Shop Item 8",         "ZD Shop Item 8",         RHT_ZD_SHOP_ITEM_8,             RG_BUY_RED_POTION_50,  { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2F, 7), SpoilerCollectionCheckGroup::GROUP_ZORAS_DOMAIN);
              
    // Goron City             
    locationTable[RC_GC_SHOP_ITEM_1] =              Location::Base(RC_GC_SHOP_ITEM_1,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_GORON_CITY,         ACTOR_EN_GIRLA, SCENE_GORON_SHOP,           0x00, 0x30, "Shop Item 1",         "GC Shop Item 1",         RHT_GC_SHOP_ITEM_1,             RG_BUY_BOMBS_525,      { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2E, 0), SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_SHOP_ITEM_2] =              Location::Base(RC_GC_SHOP_ITEM_2,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_GORON_CITY,         ACTOR_EN_GIRLA, SCENE_GORON_SHOP,           0x01, 0x31, "Shop Item 2",         "GC Shop Item 2",         RHT_GC_SHOP_ITEM_2,             RG_BUY_BOMBS_10,       { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2E, 1), SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_SHOP_ITEM_3] =              Location::Base(RC_GC_SHOP_ITEM_3,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_GORON_CITY,         ACTOR_EN_GIRLA, SCENE_GORON_SHOP,           0x02, 0x32, "Shop Item 3",         "GC Shop Item 3",         RHT_GC_SHOP_ITEM_3,             RG_BUY_BOMBS_20,       { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2E, 2), SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_SHOP_ITEM_4] =              Location::Base(RC_GC_SHOP_ITEM_4,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_GORON_CITY,         ACTOR_EN_GIRLA, SCENE_GORON_SHOP,           0x03, 0x33, "Shop Item 4",         "GC Shop Item 4",         RHT_GC_SHOP_ITEM_4,             RG_BUY_BOMBS_30,       { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2E, 3), SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_SHOP_ITEM_5] =              Location::Base(RC_GC_SHOP_ITEM_5,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_GORON_CITY,         ACTOR_EN_GIRLA, SCENE_GORON_SHOP,           0x04, 0x34, "Shop Item 5",         "GC Shop Item 5",         RHT_GC_SHOP_ITEM_5,             RG_BUY_GORON_TUNIC,    { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2E, 4), SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_SHOP_ITEM_6] =              Location::Base(RC_GC_SHOP_ITEM_6,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_GORON_CITY,         ACTOR_EN_GIRLA, SCENE_GORON_SHOP,           0x05, 0x35, "Shop Item 6",         "GC Shop Item 6",         RHT_GC_SHOP_ITEM_6,             RG_BUY_HEART,          { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2E, 5), SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_SHOP_ITEM_7] =              Location::Base(RC_GC_SHOP_ITEM_7,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_GORON_CITY,         ACTOR_EN_GIRLA, SCENE_GORON_SHOP,           0x06, 0x36, "Shop Item 7",         "GC Shop Item 7",         RHT_GC_SHOP_ITEM_7,             RG_BUY_RED_POTION_40,  { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2E, 6), SpoilerCollectionCheckGroup::GROUP_GORON_CITY);
    locationTable[RC_GC_SHOP_ITEM_8] =              Location::Base(RC_GC_SHOP_ITEM_8,             RCQUEST_BOTH, RCTYPE_SHOP, RCAREA_GORON_CITY,         ACTOR_EN_GIRLA, SCENE_GORON_SHOP,           0x07, 0x37, "Shop Item 8",         "GC Shop Item 8",         RHT_GC_SHOP_ITEM_8,             RG_BUY_HEART,          { Category::cShop }, SpoilerCollectionCheck::ShopItem(0x2E, 7), SpoilerCollectionCheckGroup::GROUP_GORON_CITY);

    // Gossip Stones
    //            RandomizerCheck                                           Randomizer Check                    Quest            Area                          Scene                        Params  Flag  Short Name                       Spoiler name                       Categories
    locationTable[RC_DMC_GOSSIP_STONE] =                Location::HintStone(RC_DMC_GOSSIP_STONE,                RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_CRATER, SCENE_DEATH_MOUNTAIN_CRATER, 14341,  0x05, "Gossip Stone",                  "DMC Gossip Stone",                {});
    locationTable[RC_DMT_GOSSIP_STONE] =                Location::HintStone(RC_DMT_GOSSIP_STONE,                RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_TRAIL,  SCENE_DEATH_MOUNTAIN_TRAIL,  14340,  0x04, "Gossip Stone",                  "DMT Gossip Stone",                {});
    locationTable[RC_COLOSSUS_GOSSIP_STONE] =           Location::HintStone(RC_COLOSSUS_GOSSIP_STONE,           RCQUEST_BOTH,    RCAREA_DESERT_COLOSSUS,       SCENE_DESERT_COLOSSUS,       14362,  0x1A, "Gossip Stone",                  "Colossus Gossip Stone",           {});
    locationTable[RC_DODONGOS_CAVERN_GOSSIP_STONE] =    Location::HintStone(RC_DODONGOS_CAVERN_GOSSIP_STONE,    RCQUEST_VANILLA, RCAREA_DODONGOS_CAVERN,       SCENE_DODONGOS_CAVERN,       4372,   0x14, "Gossip Stone",                  "Dodongo's Cavern Gossip Stone",   {});
    locationTable[RC_GV_GOSSIP_STONE] =                 Location::HintStone(RC_GV_GOSSIP_STONE,                 RCQUEST_BOTH,    RCAREA_GERUDO_VALLEY,         SCENE_GERUDO_VALLEY,         14353,  0x11, "Gossip Stone",                  "GV Gossip Stone",                 {});
    locationTable[RC_GC_MAZE_GOSSIP_STONE] =            Location::HintStone(RC_GC_MAZE_GOSSIP_STONE,            RCQUEST_BOTH,    RCAREA_GORON_CITY,            SCENE_GORON_CITY,            14357,  0x15, "Maze Gossip Stone",             "GC Maze Gossip Stone",            {});
    locationTable[RC_GC_MEDIGORON_GOSSIP_STONE] =       Location::HintStone(RC_GC_MEDIGORON_GOSSIP_STONE,       RCQUEST_BOTH,    RCAREA_GORON_CITY,            SCENE_GORON_CITY,            14873,  0x19, "Medigoron Gossip Stone",        "GC Medigoron Gossip Stone",       {});
    locationTable[RC_GY_GOSSIP_STONE] =                 Location::HintStone(RC_GY_GOSSIP_STONE,                 RCQUEST_BOTH,    RCAREA_GRAVEYARD,             SCENE_GRAVEYARD,             14346,  0x0A, "Gossip Stone",                  "GY Gossip Stone",                 {});
    locationTable[RC_HC_MALON_GOSSIP_STONE] =           Location::HintStone(RC_HC_MALON_GOSSIP_STONE,           RCQUEST_BOTH,    RCAREA_HYRULE_CASTLE,         SCENE_HYRULE_CASTLE,         14610,  0x12, "Malon Gossip Stone",            "HC Malon Gossip Stone",           {});
    locationTable[RC_HC_ROCK_WALL_GOSSIP_STONE] =       Location::HintStone(RC_HC_ROCK_WALL_GOSSIP_STONE,       RCQUEST_BOTH,    RCAREA_HYRULE_CASTLE,         SCENE_HYRULE_CASTLE,         14347,  0x0B, "Rock Wall Gossip Stone",        "HC Rock Wall Gossip Stone",       {});
    locationTable[RC_HC_STORMS_GROTTO_GOSSIP_STONE] =   Location::HintStone(RC_HC_STORMS_GROTTO_GOSSIP_STONE,   RCQUEST_BOTH,    RCAREA_HYRULE_CASTLE,         SCENE_GROTTOS,               14355,  0x13, "Storms Grotto Gossip Stone",    "HC Storms Grotto Gossip Stone",   {});
    locationTable[RC_KF_DEKU_TREE_LEFT_GOSSIP_STONE] =  Location::HintStone(RC_KF_DEKU_TREE_LEFT_GOSSIP_STONE,  RCQUEST_BOTH,    RCAREA_KOKIRI_FOREST,         SCENE_KOKIRI_FOREST,         14623,  0x1F, "Deku Tree Left Gossip Stone",   "KF Deku Tree Left Gossip Stone",  {});
    locationTable[RC_KF_DEKU_TREE_RIGHT_GOSSIP_STONE] = Location::HintStone(RC_KF_DEKU_TREE_RIGHT_GOSSIP_STONE, RCQUEST_BOTH,    RCAREA_KOKIRI_FOREST,         SCENE_KOKIRI_FOREST,         14880,  0x20, "Deku Tree Right Gossip Stone",  "KF Deku Tree Right Gossip Stone", {});
    locationTable[RC_KF_GOSSIP_STONE] =                 Location::HintStone(RC_KF_GOSSIP_STONE,                 RCQUEST_BOTH,    RCAREA_KOKIRI_FOREST,         SCENE_KOKIRI_FOREST,         14366,  0x1E, "Gossip Stone",                  "KF Gossip Stone",                 {});
    locationTable[RC_KF_STORMS_GOSSIP_STONE] =          Location::HintStone(RC_KF_STORMS_GOSSIP_STONE,          RCQUEST_BOTH,    RCAREA_KOKIRI_FOREST,         SCENE_GROTTOS,               -22988, 0x3C, "Storms Gossip Stone",           "KF Storms Gossip Stone",          {});
    locationTable[RC_LH_LAB_GOSSIP_STONE] =             Location::HintStone(RC_LH_LAB_GOSSIP_STONE,             RCQUEST_BOTH,    RCAREA_LAKE_HYLIA,            SCENE_LAKE_HYLIA,            14339,  0x03, "Lab Gossip Stone",              "LH Lab Gossip Stone",             {});
    locationTable[RC_LH_SOUTHEAST_GOSSIP_STONE] =       Location::HintStone(RC_LH_SOUTHEAST_GOSSIP_STONE,       RCQUEST_BOTH,    RCAREA_LAKE_HYLIA,            SCENE_LAKE_HYLIA,            14863,  0x0F, "Southeast Gossip Stone",        "LH Southeast Gossip Stone",       {});
    locationTable[RC_LH_SOUTHWEST_GOSSIP_STONE] =       Location::HintStone(RC_LH_SOUTHWEST_GOSSIP_STONE,       RCQUEST_BOTH,    RCAREA_LAKE_HYLIA,            SCENE_LAKE_HYLIA,            14600,  0x08, "Southwest Gossip Stone",        "LH Southwest Gossip Stone",       {});
    locationTable[RC_LW_GOSSIP_STONE] =                 Location::HintStone(RC_LW_GOSSIP_STONE,                 RCQUEST_BOTH,    RCAREA_LOST_WOODS,            SCENE_LOST_WOODS,            14365,  0x1D, "Gossip Stone",                  "LW Gossip Stone",                 {});
    locationTable[RC_SFM_MAZE_LOWER_GOSSIP_STONE] =     Location::HintStone(RC_SFM_MAZE_LOWER_GOSSIP_STONE,     RCQUEST_BOTH,    RCAREA_SACRED_FOREST_MEADOW,  SCENE_SACRED_FOREST_MEADOW,  14358,  0x16, "Maze Lower Gossip Stone",       "SFM Maze Lower Gossip Stone",     {});
    locationTable[RC_SFM_MAZE_UPPER_GOSSIP_STONE] =     Location::HintStone(RC_SFM_MAZE_UPPER_GOSSIP_STONE,     RCQUEST_BOTH,    RCAREA_SACRED_FOREST_MEADOW,  SCENE_SACRED_FOREST_MEADOW,  14615,  0x17, "Maze Upper Gossip Stone",       "SFM Maze Upper Gossip Stone",     {});
    locationTable[RC_SFM_SARIA_GOSSIP_STONE] =          Location::HintStone(RC_SFM_SARIA_GOSSIP_STONE,          RCQUEST_BOTH,    RCAREA_SACRED_FOREST_MEADOW,  SCENE_SACRED_FOREST_MEADOW,  14876,  0x1C, "Saria Gossip Stone",            "SFM Saria Gossip Stone",          {});
    locationTable[RC_TOT_LEFT_GOSSIP_STONE] =           Location::HintStone(RC_TOT_LEFT_GOSSIP_STONE,           RCQUEST_BOTH,    RCAREA_MARKET,                SCENE_ID_MAX,                0x00,   0x06, "ToT Left Gossip Stone",         "ToT Left Gossip Stone",           {});
    locationTable[RC_TOT_RIGHT_GOSSIP_STONE] =          Location::HintStone(RC_TOT_RIGHT_GOSSIP_STONE,          RCQUEST_BOTH,    RCAREA_MARKET,                SCENE_ID_MAX,                0x00,   0x07, "ToT Right Gossip Stone",        "ToT Right Gossip Stone",          {});
    locationTable[RC_TOT_RIGHT_CENTER_GOSSIP_STONE] =   Location::HintStone(RC_TOT_RIGHT_CENTER_GOSSIP_STONE,   RCQUEST_BOTH,    RCAREA_MARKET,                SCENE_ID_MAX,                0x00,   0x10, "ToT Right Center Gossip Stone", "ToT Right Center Gossip Stone",   {});
    locationTable[RC_TOT_LEFT_CENTER_GOSSIP_STONE] =    Location::HintStone(RC_TOT_LEFT_CENTER_GOSSIP_STONE,    RCQUEST_BOTH,    RCAREA_MARKET,                SCENE_ID_MAX,                0x00,   0x0E, "ToT Left Center Gossip Stone",  "ToT Left Center Gossip Stone",    {});
    locationTable[RC_ZD_GOSSIP_STONE] =                 Location::HintStone(RC_ZD_GOSSIP_STONE,                 RCQUEST_BOTH,    RCAREA_ZORAS_DOMAIN,          SCENE_ZORAS_DOMAIN,          14345,  0x09, "Gossip Stone",                  "ZD Gossip Stone",                 {});
    locationTable[RC_FAIRY_GOSSIP_STONE] =              Location::HintStone(RC_FAIRY_GOSSIP_STONE,              RCQUEST_BOTH,    RCAREA_ZORAS_FOUNTAIN,        SCENE_ZORAS_FOUNTAIN,        0x00,   0x01, "Fairy Gossip Stone",            "Fairy Gossip Stone",              {});
    locationTable[RC_JABU_GOSSIP_STONE] =               Location::HintStone(RC_JABU_GOSSIP_STONE,               RCQUEST_BOTH,    RCAREA_ZORAS_FOUNTAIN,        SCENE_ZORAS_FOUNTAIN,        0x00,   0x02, "Jabu Gossip Stone",             "Jabu Gossip Stone",               {});
    locationTable[RC_ZR_NEAR_GROTTOS_GOSSIP_STONE] =    Location::HintStone(RC_ZR_NEAR_GROTTOS_GOSSIP_STONE,    RCQUEST_BOTH,    RCAREA_ZORAS_RIVER,           SCENE_ZORAS_RIVER,           14605,  0x0D, "Near Grottos Gossip Stone",     "ZR Near Grottos Gossip Stone",    {});
    locationTable[RC_ZR_NEAR_DOMAIN_GOSSIP_STONE] =     Location::HintStone(RC_ZR_NEAR_DOMAIN_GOSSIP_STONE,     RCQUEST_BOTH,    RCAREA_ZORAS_RIVER,           SCENE_ZORAS_RIVER,           14860,  0x0C, "Near Domain Gossip Stone",      "ZR Near Domain Gossip Stone",     {});
    locationTable[RC_HF_COW_GROTTO_GOSSIP_STONE] =      Location::HintStone(RC_HF_COW_GROTTO_GOSSIP_STONE,      RCQUEST_BOTH,    RCAREA_HYRULE_FIELD,          SCENE_GROTTOS,               14363,  0x1B, "Cow Grotto Gossip Stone",       "HF Cow Grotto Gossip Stone",      {});
    locationTable[RC_HF_NEAR_MARKET_GOSSIP_STONE] =     Location::HintStone(RC_HF_NEAR_MARKET_GOSSIP_STONE,     RCQUEST_BOTH,    RCAREA_HYRULE_FIELD,          SCENE_GROTTOS,               -22944, 0x30, "Near Market Gossip Stone",      "HF Near Market Gossip Stone",     {});
    locationTable[RC_HF_SOUTHEAST_GOSSIP_STONE] =       Location::HintStone(RC_HF_SOUTHEAST_GOSSIP_STONE,       RCQUEST_BOTH,    RCAREA_HYRULE_FIELD,          SCENE_GROTTOS,               -22978, 0x32, "Southeast Gossip Stone",        "HF Southeast Gossip Stone",       {});
    locationTable[RC_HF_OPEN_GROTTO_GOSSIP_STONE] =     Location::HintStone(RC_HF_OPEN_GROTTO_GOSSIP_STONE,     RCQUEST_BOTH,    RCAREA_HYRULE_FIELD,          SCENE_GROTTOS,               -22947, 0x33, "Open Grotto Gossip Stone",      "HF Open Grotto Gossip Stone",     {});
    locationTable[RC_KAK_OPEN_GROTTO_GOSSIP_STONE] =    Location::HintStone(RC_KAK_OPEN_GROTTO_GOSSIP_STONE,    RCQUEST_BOTH,    RCAREA_KAKARIKO_VILLAGE,      SCENE_GROTTOS,               -22984, 0x38, "Open Grotto Gossip Stone",      "Kak Open Grotto Gossip Stone",    {});
    locationTable[RC_ZR_OPEN_GROTTO_GOSSIP_STONE] =     Location::HintStone(RC_ZR_OPEN_GROTTO_GOSSIP_STONE,     RCQUEST_BOTH,    RCAREA_ZORAS_RIVER,           SCENE_GROTTOS,               -22985, 0x39, "Open Grotto Gossip Stone",      "ZR Open Grotto Gossip Stone",     {});
    locationTable[RC_LW_NEAR_SHORTCUTS_GOSSIP_STONE] =  Location::HintStone(RC_LW_NEAR_SHORTCUTS_GOSSIP_STONE,  RCQUEST_BOTH,    RCAREA_LOST_WOODS,            SCENE_GROTTOS,               -22964, 0x34, "Near Shortcuts Gossip Stone",   "LW Near Shortcuts Gossip Stone",  {});
    locationTable[RC_DMT_STORMS_GROTTO_GOSSIP_STONE] =  Location::HintStone(RC_DMT_STORMS_GROTTO_GOSSIP_STONE,  RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_TRAIL,  SCENE_GROTTOS,               -23255, 0x37, "Storms Grotto Gossip Stone",    "DMT Storms Grotto Gossip Stone",  {});
    locationTable[RC_DMC_UPPER_GROTTO_GOSSIP_STONE] =   Location::HintStone(RC_DMC_UPPER_GROTTO_GOSSIP_STONE,   RCQUEST_BOTH,    RCAREA_DEATH_MOUNTAIN_CRATER, SCENE_GROTTOS,               -23802, 0x3A, "Upper Grotto Gossip Stone",     "DMC Upper Grotto Gossip Stone",   {});

    // Other Hints
    locationTable[RC_GANONDORF_HINT]    = Location::OtherHint(RC_GANONDORF_HINT,   RCQUEST_BOTH,    RCTYPE_GOSSIP_STONE, RCAREA_GANONS_CASTLE, ACTOR_EN_GANON_MANT, SCENE_GANON_BOSS,           "Ganondorf Hint",   "Ganondorf Hint");
    locationTable[RC_SHEIK_HINT_GC]     = Location::OtherHint(RC_SHEIK_HINT_GC,    RCQUEST_VANILLA, RCTYPE_GOSSIP_STONE, RCAREA_GANONS_CASTLE, ACTOR_EN_XC,         SCENE_INSIDE_GANONS_CASTLE, "Sheik Hint",       "Sheik Hint in Ganons Castle");
    locationTable[RC_SHEIK_HINT_MQ_GC]  = Location::OtherHint(RC_SHEIK_HINT_MQ_GC, RCQUEST_MQ,      RCTYPE_GOSSIP_STONE, RCAREA_GANONS_CASTLE, ACTOR_EN_XC,         SCENE_INSIDE_GANONS_CASTLE, "Sheik Hint",       "Sheik Hint in MQ Ganons Castle");
    locationTable[RC_DAMPE_HINT]        = Location::OtherHint(RC_DAMPE_HINT,       RCQUEST_BOTH,    RCTYPE_GOSSIP_STONE, RCAREA_GRAVEYARD,     ACTOR_ID_MAX,        SCENE_GRAVEKEEPERS_HUT,     "Diary Hint",       "Dampe's Diary Hint");
    locationTable[RC_GREG_HINT]         = Location::OtherHint(RC_GREG_HINT,        RCQUEST_BOTH,    RCTYPE_GOSSIP_STONE, RCAREA_MARKET,        ACTOR_EN_TAKARA_MAN, SCENE_TREASURE_BOX_SHOP,    "Greg Hint",        "Greg Hint");
    locationTable[RC_SARIA_SONG_HINT]   = Location::OtherHint(RC_SARIA_SONG_HINT,  RCQUEST_BOTH,    RCTYPE_GOSSIP_STONE, RCAREA_KOKIRI_FOREST, ACTOR_ID_MAX,        SCENE_ID_MAX,               "Sarias Song Hint", "Magic Hint Via Saria's Song");
    locationTable[RC_ALTAR_HINT_CHILD]  = Location::OtherHint(RC_ALTAR_HINT_CHILD, RCQUEST_BOTH,    RCTYPE_GOSSIP_STONE, RCAREA_MARKET,        ACTOR_ID_MAX,        SCENE_TEMPLE_OF_TIME,       "Child Altar Hint", "ToT Child Altar Text");
    locationTable[RC_ALTAR_HINT_ADULT]  = Location::OtherHint(RC_ALTAR_HINT_ADULT, RCQUEST_BOTH,    RCTYPE_GOSSIP_STONE, RCAREA_MARKET,        ACTOR_ID_MAX,        SCENE_TEMPLE_OF_TIME,       "Adult Altar Hint", "ToT Adult Altar Text");
    
    locationTable[RC_TRIFORCE_COMPLETED] = Location::Reward(RC_TRIFORCE_COMPLETED, RCQUEST_BOTH, RCTYPE_STANDARD, RCAREA_MARKET, ACTOR_ID_MAX, SCENE_ID_MAX, 0x00, 0x00, "Completed Triforce", "Completed Triforce", RHT_NONE, RG_NONE, {}, SpoilerCollectionCheck::None(), SpoilerCollectionCheckGroup::GROUP_NO_GROUP);
    // clang-format on
}

Location* Rando::StaticData::GetLocation(RandomizerCheck locKey) {
    return &(locationTable[locKey]);
}

std::array<Location, RC_MAX>& Rando::StaticData::GetLocationTable() {
    return locationTable;
}
